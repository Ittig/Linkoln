/*******************************************************************************
 * Copyright (c) 2016 Institute of Legal Information Theory and Techniques (ITTIG).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL license v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Contributors: 
 *   Institute of Legal Information Theory and Techniques (ITTIG/CNR)
 *******************************************************************************/
/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>AliasCodici.jflex</tt>
 */
public class AliasCodici {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\41\1\42\1\1\22\0\1\5\6\0\1\0"+
    "\4\0\1\0\1\3\1\36\1\32\1\44\1\0\1\43\1\45\6\0"+
    "\2\0\1\27\1\0\1\31\2\0\1\11\1\33\1\17\1\15\1\13"+
    "\1\26\1\14\1\40\1\7\1\4\1\4\1\10\1\34\1\16\1\12"+
    "\1\23\1\4\1\24\1\21\1\25\1\22\1\37\1\4\1\30\1\4"+
    "\1\35\4\0\1\3\1\0\1\11\1\33\1\17\1\15\1\13\1\26"+
    "\1\14\1\40\1\7\2\4\1\10\1\34\1\16\1\12\1\23\1\4"+
    "\1\24\1\21\1\25\1\22\1\37\1\4\1\30\1\4\1\35\12\0"+
    "\1\41\56\0\1\0\13\0\2\0\6\0\2\0\2\0\2\0\4\0"+
    "\2\0\5\0\2\0\5\0\2\0\6\0\2\0\2\0\2\0\4\0"+
    "\2\0\5\0\2\0\65\0\2\6\115\0\1\20\u1e93\0\1\3\1\3"+
    "\4\0\1\0\16\0\1\41\1\41\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\21\0\2\3\1\0\1\3\3\4"+
    "\1\0\1\4\2\5\1\0\1\5\3\6\4\0\1\6"+
    "\24\0\3\7\1\0\1\7\2\10\1\0\1\10\27\0"+
    "\1\3\1\0\1\4\2\0\1\6\1\0\1\6\6\0"+
    "\3\11\1\0\1\11\22\0\1\7\21\0\2\6\1\0"+
    "\1\6\1\0\1\6\64\0\2\12\2\13\104\0\2\14"+
    "\43\0\2\15\222\0\2\16\124\0\2\17\62\0\2\20"+
    "\25\0\2\21\20\0\2\22\46\0\2\23\2\0\2\24"+
    "\6\0\2\25\26\0\2\26\14\0\2\27\61\0\2\30"+
    "\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[806];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\162\0\u031e"+
    "\0\u0344\0\u036a\0\162\0\u0390\0\u03b6\0\u03b6\0\u03dc\0\162"+
    "\0\u0402\0\u0428\0\u044e\0\162\0\u0474\0\u049a\0\u04c0\0\u04e6"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u049a\0\u082a\0\162"+
    "\0\u0850\0\u0876\0\u0876\0\u089c\0\162\0\u08c2\0\u08e8\0\u090e"+
    "\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e"+
    "\0\u0c9e\0\u0cc4\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\162\0\u0e66\0\u0e8c"+
    "\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6"+
    "\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\u1184\0\u11aa\0\u11d0"+
    "\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300"+
    "\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430"+
    "\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560"+
    "\0\u1586\0\u15ac\0\u03dc\0\u044e\0\u0d5c\0\u15d2\0\u15f8\0\u161e"+
    "\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u1728\0\u174e"+
    "\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e"+
    "\0\u1430\0\u147c\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962"+
    "\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92"+
    "\0\u1ab8\0\u1ade\0\u1b04\0\u089c\0\u090e\0\u1b2a\0\u1b50\0\u1b76"+
    "\0\162\0\u1b9c\0\162\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a"+
    "\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1dd6\0\u14c8\0\u1dfc\0\u1e22\0\u1e48\0\u1e6e\0\u1e94"+
    "\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1fc4"+
    "\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u20f4"+
    "\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2\0\u21d8\0\u21fe\0\u2224"+
    "\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354"+
    "\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412\0\u2438\0\u245e\0\u2484"+
    "\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4"+
    "\0\162\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672\0\u2698\0\u26be"+
    "\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8\0\u27ee"+
    "\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8\0\u291e"+
    "\0\u2944\0\u296a\0\u2990\0\u29b6\0\u29dc\0\u2a02\0\u2a28\0\u2a4e"+
    "\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c\0\162\0\u2b32\0\u2b58"+
    "\0\u2b7e\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88"+
    "\0\u2cae\0\u036a\0\u2cd4\0\u0eb2\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c"+
    "\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c"+
    "\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6\0\u2fcc"+
    "\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6\0\u30fc"+
    "\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206\0\u322c"+
    "\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336\0\u335c"+
    "\0\u3382\0\u33a8\0\u33ce\0\u33f4\0\u341a\0\u3440\0\u3466\0\u348c"+
    "\0\u34b2\0\u34d8\0\u34fe\0\u3524\0\u354a\0\u3570\0\u3596\0\u35bc"+
    "\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a\0\u36a0\0\u36c6\0\u36ec"+
    "\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa\0\u37d0\0\u37f6\0\u381c"+
    "\0\u3842\0\u3868\0\u388e\0\u38b4\0\u38da\0\u3900\0\u3926\0\u394c"+
    "\0\u3972\0\u3998\0\u39be\0\u39e4\0\u3a0a\0\u3a30\0\u3a56\0\u3a7c"+
    "\0\u3aa2\0\u3ac8\0\u3aee\0\u3b14\0\u3b3a\0\u3b60\0\u3b86\0\u3bac"+
    "\0\u3bd2\0\u3bf8\0\u3c1e\0\u3c44\0\u3c6a\0\u3c90\0\u3cb6\0\u3cdc"+
    "\0\u3d02\0\u3d28\0\u3d4e\0\u3d74\0\u3d9a\0\u3dc0\0\u3de6\0\u3e0c"+
    "\0\u3e32\0\u3e58\0\u3e7e\0\u3ea4\0\u3eca\0\u3ef0\0\u3f16\0\u3f3c"+
    "\0\u3f62\0\u3f88\0\u3fae\0\u3fd4\0\u3ffa\0\u4020\0\u4046\0\u406c"+
    "\0\u4092\0\162\0\u40b8\0\u40de\0\u4104\0\u412a\0\u4150\0\u4176"+
    "\0\u419c\0\u41c2\0\u41e8\0\u420e\0\u4234\0\u425a\0\u4280\0\u42a6"+
    "\0\u42cc\0\u42f2\0\u4318\0\u433e\0\u4364\0\u438a\0\u43b0\0\u43d6"+
    "\0\u43fc\0\u4422\0\u4448\0\u446e\0\u4494\0\u44ba\0\u44e0\0\u4506"+
    "\0\u452c\0\u4552\0\u4578\0\u459e\0\u45c4\0\u45ea\0\u4610\0\u4636"+
    "\0\u465c\0\u4682\0\u46a8\0\u46ce\0\u46f4\0\u471a\0\u4740\0\u4766"+
    "\0\u478c\0\u47b2\0\u47d8\0\u47fe\0\u4824\0\u484a\0\u4870\0\u4896"+
    "\0\u48bc\0\u48e2\0\u4908\0\u492e\0\u4954\0\u497a\0\u49a0\0\u49c6"+
    "\0\u49ec\0\u4a12\0\u4a38\0\u4a5e\0\u4a84\0\u4aaa\0\u4ad0\0\u4af6"+
    "\0\u4b1c\0\u4b42\0\u4b68\0\u4b8e\0\u4bb4\0\u4bda\0\u4c00\0\u4c26"+
    "\0\u4c4c\0\u4c72\0\u4c98\0\u4cbe\0\u4ce4\0\u4d0a\0\u4d30\0\162"+
    "\0\u4d56\0\u4d7c\0\u4da2\0\u4dc8\0\u4dee\0\u4e14\0\u4e3a\0\u4e60"+
    "\0\u4e86\0\u4eac\0\u4ed2\0\u4ef8\0\u4f1e\0\u4f44\0\u4f6a\0\u4f90"+
    "\0\u4fb6\0\u4fdc\0\u5002\0\u5028\0\u504e\0\u5074\0\u509a\0\u50c0"+
    "\0\u50e6\0\u510c\0\u5132\0\u5158\0\u517e\0\u51a4\0\u51ca\0\u51f0"+
    "\0\u5216\0\u523c\0\u5262\0\u5288\0\u52ae\0\u52d4\0\u52fa\0\u5320"+
    "\0\u5346\0\u536c\0\u5392\0\u53b8\0\u53de\0\u5404\0\u542a\0\u5450"+
    "\0\u5476\0\u549c\0\u54c2\0\162\0\u54e8\0\u550e\0\u5534\0\u555a"+
    "\0\u5580\0\u55a6\0\u55cc\0\u55f2\0\u5618\0\u563e\0\u5664\0\u568a"+
    "\0\u56b0\0\u56d6\0\u56fc\0\u5722\0\u5748\0\u576e\0\u5794\0\u57ba"+
    "\0\u57e0\0\u5806\0\162\0\u582c\0\u5852\0\u5878\0\u589e\0\u58c4"+
    "\0\u58ea\0\u5910\0\u5936\0\u595c\0\u5982\0\u59a8\0\u59ce\0\u59f4"+
    "\0\u5a1a\0\u5a40\0\u5a66\0\u5a8c\0\162\0\u5ab2\0\u5ad8\0\u5afe"+
    "\0\u5b24\0\u5b4a\0\u5b70\0\u5b96\0\u5bbc\0\u5be2\0\u5c08\0\u5c2e"+
    "\0\u5c54\0\u5c7a\0\u5ca0\0\u5cc6\0\u5cec\0\u5d12\0\u5d38\0\u5d5e"+
    "\0\u5d84\0\u5daa\0\u5dd0\0\u5df6\0\u5e1c\0\u5e42\0\u5e68\0\u5e8e"+
    "\0\u5eb4\0\u5eda\0\u5f00\0\u5f26\0\u5f4c\0\u5f72\0\u5f98\0\u5fbe"+
    "\0\u5fe4\0\u600a\0\u6030\0\u6056\0\162\0\u607c\0\u60a2\0\u60c8"+
    "\0\162\0\u60ee\0\u6114\0\u613a\0\u6160\0\u6186\0\u61ac\0\u61d2"+
    "\0\162\0\u61f8\0\u621e\0\u6244\0\u626a\0\u6290\0\u62b6\0\u62dc"+
    "\0\u6302\0\u6328\0\u634e\0\u6374\0\u639a\0\u63c0\0\u63e6\0\u640c"+
    "\0\u6432\0\u6458\0\u647e\0\u64a4\0\u64ca\0\u64f0\0\u6516\0\u653c"+
    "\0\162\0\u6562\0\u6588\0\u65ae\0\u65d4\0\u65fa\0\u6620\0\u6646"+
    "\0\u666c\0\u6692\0\u66b8\0\u66de\0\u6704\0\u672a\0\162\0\u6750"+
    "\0\u6776\0\u679c\0\u67c2\0\u67e8\0\u680e\0\u6834\0\u685a\0\u6880"+
    "\0\u68a6\0\u68cc\0\u68f2\0\u6918\0\u693e\0\u6964\0\u698a\0\u69b0"+
    "\0\u69d6\0\u69fc\0\u6a22\0\u6a48\0\u6a6e\0\u6a94\0\u6aba\0\u6ae0"+
    "\0\u6b06\0\u6b2c\0\u6b52\0\u6b78\0\u6b9e\0\u6bc4\0\u6bea\0\u6c10"+
    "\0\u6c36\0\u6c5c\0\u6c82\0\u6ca8\0\u6cce\0\u6cf4\0\u6d1a\0\u6d40"+
    "\0\u6d66\0\u6d8c\0\u6db2\0\u6dd8\0\u6dfe\0\u6e24\0\u6e4a\0\u6e70"+
    "\0\u6e96\0\162\0\u6ebc\0\u6ee2\0\u6f08\0\u6f2e\0\u6f54\0\u6f7a"+
    "\0\u6fa0\0\u6fc6\0\u6fec\0\u7012\0\u7038\0\u705e\0\u7084\0\u70aa"+
    "\0\u70d0\0\u70f6\0\u711c\0\u7142\0\u7168\0\u718e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[806];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\2\2\11\4\1\2\6\4"+
    "\1\2\1\4\2\2\3\4\1\2\2\4\2\5\3\2"+
    "\10\0\1\6\6\0\1\7\30\0\1\2\5\0\1\6"+
    "\6\0\1\7\75\0\3\10\1\0\1\10\5\0\1\11"+
    "\12\0\1\12\1\13\6\0\1\10\3\0\1\10\4\0"+
    "\2\14\2\0\1\14\4\0\1\15\3\0\1\16\1\17"+
    "\2\20\1\0\1\21\12\0\1\14\3\0\1\14\4\0"+
    "\3\10\1\0\1\10\20\0\1\12\1\13\12\0\1\10"+
    "\17\0\1\22\37\0\2\23\1\0\1\24\44\0\1\25"+
    "\36\0\2\14\2\0\1\14\10\0\1\16\1\17\2\20"+
    "\1\0\1\21\16\0\1\14\20\0\1\26\30\0\1\27"+
    "\1\30\2\27\1\0\2\27\2\0\1\31\6\0\1\27"+
    "\6\0\1\27\1\0\2\27\3\0\1\32\2\0\5\27"+
    "\1\33\1\34\2\33\1\0\1\33\1\35\1\36\10\0"+
    "\1\33\6\0\1\33\1\0\2\33\3\0\1\37\2\0"+
    "\5\33\1\40\1\41\2\40\1\0\2\40\11\0\1\40"+
    "\4\0\1\42\1\0\1\40\1\0\2\40\3\0\1\43"+
    "\2\0\5\40\1\44\1\45\1\46\1\44\1\0\1\46"+
    "\1\44\4\0\1\47\3\0\1\50\1\44\2\0\1\51"+
    "\1\52\2\0\1\44\1\0\2\44\3\0\1\53\2\0"+
    "\1\44\1\46\3\44\14\0\1\54\47\0\1\55\37\0"+
    "\1\56\50\0\1\57\33\0\2\60\1\61\1\0\1\60"+
    "\2\62\1\0\1\63\1\64\3\0\1\65\1\66\2\20"+
    "\1\0\1\67\3\0\1\70\3\0\1\71\1\72\1\0"+
    "\1\60\3\0\1\60\5\0\1\27\102\0\1\73\6\0"+
    "\1\27\1\30\2\27\1\0\2\27\11\0\1\27\6\0"+
    "\1\27\1\0\2\27\3\0\1\27\2\0\5\27\2\0"+
    "\1\33\102\0\1\74\6\0\1\33\1\34\2\33\1\0"+
    "\2\33\11\0\1\33\6\0\1\33\1\0\2\33\3\0"+
    "\1\33\2\0\5\33\2\0\1\40\67\0\1\75\21\0"+
    "\1\40\1\41\2\40\1\0\2\40\11\0\1\40\6\0"+
    "\1\40\1\0\2\40\3\0\1\40\2\0\5\40\1\0"+
    "\1\76\1\46\2\0\1\76\11\0\1\50\3\0\1\51"+
    "\16\0\1\76\4\0\2\76\2\0\1\76\11\0\1\50"+
    "\3\0\1\51\16\0\1\76\21\0\1\77\27\0\1\100"+
    "\1\101\2\100\1\0\1\100\1\102\1\103\10\0\1\100"+
    "\6\0\1\100\1\0\2\100\3\0\1\104\2\0\5\100"+
    "\1\105\1\106\2\105\1\0\2\105\4\0\1\107\4\0"+
    "\1\105\6\0\1\105\1\0\2\105\3\0\1\110\2\0"+
    "\5\105\12\0\1\111\33\0\1\44\1\45\1\46\1\44"+
    "\1\0\1\46\1\44\10\0\1\50\1\44\2\0\1\51"+
    "\3\0\1\44\1\0\2\44\3\0\1\44\2\0\1\44"+
    "\1\46\3\44\13\0\1\10\33\0\3\112\1\0\1\112"+
    "\3\0\1\113\15\0\1\114\6\0\1\112\3\0\1\112"+
    "\1\115\12\0\1\116\65\0\1\117\16\0\2\60\1\61"+
    "\1\0\1\60\3\0\1\63\1\64\3\0\1\65\1\66"+
    "\2\20\1\0\1\67\3\0\1\70\3\0\1\71\1\72"+
    "\5\0\1\60\4\0\3\61\1\0\1\61\3\0\1\63"+
    "\1\64\3\0\1\120\1\121\2\122\1\0\1\123\3\0"+
    "\1\70\3\0\1\71\1\72\5\0\1\61\22\0\1\124"+
    "\46\0\2\125\12\0\1\126\35\0\1\127\21\0\1\27"+
    "\1\30\2\27\1\0\2\27\2\0\1\130\6\0\1\27"+
    "\6\0\1\27\1\0\2\27\3\0\1\32\2\0\5\27"+
    "\1\33\1\34\2\33\1\0\1\33\1\35\1\36\2\0"+
    "\1\131\5\0\1\33\6\0\1\33\1\0\2\33\3\0"+
    "\1\37\2\0\5\33\1\44\1\45\1\46\1\44\1\0"+
    "\1\46\1\44\2\0\1\132\1\0\1\133\3\0\1\50"+
    "\1\44\2\0\1\51\1\134\2\0\1\44\1\0\2\44"+
    "\3\0\1\53\2\0\1\44\1\46\3\44\10\0\1\135"+
    "\50\0\1\136\43\0\1\137\34\0\1\27\1\30\2\27"+
    "\1\0\1\27\1\140\1\141\10\0\1\27\6\0\1\27"+
    "\1\0\2\27\3\0\1\32\2\0\5\27\1\33\1\34"+
    "\2\33\1\0\1\33\1\142\1\143\10\0\1\33\6\0"+
    "\1\33\1\0\2\33\3\0\1\37\2\0\5\33\1\40"+
    "\1\41\2\40\1\0\2\40\2\0\1\144\6\0\1\40"+
    "\6\0\1\40\1\0\2\40\3\0\1\43\2\0\5\40"+
    "\1\44\1\145\2\44\1\0\2\44\2\0\1\146\6\0"+
    "\1\44\6\0\1\44\1\0\2\44\3\0\1\147\2\0"+
    "\5\44\2\0\1\100\102\0\1\150\6\0\1\100\1\101"+
    "\2\100\1\0\2\100\11\0\1\100\6\0\1\100\1\0"+
    "\2\100\3\0\1\100\2\0\5\100\2\0\1\105\61\0"+
    "\1\151\27\0\1\105\1\106\2\105\1\0\2\105\11\0"+
    "\1\105\6\0\1\105\1\0\2\105\3\0\1\105\2\0"+
    "\5\105\17\0\1\152\27\0\3\112\1\0\1\112\21\0"+
    "\1\114\12\0\1\112\1\115\20\0\1\153\37\0\1\154"+
    "\101\0\1\155\1\0\1\156\1\157\2\156\1\0\1\156"+
    "\1\160\1\161\10\0\1\156\6\0\1\156\1\0\2\156"+
    "\3\0\1\162\2\0\5\156\20\0\2\163\35\0\1\130"+
    "\42\0\2\36\2\0\1\131\60\0\1\42\31\0\1\132"+
    "\1\0\1\133\10\0\1\164\34\0\1\60\52\0\2\165"+
    "\60\0\1\166\26\0\1\167\52\0\1\170\14\0\1\73"+
    "\24\0\1\171\15\0\1\172\35\0\1\173\37\0\1\174"+
    "\41\0\1\175\46\0\1\176\50\0\1\177\54\0\1\200"+
    "\34\0\1\201\41\0\1\202\52\0\1\203\32\0\1\44"+
    "\53\0\1\204\35\0\1\44\1\145\2\44\1\0\2\44"+
    "\11\0\1\44\6\0\1\44\1\0\2\44\3\0\1\44"+
    "\2\0\5\44\1\100\1\101\2\100\1\0\1\100\1\205"+
    "\1\206\10\0\1\100\6\0\1\100\1\0\2\100\3\0"+
    "\1\104\2\0\5\100\1\105\1\106\2\105\1\0\2\105"+
    "\2\0\1\207\6\0\1\105\6\0\1\105\1\0\2\105"+
    "\3\0\1\110\2\0\5\105\1\0\2\76\2\0\1\76"+
    "\5\0\1\210\3\0\1\50\3\0\1\51\12\0\1\76"+
    "\3\0\1\76\40\0\1\211\23\0\1\212\76\0\1\213"+
    "\3\0\1\156\77\0\1\214\11\0\1\156\1\157\2\156"+
    "\1\0\2\156\11\0\1\156\6\0\1\156\1\0\2\156"+
    "\3\0\1\156\2\0\5\156\13\0\1\215\44\0\1\216"+
    "\41\0\2\217\44\0\2\220\44\0\2\221\63\0\1\222"+
    "\40\0\2\223\3\0\1\224\42\0\1\225\31\0\2\226"+
    "\36\0\1\44\1\227\2\230\1\0\1\230\1\44\2\0"+
    "\1\231\6\0\1\44\6\0\1\232\1\0\2\44\1\0"+
    "\1\233\1\0\1\234\2\0\1\44\1\230\3\44\17\0"+
    "\1\235\3\0\1\236\52\0\1\237\23\0\2\240\51\0"+
    "\1\241\43\0\1\242\47\0\1\243\43\0\1\244\47\0"+
    "\1\245\42\0\1\246\45\0\1\247\52\0\1\250\31\0"+
    "\3\112\1\0\1\112\2\251\17\0\1\114\6\0\1\112"+
    "\3\0\1\112\1\115\32\0\1\252\60\0\1\253\1\0"+
    "\1\254\13\0\1\255\55\0\1\256\41\0\1\257\3\0"+
    "\1\236\41\0\1\260\44\0\1\261\45\0\1\262\35\0"+
    "\2\263\60\0\1\264\47\0\1\265\37\0\1\266\30\0"+
    "\3\226\1\0\1\226\4\0\1\267\14\0\1\270\12\0"+
    "\1\226\4\0\1\271\1\230\1\271\1\0\1\271\21\0"+
    "\1\272\4\0\1\233\5\0\1\271\4\0\3\271\1\0"+
    "\1\271\21\0\1\272\4\0\1\233\5\0\1\271\13\0"+
    "\1\273\45\0\1\274\36\0\3\275\1\0\1\275\2\276"+
    "\4\0\1\277\6\0\1\300\3\0\1\301\6\0\1\275"+
    "\3\0\1\275\3\0\1\44\1\227\2\230\1\0\1\230"+
    "\1\44\11\0\1\44\6\0\1\232\1\0\2\44\1\0"+
    "\1\233\1\0\1\44\2\0\1\44\1\230\3\44\1\0"+
    "\2\302\1\303\1\0\1\302\5\0\1\304\3\0\1\50"+
    "\3\0\1\51\3\0\1\305\6\0\1\302\3\0\1\302"+
    "\27\0\1\306\41\0\2\307\25\0\3\240\1\0\1\240"+
    "\11\0\1\310\7\0\1\311\12\0\1\240\27\0\1\312"+
    "\56\0\1\313\23\0\1\314\45\0\1\315\54\0\1\316"+
    "\34\0\1\317\54\0\2\320\24\0\1\321\1\322\2\321"+
    "\1\0\2\321\11\0\1\321\6\0\1\321\1\0\2\321"+
    "\3\0\1\321\2\0\5\321\1\323\1\324\2\323\1\0"+
    "\2\323\11\0\1\323\6\0\1\323\1\0\2\323\3\0"+
    "\1\323\2\0\5\323\16\0\1\325\60\0\1\326\15\0"+
    "\3\303\1\0\1\303\5\0\1\327\3\0\1\330\3\0"+
    "\1\331\3\0\1\305\6\0\1\303\3\0\1\303\25\0"+
    "\1\332\31\0\2\333\47\0\1\334\53\0\1\335\62\0"+
    "\1\336\22\0\1\337\42\0\2\340\61\0\1\341\32\0"+
    "\1\342\50\0\1\343\45\0\1\344\33\0\3\275\1\0"+
    "\1\275\6\0\1\277\6\0\1\300\3\0\1\301\12\0"+
    "\1\275\13\0\1\345\57\0\1\346\34\0\1\347\44\0"+
    "\1\350\36\0\2\302\1\303\1\0\1\302\11\0\1\50"+
    "\3\0\1\51\3\0\1\305\12\0\1\302\4\0\3\303"+
    "\1\0\1\303\11\0\1\330\3\0\1\331\3\0\1\305"+
    "\12\0\1\303\20\0\1\351\2\0\2\352\34\0\1\353"+
    "\43\0\2\354\51\0\1\355\54\0\1\356\33\0\1\357"+
    "\43\0\2\360\44\0\2\361\62\0\1\362\45\0\1\363"+
    "\34\0\1\364\34\0\1\321\45\0\1\323\70\0\1\365"+
    "\20\0\27\366\1\0\16\366\15\0\1\367\2\0\2\352"+
    "\32\0\2\103\51\0\1\107\56\0\1\370\41\0\2\371"+
    "\60\0\1\372\22\0\1\373\46\0\1\374\60\0\1\375"+
    "\37\0\1\376\51\0\1\377\35\0\1\u0100\62\0\1\u0101"+
    "\16\0\3\275\1\0\1\275\2\u0102\4\0\1\277\6\0"+
    "\1\300\3\0\1\301\6\0\1\275\3\0\1\275\16\0"+
    "\1\u0103\51\0\1\u0104\41\0\1\u0105\54\0\1\u0106\43\0"+
    "\2\u0107\37\0\1\u0108\45\0\1\u0109\55\0\1\u010a\32\0"+
    "\1\u010b\50\0\1\u010c\43\0\1\u010d\46\0\1\u010e\44\0"+
    "\1\76\42\0\2\u010f\61\0\1\u0110\33\0\1\u0111\34\0"+
    "\27\366\1\u0112\16\366\22\0\1\u0113\34\0\1\u0114\61\0"+
    "\1\u0115\33\0\1\u0116\33\0\3\373\1\0\1\373\7\0"+
    "\1\u0117\11\0\1\u0118\12\0\1\373\3\0\1\u0119\1\u011a"+
    "\2\u0119\1\0\2\u0119\11\0\1\u0119\6\0\1\u0119\1\0"+
    "\2\u0119\3\0\1\u0119\2\0\5\u0119\25\0\1\u011b\31\0"+
    "\1\u011c\46\0\1\u011d\63\0\1\u011e\35\0\2\u011f\51\0"+
    "\1\u0120\44\0\1\u0121\34\0\1\u0122\62\0\1\u0123\41\0"+
    "\1\u0124\33\0\1\u0125\63\0\1\u0126\42\0\1\u0127\51\0"+
    "\1\u0128\41\0\1\u0129\50\0\1\u012a\16\0\3\u010d\1\0"+
    "\1\u010d\15\0\1\u012b\3\0\1\u012c\12\0\1\u010d\21\0"+
    "\1\u012d\40\0\1\112\65\0\1\u012e\40\0\1\u012f\53\0"+
    "\1\u0130\37\0\1\u0131\56\0\1\u0132\34\0\1\u0133\37\0"+
    "\1\u0134\35\0\2\u0135\46\0\1\u0136\37\0\1\u0119\51\0"+
    "\2\u0137\73\0\1\u0138\34\0\1\u0139\41\0\2\u013a\37\0"+
    "\1\u013b\43\0\1\u013c\60\0\1\u013d\21\0\1\u013e\1\u013f"+
    "\2\u013e\1\0\2\u013e\11\0\1\u013e\6\0\1\u013e\1\0"+
    "\2\u013e\3\0\1\u013e\2\0\5\u013e\20\0\2\u0140\35\0"+
    "\1\302\35\0\3\u0125\1\0\1\u0125\3\0\1\u0141\15\0"+
    "\1\u0142\12\0\1\u0125\23\0\2\u0143\24\0\1\u0144\2\0"+
    "\36\u0144\2\0\3\u0144\27\u0145\1\0\16\u0145\22\0\1\u0146"+
    "\43\0\2\u0147\50\0\1\u0148\31\0\1\u0149\50\0\1\u014a"+
    "\32\0\27\u014b\1\0\16\u014b\13\0\1\u014c\42\0\1\u014d"+
    "\46\0\1\303\42\0\2\u014e\47\0\1\u014f\61\0\1\u0150"+
    "\43\0\1\u0151\35\0\1\u0152\33\0\3\u0137\1\0\1\u0137"+
    "\15\0\1\u0153\3\0\1\u0154\12\0\1\u0137\11\0\2\u0155"+
    "\63\0\1\u0156\33\0\1\u0157\55\0\1\u0158\46\0\1\u0159"+
    "\32\0\1\u0122\36\0\1\u013e\56\0\1\u015a\66\0\1\u015b"+
    "\21\0\1\u015c\50\0\1\u015d\33\0\3\u0144\1\0\1\u0144"+
    "\2\u015e\17\0\1\u015f\12\0\1\u0144\3\0\27\u0145\1\u0160"+
    "\16\u0145\24\0\1\u0161\34\0\1\u0162\44\0\1\u0163\46\0"+
    "\1\u0164\32\0\27\u014b\1\u0165\16\u014b\13\0\1\u0166\44\0"+
    "\1\u0167\70\0\1\u0168\22\0\1\u0169\45\0\1\u016a\63\0"+
    "\1\u016b\37\0\1\u016c\33\0\1\u016d\47\0\1\u016e\55\0"+
    "\1\u016f\46\0\1\u0170\53\0\1\u0171\27\0\1\275\55\0"+
    "\1\u0172\56\0\1\u0173\24\0\1\u0174\55\0\1\u0175\40\0"+
    "\1\u0176\37\0\1\u0177\67\0\1\u0178\24\0\1\u0179\57\0"+
    "\1\u017a\47\0\1\u017b\50\0\1\u017c\47\0\1\u017d\43\0"+
    "\1\u017e\33\0\1\u017f\35\0\2\u0180\37\0\3\u0169\1\0"+
    "\1\u0169\21\0\1\u0181\4\0\1\u0182\5\0\1\u0169\27\0"+
    "\1\u0183\41\0\2\u0184\57\0\1\u0185\25\0\1\u0186\50\0"+
    "\1\u0187\45\0\1\u0188\60\0\1\u0189\14\0\27\u018a\1\0"+
    "\16\u018a\31\0\1\u018b\22\0\2\u018c\66\0\1\u018d\46\0"+
    "\1\u018e\31\0\1\u018f\43\0\1\u0190\42\0\1\u0191\45\0"+
    "\1\u0192\66\0\1\u0193\27\0\1\u0194\52\0\2\u0195\34\0"+
    "\1\u0196\55\0\2\u0197\32\0\2\u0198\50\0\1\u0199\43\0"+
    "\1\u019a\43\0\2\u019b\63\0\1\u019c\33\0\1\u019d\65\0"+
    "\1\u019e\42\0\1\u019f\23\0\2\u01a0\44\0\2\u01a1\36\0"+
    "\27\u01a2\1\0\16\u01a2\27\u018a\1\u01a3\16\u018a\27\u01a4\1\0"+
    "\16\u01a4\16\0\1\u01a5\47\0\2\u01a6\24\0\27\u01a7\1\0"+
    "\16\u01a7\22\0\1\u01a8\53\0\1\u01a9\30\0\1\u01aa\40\0"+
    "\2\u01ab\36\0\27\u01ac\1\0\16\u01ac\35\0\1\u01ad\23\0"+
    "\1\u01ae\45\0\1\u01af\45\0\1\u01b0\33\0\3\u0198\1\0"+
    "\1\u0198\15\0\1\u01b1\3\0\1\u01b2\12\0\1\u0198\21\0"+
    "\1\u01b3\42\0\1\u01b4\42\0\1\u01b5\47\0\1\u01b6\56\0"+
    "\1\u01b7\32\0\1\u01b8\55\0\2\u01b9\25\0\3\u01a0\1\0"+
    "\1\u01a0\5\0\1\u01ba\13\0\1\u01bb\12\0\1\u01a0\30\0"+
    "\1\u01bc\20\0\27\u01a2\1\u01bd\16\u01a2\32\0\1\u01be\13\0"+
    "\27\u01a4\1\u01bf\16\u01a4\6\0\2\u01c0\51\0\1\u01c1\32\0"+
    "\27\u01a7\1\u01c2\16\u01a7\20\0\2\u01c3\44\0\2\u01c4\54\0"+
    "\1\u01c5\16\0\3\u01ab\1\0\1\u01ab\15\0\1\u01c6\3\0"+
    "\1\u01c7\12\0\1\u01ab\3\0\27\u01ac\1\u01c8\16\u01ac\6\0"+
    "\2\u01c9\61\0\1\u01ca\52\0\1\u01cb\40\0\1\u01cc\46\0"+
    "\1\u01cd\31\0\1\u01ce\50\0\1\u01cf\62\0\1\u01d0\23\0"+
    "\2\u01d1\36\0\1\u01d2\1\u01d3\2\u01d2\1\0\2\u01d2\11\0"+
    "\1\u01d2\6\0\1\u01d2\1\0\2\u01d2\3\0\1\u01d2\2\0"+
    "\5\u01d2\31\0\1\u01d4\22\0\2\u01d5\51\0\1\u01d6\42\0"+
    "\1\u01d7\45\0\1\u01d8\35\0\1\u01d9\2\0\36\u01d9\2\0"+
    "\3\u01d9\32\0\1\u01da\23\0\1\u01db\67\0\1\u01dc\33\0"+
    "\2\u01dd\47\0\1\u01de\54\0\1\u01df\40\0\1\u01e0\33\0"+
    "\1\u01e1\52\0\2\u01e2\35\0\1\u01e3\44\0\1\u01e4\67\0"+
    "\1\u01e5\25\0\1\u01e6\64\0\1\u01e7\34\0\2\u01e8\55\0"+
    "\1\10\22\0\2\u01e9\51\0\1\u01ea\33\0\3\u01cf\1\0"+
    "\1\u01cf\7\0\1\u01eb\11\0\1\u01ec\12\0\1\u01cf\23\0"+
    "\2\u01ed\51\0\1\u01ee\22\0\1\u01d2\43\0\27\u01ef\1\0"+
    "\16\u01ef\17\0\1\u01f0\51\0\1\u01f1\35\0\1\u01f2\45\0"+
    "\1\u01f3\33\0\3\u01d9\1\0\1\u01d9\14\0\1\u01f4\4\0"+
    "\1\u01f5\12\0\1\u01d9\13\0\1\u01f6\50\0\1\u01f7\42\0"+
    "\1\u01f8\62\0\1\u01f9\51\0\1\u01fa\24\0\1\u01fb\61\0"+
    "\1\u01fc\44\0\1\u01fd\35\0\1\u01fe\45\0\1\u01ff\45\0"+
    "\1\u0200\42\0\1\u0201\53\0\1\u0202\27\0\27\u0203\1\0"+
    "\16\u0203\13\0\1\u0204\71\0\1\u0205\36\0\1\u0206\23\0"+
    "\2\u0207\46\0\1\u0208\50\0\1\u0209\43\0\1\u020a\34\0"+
    "\27\u01ef\1\u020b\16\u01ef\6\0\2\u020c\67\0\1\u020d\41\0"+
    "\1\u020e\50\0\1\u020f\27\0\1\u0210\43\0\1\u0211\50\0"+
    "\1\u0212\62\0\1\u0213\30\0\1\u0214\56\0\1\u0215\21\0"+
    "\27\u0216\1\0\16\u0216\13\0\1\u0217\40\0\2\u0218\67\0"+
    "\1\u0219\37\0\1\u021a\42\0\2\u021b\54\0\1\u021c\30\0"+
    "\1\u021d\45\0\1\u021e\32\0\27\u0203\1\u021f\16\u0203\23\0"+
    "\1\u0220\33\0\1\u0221\54\0\2\u0222\40\0\1\u0223\44\0"+
    "\1\u0224\55\0\1\u0225\46\0\1\u0226\53\0\1\u0227\13\0"+
    "\1\u0228\1\u0229\2\u0228\1\0\2\u0228\11\0\1\u0228\6\0"+
    "\1\u0228\1\0\2\u0228\3\0\1\u0228\2\0\5\u0228\27\u022a"+
    "\1\0\16\u022a\25\0\1\u022b\40\0\2\u022c\60\0\1\u022d"+
    "\24\0\1\u022e\62\0\1\u022f\35\0\2\u0230\54\0\1\u0231"+
    "\26\0\1\u0232\34\0\27\u0216\1\u0233\16\u0216\30\0\1\u0234"+
    "\26\0\1\u0235\34\0\27\u0236\1\0\16\u0236\31\0\1\61"+
    "\25\0\1\u0237\54\0\2\u0238\54\0\1\u0239\16\0\3\u021e"+
    "\1\0\1\u021e\7\0\1\u023a\11\0\1\u023b\12\0\1\u021e"+
    "\35\0\1\u023c\44\0\1\112\41\0\1\u023d\33\0\1\u023e"+
    "\40\0\2\u023f\66\0\1\u0240\46\0\1\u0241\27\0\1\u0242"+
    "\42\0\1\u0243\37\0\1\u0228\43\0\27\u022a\1\u0244\16\u022a"+
    "\24\0\1\u0245\34\0\1\u0246\44\0\1\u0247\63\0\1\u0248"+
    "\35\0\2\u0249\37\0\1\u024a\52\0\2\u024b\51\0\1\u024c"+
    "\52\0\1\u024d\33\0\2\u024e\34\0\1\u024f\35\0\27\u0236"+
    "\1\u0250\16\u0236\14\0\1\u0251\44\0\1\u0252\52\0\2\u0253"+
    "\35\0\1\u0254\44\0\1\u0255\45\0\1\u0256\50\0\1\u0257"+
    "\55\0\1\u0258\47\0\1\u0259\40\0\2\u025a\24\0\27\u025b"+
    "\1\0\16\u025b\1\u025c\1\u025d\2\u025c\1\0\2\u025c\11\0"+
    "\1\u025c\6\0\1\u025c\1\0\2\u025c\3\0\1\u025c\2\0"+
    "\5\u025c\13\0\1\u025e\64\0\1\u025f\25\0\1\u0260\56\0"+
    "\1\u0261\23\0\3\u0247\1\0\1\u0247\7\0\1\u0262\11\0"+
    "\1\u0263\12\0\1\u0247\23\0\2\u0264\37\0\1\u0265\55\0"+
    "\1\u0266\35\0\1\u0267\40\0\2\u0268\46\0\1\u0269\50\0"+
    "\1\u026a\45\0\1\u026b\64\0\1\u026c\27\0\1\u026d\54\0"+
    "\1\u026e\35\0\1\u026f\57\0\1\u0270\33\0\1\u0271\45\0"+
    "\1\u0272\32\0\1\u0273\1\u0274\2\u0273\1\0\2\u0273\11\0"+
    "\1\u0273\6\0\1\u0273\1\0\2\u0273\3\0\1\u0273\2\0"+
    "\5\u0273\31\0\1\u0275\25\0\1\u0276\47\0\1\u0277\32\0"+
    "\27\u025b\1\u0278\16\u025b\2\0\1\u025c\73\0\1\u0279\25\0"+
    "\1\u027a\53\0\1\u027b\60\0\1\u027c\26\0\1\u027d\43\0"+
    "\1\u027e\50\0\1\u027f\55\0\1\u0280\53\0\1\271\37\0"+
    "\1\u0281\61\0\1\u0282\21\0\1\u0283\55\0\1\u0284\22\0"+
    "\1\u0285\1\u0286\2\u0285\1\0\2\u0285\11\0\1\u0285\6\0"+
    "\1\u0285\1\0\2\u0285\3\0\1\u0285\2\0\5\u0285\10\0"+
    "\1\u0287\43\0\2\u0288\67\0\1\u0289\37\0\1\u028a\30\0"+
    "\2\u028b\66\0\1\u028c\45\0\1\u028d\17\0\1\u0273\43\0"+
    "\27\u028e\1\0\16\u028e\10\0\1\u028f\60\0\1\u0290\54\0"+
    "\1\u0291\33\0\2\u0292\37\0\1\u0293\40\0\2\u0294\36\0"+
    "\27\u0295\1\0\16\u0295\16\0\1\u0296\42\0\1\u0297\55\0"+
    "\1\u0298\53\0\1\226\45\0\1\275\26\0\1\u0299\63\0"+
    "\1\u029a\46\0\1\303\16\0\1\u0285\56\0\1\u029b\44\0"+
    "\1\u029c\33\0\27\u029d\1\0\16\u029d\31\0\1\240\15\0"+
    "\3\u028b\1\0\1\u028b\15\0\1\u029e\3\0\1\u029f\12\0"+
    "\1\u028b\23\0\2\u02a0\44\0\2\u02a1\24\0\27\u028e\1\u02a2"+
    "\16\u028e\13\0\1\u02a3\63\0\1\u02a4\24\0\1\u02a5\50\0"+
    "\1\u02a6\62\0\1\u02a7\34\0\1\u02a8\26\0\27\u0295\1\u02a9"+
    "\16\u0295\16\0\1\u02aa\57\0\1\u02ab\46\0\1\u02ac\14\0"+
    "\1\u02ad\1\u02ae\2\u02ad\1\0\2\u02ad\11\0\1\u02ad\6\0"+
    "\1\u02ad\1\0\2\u02ad\3\0\1\u02ad\2\0\5\u02ad\20\0"+
    "\2\u02af\54\0\1\u02b0\15\0\1\u02b1\1\u02b2\2\u02b1\1\0"+
    "\2\u02b1\11\0\1\u02b1\6\0\1\u02b1\1\0\2\u02b1\3\0"+
    "\1\u02b1\2\0\5\u02b1\27\u029d\1\u02b3\16\u029d\13\0\1\u02b4"+
    "\42\0\1\u02b5\50\0\1\u02b6\45\0\1\u02b7\64\0\1\u02b8"+
    "\13\0\1\u02b9\1\u02ba\2\u02b9\1\0\2\u02b9\11\0\1\u02b9"+
    "\6\0\1\u02b9\1\0\2\u02b9\3\0\1\u02b9\2\0\5\u02b9"+
    "\27\u02bb\1\0\16\u02bb\13\0\1\u02bc\55\0\1\u02bd\42\0"+
    "\2\u02be\64\0\1\u02bf\37\0\1\u02c0\24\0\1\u02c1\54\0"+
    "\2\u02c2\24\0\27\u02c3\1\0\16\u02c3\2\0\1\u02ad\56\0"+
    "\1\u02c4\52\0\2\u02c5\26\0\1\u02b1\75\0\1\u02c6\37\0"+
    "\1\u02c7\34\0\1\u02c8\55\0\1\u02c9\45\0\1\u02ca\32\0"+
    "\1\u02cb\37\0\1\u02b9\43\0\27\u02bb\1\u02cc\16\u02bb\30\0"+
    "\1\u02cd\46\0\1\373\27\0\1\u02ce\45\0\1\u02cf\42\0"+
    "\1\u02d0\35\0\1\u02d1\1\u02d2\2\u02d1\1\0\2\u02d1\11\0"+
    "\1\u02d1\6\0\1\u02d1\1\0\2\u02d1\3\0\1\u02d1\2\0"+
    "\5\u02d1\13\0\1\u02d3\32\0\27\u02c3\1\u02d4\16\u02c3\23\0"+
    "\1\u02d5\35\0\1\u02d6\42\0\1\u02d7\55\0\2\u02d8\54\0"+
    "\1\u02d9\46\0\1\u02da\45\0\1\u010d\27\0\1\u02db\64\0"+
    "\1\u02dc\33\0\2\u02dd\47\0\1\u02de\22\0\1\u02df\1\u02e0"+
    "\2\u02df\1\0\2\u02df\11\0\1\u02df\6\0\1\u02df\1\0"+
    "\2\u02df\3\0\1\u02df\2\0\5\u02df\13\0\1\u02e1\34\0"+
    "\1\u02d1\66\0\1\u02e2\54\0\1\u02e3\44\0\1\u0125\37\0"+
    "\1\u02e4\35\0\1\u02e5\44\0\1\u02e6\53\0\2\u02e7\24\0"+
    "\27\u02e8\1\0\16\u02e8\30\0\1\u02e9\25\0\1\u02ea\50\0"+
    "\1\u02eb\63\0\1\u0137\16\0\1\u02df\73\0\1\u02ec\46\0"+
    "\1\u02ed\24\0\1\u02ee\66\0\1\u0144\44\0\1\u02ef\33\0"+
    "\1\u02f0\42\0\1\u02f1\32\0\27\u02e8\1\u02f2\16\u02e8\20\0"+
    "\2\u02f3\37\0\1\u02f4\55\0\1\u02f5\42\0\2\u02f6\24\0"+
    "\27\u02f7\1\0\16\u02f7\13\0\1\u02f8\52\0\2\u02f9\35\0"+
    "\1\u02fa\57\0\1\u02fb\54\0\1\u02fc\26\0\1\u02fd\62\0"+
    "\1\u02fe\46\0\1\u0169\27\0\1\u02ff\32\0\27\u02f7\1\u0300"+
    "\16\u02f7\30\0\1\u0301\30\0\1\u0302\42\0\1\u0303\66\0"+
    "\1\u0304\24\0\1\u0305\60\0\1\u0306\42\0\2\u0307\47\0"+
    "\1\u0308\54\0\1\u0309\33\0\2\u030a\47\0\1\u030b\30\0"+
    "\2\u030c\36\0\27\u030d\1\0\16\u030d\13\0\1\u030e\63\0"+
    "\1\u0198\27\0\1\u030f\63\0\1\u01a0\24\0\1\u0310\50\0"+
    "\1\u0311\63\0\1\u01ab\14\0\1\u0312\1\u0313\2\u0312\1\0"+
    "\2\u0312\11\0\1\u0312\6\0\1\u0312\1\0\2\u0312\3\0"+
    "\1\u0312\2\0\5\u0312\27\u030d\1\u0314\16\u030d\30\0\1\u0315"+
    "\40\0\1\u0316\35\0\1\u0317\55\0\1\u0318\24\0\1\u0312"+
    "\75\0\1\u0319\33\0\2\u031a\55\0\1\u01cf\44\0\1\u031b"+
    "\46\0\1\u01d9\24\0\1\u031c\50\0\1\u031d\52\0\2\u031e"+
    "\37\0\1\u031f\55\0\1\u0320\35\0\1\u0321\62\0\1\u0322"+
    "\46\0\1\u021e\37\0\1\u0323\42\0\2\u0324\55\0\1\u0247"+
    "\27\0\1\u0325\55\0\1\u0326\53\0\1\u028b\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29108];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\21\0\1\11\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\2\1\4\0\1\1\24\0\1\11\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\27\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\6\0\1\11"+
    "\2\1\1\0\1\1\22\0\1\1\21\0\2\1\1\0"+
    "\1\1\1\0\1\1\64\0\1\11\1\1\1\11\1\1"+
    "\104\0\1\11\1\1\43\0\1\11\1\1\222\0\1\11"+
    "\1\1\124\0\1\11\1\1\62\0\1\11\1\1\25\0"+
    "\1\11\1\1\20\0\1\11\1\1\46\0\1\11\1\1"+
    "\2\0\1\11\1\1\6\0\1\11\1\1\26\0\1\11"+
    "\1\1\14\0\1\11\1\1\61\0\1\11\1\1\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[806];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	private StringBuilder output = new StringBuilder();

	public String getOutput() {
		return output.toString();
	}

	private String openTag = "<font color=\"lime\"><LK:ALIAS";  
	private String closeTag = "</LK:ALIAS></font>"; 
		
	
	private void saveAlias(String text, String emanante, String value, String data, String numero) {
	
		String out = text.substring(0,1) + openTag + " emanante=\"" + emanante + "\" value=\"" + value + "\" ";
		
		if( !data.equals("") ) {
			
			out += "data=\"" + data + "\" ";
		}
		
		if( !numero.equals("") ) {
			
			out += "numero=\"" + numero + "\"";
		}
		
		out += ">" + text.substring(1, text.length()-1) + closeTag + text.substring(text.length()-1);

		output.append(out);	
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AliasCodici(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 25: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 26: break;
        case 3: 
          { saveAlias(yytext(), "stato", "regio.decreto", "30031942", "327");
          }
        case 27: break;
        case 4: 
          { saveAlias(yytext(), "stato", "codice.civile", "16031942", "262");
          }
        case 28: break;
        case 5: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "30041992", "285");
          }
        case 29: break;
        case 6: 
          { saveAlias(yytext(), "stato", "codice.penale", "19101930", "1398");
          }
        case 30: break;
        case 7: 
          { saveAlias(yytext(), "stato", "codice.procedura.civile", "28101940", "1443");
          }
        case 31: break;
        case 8: 
          { saveAlias(yytext(), "presidente.repubblica", "codice.procedura.penale", "22091988", "447");
          }
        case 32: break;
        case 9: 
          { saveAlias(yytext(), "stato", "regio.decreto", "16031942", "267");
          }
        case 33: break;
        case 10: 
          { saveAlias(yytext(), "stato", "legge", "28122001", "448");
          }
        case 34: break;
        case 11: 
          { saveAlias(yytext(), "stato", "legge", "27122002", "289");
          }
        case 35: break;
        case 12: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "06092005", "206");
          }
        case 36: break;
        case 13: 
          { saveAlias(yytext(), "stato", "regio.decreto", "20021941", "303");
          }
        case 37: break;
        case 14: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "18072005", "171");
          }
        case 38: break;
        case 15: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "12042006", "163");
          }
        case 39: break;
        case 16: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "15032010", "66");
          }
        case 40: break;
        case 17: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "07092005", "209");
          }
        case 41: break;
        case 18: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "10022005", "30");
          }
        case 42: break;
        case 19: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "02072010", "104");
          }
        case 43: break;
        case 20: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "10022004", "42");
          }
        case 44: break;
        case 21: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "07032005", "82");
          }
        case 45: break;
        case 22: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "11042006", "198");
          }
        case 46: break;
        case 23: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "01082003", "259");
          }
        case 47: break;
        case 24: 
          { saveAlias(yytext(), "stato", "decreto.legislativo", "30062003", "196");
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AliasCodici [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AliasCodici scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AliasCodici(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
