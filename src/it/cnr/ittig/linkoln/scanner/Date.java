/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>Date.jflex</tt>
 */
public class Date {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\2\1\56\1\57\1\1\22\0\1\7\6\0\1\3"+
    "\4\0\1\0\1\4\1\55\1\33\1\40\1\41\1\42\1\45\2\6"+
    "\2\52\1\51\1\53\2\0\1\31\1\0\1\32\2\0\1\13\1\34"+
    "\1\21\1\17\1\15\1\30\1\16\1\5\1\46\1\5\1\5\1\12"+
    "\1\35\1\20\1\14\1\25\1\5\1\26\1\23\1\27\1\24\1\47"+
    "\1\5\1\50\1\5\1\36\1\0\1\54\1\0\1\43\1\4\1\3"+
    "\1\13\1\34\1\21\1\17\1\15\1\30\1\16\1\5\1\11\2\5"+
    "\1\12\1\35\1\20\1\44\1\25\1\5\1\26\1\23\1\27\1\24"+
    "\1\37\1\5\1\5\1\5\1\36\12\0\1\56\52\0\1\43\3\0"+
    "\1\3\13\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\5\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\65\0\2\10\115\0\1\22\u1e93\0\1\4\1\4\4\0\1\3"+
    "\16\0\1\56\1\56\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\1\2\2\3\1\1\1\2\55\0\1\4"+
    "\120\0\1\5\366\0\2\6\25\0\5\7\33\0\1\6"+
    "\2\10\4\0\3\11\1\6\1\10\2\0\1\11\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\140\0\u0120"+
    "\0\300\0\u0150\0\300\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0450\0\u0150\0\u0480\0\u04b0\0\u04e0\0\u0510"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0"+
    "\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\300\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0"+
    "\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30"+
    "\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0"+
    "\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30"+
    "\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30"+
    "\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0"+
    "\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030"+
    "\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0"+
    "\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330"+
    "\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0"+
    "\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\u3630"+
    "\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u3780\0\u37b0"+
    "\0\u37e0\0\u3810\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900\0\u3930"+
    "\0\u3960\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a80\0\u3ab0"+
    "\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00\0\u3c30"+
    "\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80\0\u3db0"+
    "\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00\0\u3f30"+
    "\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080\0\u40b0"+
    "\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200\0\u4230"+
    "\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380\0\u43b0"+
    "\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500\0\u4530"+
    "\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680\0\u46b0"+
    "\0\300\0\u46e0\0\u4710\0\u4740\0\u4770\0\u47a0\0\u47d0\0\u4800"+
    "\0\u4830\0\u4860\0\u4890\0\u48c0\0\u48f0\0\u4920\0\u4950\0\u4980"+
    "\0\u49b0\0\u49e0\0\u4a10\0\u4a40\0\u4a70\0\u4aa0\0\u4ad0\0\300"+
    "\0\u4b00\0\u4b30\0\u2910\0\u4b60\0\u4b90\0\u4bc0\0\u4bf0\0\u4c20"+
    "\0\u4c50\0\u4c80\0\u4cb0\0\u4ce0\0\u4d10\0\u4d40\0\u4d70\0\u4da0"+
    "\0\u4dd0\0\u4e00\0\u4e30\0\u4e60\0\u4e90\0\u4ec0\0\u4ef0\0\u4f20"+
    "\0\u4b30\0\u4b60\0\u4f50\0\u4f80\0\u4fb0\0\u4fe0\0\u5010\0\u5040"+
    "\0\300\0\u5070\0\u50a0\0\u50d0\0\u5100\0\u5130\0\300\0\u5160"+
    "\0\u5190\0\u5100\0\u51c0\0\u51f0\0\u5220\0\u51f0\0\u5220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\1\5\22\3\1\6\6\3\3\5"+
    "\2\3\1\5\3\3\3\5\2\3\2\7\1\5\1\10"+
    "\1\11\26\5\1\12\24\5\2\13\6\0\1\14\3\0"+
    "\1\15\1\16\1\17\1\0\1\20\1\21\1\22\1\0"+
    "\2\23\4\0\1\24\4\0\1\25\2\0\1\26\1\27"+
    "\1\30\1\0\1\17\1\31\3\0\3\14\6\0\1\3"+
    "\3\0\1\14\3\0\1\15\1\16\1\17\1\0\1\20"+
    "\1\21\1\22\1\0\2\23\4\0\1\24\4\0\1\25"+
    "\2\0\1\26\1\27\1\30\1\0\1\17\1\31\3\0"+
    "\3\14\65\0\2\32\3\0\1\14\1\32\2\0\1\15"+
    "\1\33\1\17\1\0\1\20\1\21\1\22\1\0\2\23"+
    "\4\0\1\24\4\0\1\25\2\0\1\26\1\27\1\30"+
    "\1\0\1\17\1\31\3\0\3\14\3\0\1\32\2\0"+
    "\1\11\56\0\2\34\4\0\1\34\23\0\1\35\23\0"+
    "\1\34\1\0\2\36\1\0\1\37\2\0\1\36\2\0"+
    "\1\40\1\41\1\42\1\0\1\43\1\44\1\45\1\0"+
    "\2\46\4\0\1\47\2\0\1\50\1\0\1\51\6\0"+
    "\1\42\7\0\1\52\1\53\1\0\1\36\24\0\1\54"+
    "\51\0\1\55\6\0\1\56\61\0\1\57\40\0\2\60"+
    "\3\0\1\61\30\0\1\60\21\0\2\62\34\0\1\62"+
    "\25\0\1\63\27\0\1\63\30\0\1\64\57\0\1\65"+
    "\55\0\1\66\52\0\1\14\32\0\2\14\2\0\1\14"+
    "\3\0\3\14\5\0\2\36\1\0\1\37\1\0\1\14"+
    "\1\36\2\0\1\40\1\41\1\42\1\0\1\43\1\44"+
    "\1\45\1\0\2\46\4\0\1\47\2\0\1\50\1\0"+
    "\1\51\2\0\4\14\1\67\1\14\3\0\3\14\1\52"+
    "\1\53\1\0\1\36\1\0\2\36\1\0\1\37\1\0"+
    "\1\14\1\36\2\0\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\0\2\46\4\0\1\47\2\0\1\50"+
    "\1\0\1\51\2\0\3\14\1\0\1\42\1\14\3\0"+
    "\3\14\1\52\1\53\1\0\1\36\1\0\2\36\1\0"+
    "\1\37\2\0\1\36\2\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\0\2\46\4\0\1\47\2\0"+
    "\1\50\1\0\1\51\2\0\2\14\2\0\1\42\7\0"+
    "\1\52\1\53\1\0\1\36\1\0\2\32\4\0\1\32"+
    "\3\0\1\70\43\0\1\32\1\0\2\71\4\0\1\71"+
    "\6\0\1\55\6\0\1\56\31\0\1\71\13\0\1\72"+
    "\45\0\2\36\1\0\1\37\1\0\1\73\1\36\2\0"+
    "\1\40\1\41\1\42\1\0\1\43\1\44\1\45\1\0"+
    "\2\46\4\0\1\47\2\0\1\50\1\0\1\51\2\0"+
    "\1\74\1\75\1\73\1\0\1\42\1\73\3\0\3\73"+
    "\1\52\1\53\1\0\1\36\1\0\2\37\3\0\1\76"+
    "\1\37\2\0\1\77\1\100\1\101\1\0\1\102\1\103"+
    "\1\104\1\0\2\105\4\0\1\106\4\0\1\107\2\0"+
    "\1\110\1\111\1\112\1\0\1\101\1\113\3\0\3\76"+
    "\3\0\1\37\24\0\1\114\51\0\1\115\6\0\1\116"+
    "\61\0\1\117\40\0\2\120\3\0\1\121\30\0\1\120"+
    "\21\0\2\122\34\0\1\122\25\0\1\123\27\0\1\123"+
    "\30\0\1\124\57\0\1\125\43\0\2\50\3\0\1\126"+
    "\1\50\2\0\1\127\1\130\1\131\1\0\1\132\1\133"+
    "\1\134\1\0\2\135\4\0\1\136\4\0\1\137\2\0"+
    "\1\140\1\141\1\142\1\0\1\131\1\143\3\0\3\126"+
    "\3\0\1\50\13\0\1\144\45\0\2\52\3\0\1\145"+
    "\1\52\2\0\1\146\1\147\1\150\1\0\1\151\1\152"+
    "\1\153\1\0\2\154\4\0\1\155\4\0\1\156\2\0"+
    "\1\157\1\160\1\161\1\0\1\150\1\162\3\0\3\145"+
    "\3\0\1\52\1\0\2\53\3\0\1\163\1\53\2\0"+
    "\1\164\1\165\1\166\1\0\1\167\1\170\1\171\1\0"+
    "\2\172\4\0\1\173\4\0\1\174\2\0\1\175\1\176"+
    "\1\163\1\0\1\166\1\163\3\0\3\163\3\0\1\53"+
    "\16\0\1\177\55\0\1\200\27\0\1\200\41\0\1\201"+
    "\60\0\1\202\54\0\1\203\53\0\1\204\60\0\1\205"+
    "\75\0\1\205\7\0\1\205\37\0\1\206\64\0\1\207"+
    "\41\0\1\210\7\0\1\211\32\0\2\36\1\0\1\37"+
    "\2\0\1\36\2\0\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\0\2\46\3\0\1\117\1\47\2\0"+
    "\1\50\1\0\1\51\6\0\1\42\7\0\1\52\1\53"+
    "\1\0\1\36\1\0\2\71\4\0\1\71\47\0\1\71"+
    "\32\0\1\212\26\0\2\213\4\0\1\213\47\0\1\213"+
    "\6\0\1\73\32\0\2\73\2\0\1\73\3\0\3\73"+
    "\5\0\2\213\4\0\1\213\30\0\3\73\14\0\1\213"+
    "\1\0\2\76\1\0\1\214\2\0\1\76\2\0\1\215"+
    "\1\216\1\217\1\0\1\220\1\221\1\222\1\0\2\223"+
    "\4\0\1\224\2\0\1\225\1\0\1\226\6\0\1\217"+
    "\7\0\1\227\1\230\1\0\1\76\24\0\1\231\51\0"+
    "\1\232\6\0\1\233\61\0\1\234\40\0\2\235\3\0"+
    "\1\236\30\0\1\235\21\0\2\237\34\0\1\237\25\0"+
    "\1\240\27\0\1\240\30\0\1\241\57\0\1\242\55\0"+
    "\1\243\52\0\1\76\32\0\2\76\2\0\1\76\3\0"+
    "\3\76\5\0\2\76\1\0\1\214\1\0\1\244\1\76"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\2\0\1\225\1\0\1\226"+
    "\2\0\3\76\1\244\1\245\1\244\3\0\3\244\1\227"+
    "\1\230\1\0\1\76\1\0\2\76\1\0\1\214\1\0"+
    "\1\244\1\76\2\0\1\215\1\216\1\217\1\0\1\220"+
    "\1\221\1\222\1\0\2\223\4\0\1\224\2\0\1\225"+
    "\1\0\1\226\2\0\3\244\1\0\1\217\1\244\3\0"+
    "\3\244\1\227\1\230\1\0\1\76\1\0\2\76\1\0"+
    "\1\214\2\0\1\76\2\0\1\215\1\216\1\217\1\0"+
    "\1\220\1\221\1\222\1\0\2\223\4\0\1\224\2\0"+
    "\1\225\1\0\1\226\2\0\2\244\2\0\1\217\7\0"+
    "\1\227\1\230\1\0\1\76\16\0\1\246\55\0\1\247"+
    "\27\0\1\247\41\0\1\250\60\0\1\251\54\0\1\252"+
    "\53\0\1\253\60\0\1\254\75\0\1\254\7\0\1\254"+
    "\37\0\1\255\64\0\1\256\24\0\2\126\1\0\1\257"+
    "\2\0\1\126\2\0\1\215\1\216\1\217\1\0\1\220"+
    "\1\221\1\222\1\0\2\223\4\0\1\224\2\0\1\214"+
    "\1\0\1\226\6\0\1\217\12\0\1\126\24\0\1\260"+
    "\51\0\1\261\6\0\1\262\61\0\1\263\40\0\2\264"+
    "\3\0\1\265\30\0\1\264\21\0\2\266\34\0\1\266"+
    "\25\0\1\267\27\0\1\267\30\0\1\270\57\0\1\271"+
    "\55\0\1\272\52\0\1\126\32\0\2\126\2\0\1\126"+
    "\3\0\3\126\5\0\2\126\1\0\1\257\1\0\1\273"+
    "\1\126\2\0\1\215\1\216\1\217\1\0\1\220\1\221"+
    "\1\222\1\0\2\223\4\0\1\224\2\0\1\214\1\0"+
    "\1\226\2\0\3\126\1\273\1\274\1\273\3\0\3\273"+
    "\3\0\1\126\1\0\2\126\1\0\1\257\1\0\1\273"+
    "\1\126\2\0\1\215\1\216\1\217\1\0\1\220\1\221"+
    "\1\222\1\0\2\223\4\0\1\224\2\0\1\214\1\0"+
    "\1\226\2\0\3\273\1\0\1\217\1\273\3\0\3\273"+
    "\3\0\1\126\1\0\2\126\1\0\1\257\2\0\1\126"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\2\0\1\214\1\0\1\226"+
    "\2\0\2\273\2\0\1\217\12\0\1\126\16\0\1\275"+
    "\7\0\1\276\32\0\2\145\1\0\1\277\2\0\1\145"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\4\0\1\226\6\0\1\217"+
    "\7\0\1\214\2\0\1\145\24\0\1\300\51\0\1\301"+
    "\6\0\1\302\61\0\1\303\40\0\2\304\3\0\1\305"+
    "\30\0\1\304\21\0\2\306\34\0\1\306\25\0\1\307"+
    "\27\0\1\307\30\0\1\310\57\0\1\311\55\0\1\312"+
    "\52\0\1\145\32\0\2\145\2\0\1\145\3\0\3\145"+
    "\5\0\2\145\1\0\1\277\1\0\1\273\1\145\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\4\0\1\224\4\0\1\226\2\0\3\145\1\273"+
    "\1\274\1\273\3\0\3\273\1\214\2\0\1\145\1\0"+
    "\2\145\1\0\1\277\1\0\1\273\1\145\2\0\1\215"+
    "\1\216\1\217\1\0\1\220\1\221\1\222\1\0\2\223"+
    "\4\0\1\224\4\0\1\226\2\0\3\273\1\0\1\217"+
    "\1\273\3\0\3\273\1\214\2\0\1\145\1\0\2\145"+
    "\1\0\1\277\2\0\1\145\2\0\1\215\1\216\1\217"+
    "\1\0\1\220\1\221\1\222\1\0\2\223\4\0\1\224"+
    "\4\0\1\226\2\0\2\273\2\0\1\217\7\0\1\214"+
    "\2\0\1\145\1\0\2\163\1\0\1\313\2\0\1\163"+
    "\45\0\1\214\1\0\1\163\24\0\1\314\51\0\1\315"+
    "\6\0\1\316\61\0\1\317\40\0\2\320\3\0\1\321"+
    "\30\0\1\320\21\0\2\322\34\0\1\322\25\0\1\323"+
    "\27\0\1\323\30\0\1\324\57\0\1\325\55\0\1\326"+
    "\52\0\1\163\32\0\2\163\2\0\1\163\3\0\3\163"+
    "\5\0\2\163\1\0\1\313\2\0\1\163\30\0\3\163"+
    "\12\0\1\214\1\0\1\163\12\0\1\327\67\0\2\330"+
    "\44\0\2\331\34\0\1\331\25\0\1\332\27\0\1\332"+
    "\31\0\1\333\61\0\1\334\54\0\1\335\71\0\1\205"+
    "\64\0\1\336\41\0\1\327\77\0\1\337\22\0\2\213"+
    "\4\0\1\213\31\0\1\340\1\341\14\0\1\213\1\0"+
    "\2\214\1\342\2\0\1\343\1\214\30\0\1\343\1\344"+
    "\1\345\2\0\1\343\3\0\3\343\3\0\1\214\24\0"+
    "\1\346\51\0\1\347\6\0\1\350\61\0\1\351\40\0"+
    "\2\352\3\0\1\353\30\0\1\352\21\0\2\354\34\0"+
    "\1\354\25\0\1\355\27\0\1\355\30\0\1\356\57\0"+
    "\1\357\43\0\2\225\3\0\1\360\1\225\30\0\1\361"+
    "\1\362\1\360\2\0\1\360\3\0\3\360\3\0\1\225"+
    "\13\0\1\363\45\0\2\227\3\0\1\364\1\227\30\0"+
    "\1\365\1\366\1\364\2\0\1\364\3\0\3\364\3\0"+
    "\1\227\1\0\2\230\3\0\1\367\1\230\30\0\1\370"+
    "\1\371\1\367\2\0\1\367\3\0\3\367\3\0\1\230"+
    "\16\0\1\372\55\0\1\373\27\0\1\373\41\0\1\374"+
    "\60\0\1\375\54\0\1\376\53\0\1\377\60\0\1\u0100"+
    "\75\0\1\u0100\7\0\1\u0100\37\0\1\u0101\64\0\1\u0102"+
    "\41\0\1\u0103\7\0\1\u0104\32\0\2\244\4\0\1\244"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\2\0\1\225\1\0\1\226"+
    "\6\0\1\217\7\0\1\227\1\230\1\0\1\244\1\0"+
    "\2\244\4\0\1\244\2\0\1\215\1\216\1\217\1\0"+
    "\1\220\1\221\1\222\1\0\2\223\3\0\1\351\1\224"+
    "\2\0\1\225\1\0\1\226\6\0\1\217\7\0\1\227"+
    "\1\230\1\0\1\244\12\0\1\u0105\67\0\2\u0106\44\0"+
    "\2\u0107\34\0\1\u0107\25\0\1\u0108\27\0\1\u0108\31\0"+
    "\1\u0109\61\0\1\u010a\54\0\1\u010b\71\0\1\254\64\0"+
    "\1\u010c\24\0\2\257\3\0\1\u010d\1\257\30\0\1\u010e"+
    "\1\u010f\1\u0110\2\0\1\u0111\3\0\3\u010d\3\0\1\257"+
    "\16\0\1\u0112\55\0\1\u0113\27\0\1\u0113\41\0\1\u0114"+
    "\60\0\1\u0115\54\0\1\u0116\53\0\1\u0117\60\0\1\u0118"+
    "\75\0\1\u0118\7\0\1\u0118\37\0\1\u0119\64\0\1\u011a"+
    "\41\0\1\u011b\7\0\1\u011c\32\0\2\273\4\0\1\273"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\4\0\1\226\6\0\1\217"+
    "\12\0\1\273\1\0\2\273\4\0\1\273\2\0\1\215"+
    "\1\216\1\217\1\0\1\220\1\221\1\222\1\0\2\223"+
    "\3\0\1\351\1\224\4\0\1\226\6\0\1\217\12\0"+
    "\1\273\16\0\1\u0105\77\0\1\u011d\22\0\2\277\3\0"+
    "\1\u011e\1\277\30\0\1\u011f\1\u0120\1\u0121\2\0\1\u0122"+
    "\3\0\3\u011e\3\0\1\277\16\0\1\u0123\55\0\1\u0124"+
    "\27\0\1\u0124\41\0\1\u0125\60\0\1\u0126\54\0\1\u0127"+
    "\53\0\1\u0128\60\0\1\u0129\75\0\1\u0129\7\0\1\u0129"+
    "\37\0\1\u012a\64\0\1\u012b\41\0\1\u012c\7\0\1\u012d"+
    "\32\0\2\313\3\0\1\u012e\1\313\30\0\1\u012f\1\u0130"+
    "\1\u0131\2\0\1\u0132\3\0\3\u012e\3\0\1\313\16\0"+
    "\1\u0133\55\0\1\u0134\27\0\1\u0134\41\0\1\u0135\60\0"+
    "\1\u0136\54\0\1\u0137\53\0\1\u0138\60\0\1\u0139\75\0"+
    "\1\u0139\7\0\1\u0139\37\0\1\u013a\64\0\1\u013b\41\0"+
    "\1\u013c\7\0\1\u013d\41\0\2\337\34\0\1\337\40\0"+
    "\1\337\42\0\1\u013e\101\0\1\u013f\43\0\1\337\52\0"+
    "\1\327\101\0\1\332\50\0\1\334\45\0\1\u0140\27\0"+
    "\1\u0140\64\0\1\u0141\1\0\1\u0142\44\0\1\u0143\25\0"+
    "\1\343\31\0\3\343\2\0\1\343\3\0\3\343\12\0"+
    "\1\u0144\31\0\3\u0144\2\0\1\u0144\3\0\3\u0144\12\0"+
    "\1\u0144\31\0\3\u0144\2\0\1\u0144\3\0\1\u0145\1\u0144"+
    "\1\u0146\12\0\1\u0144\31\0\1\u0147\2\u0144\2\0\1\u0144"+
    "\3\0\3\u0144\22\0\1\u0148\55\0\1\u0149\27\0\1\u0149"+
    "\41\0\1\u014a\60\0\1\u014b\54\0\1\u014c\53\0\1\u014d"+
    "\60\0\1\u014e\75\0\1\u014e\7\0\1\u014e\37\0\1\u014f"+
    "\64\0\1\u0150\24\0\2\360\4\0\1\360\23\0\1\u0151"+
    "\23\0\1\360\6\0\1\360\32\0\2\360\2\0\1\360"+
    "\3\0\3\360\5\0\2\360\4\0\1\360\23\0\1\u0151"+
    "\4\0\3\360\14\0\1\360\16\0\1\u0152\7\0\1\u0153"+
    "\32\0\2\364\4\0\1\364\44\0\1\u0151\2\0\1\364"+
    "\6\0\1\364\32\0\2\364\2\0\1\364\3\0\3\364"+
    "\5\0\2\364\4\0\1\364\30\0\3\364\11\0\1\u0151"+
    "\2\0\1\364\1\0\2\367\4\0\1\367\45\0\1\u0151"+
    "\1\0\1\367\6\0\1\367\32\0\2\367\2\0\1\367"+
    "\3\0\3\367\5\0\2\367\4\0\1\367\30\0\3\367"+
    "\12\0\1\u0151\1\0\1\367\12\0\1\u0154\67\0\2\u0155"+
    "\44\0\2\u0156\34\0\1\u0156\25\0\1\u0157\27\0\1\u0157"+
    "\31\0\1\u0158\61\0\1\u0159\54\0\1\u015a\71\0\1\u0100"+
    "\64\0\1\u015b\41\0\1\u0154\77\0\1\u015c\31\0\2\u011d"+
    "\34\0\1\u011d\40\0\1\u011d\42\0\1\u015d\101\0\1\u015e"+
    "\43\0\1\u011d\52\0\1\u0105\101\0\1\u0108\50\0\1\u010a"+
    "\32\0\2\u010d\4\0\1\u010d\23\0\1\u015f\23\0\1\u010d"+
    "\6\0\1\u010d\32\0\2\u010d\2\0\1\u010d\3\0\3\u010d"+
    "\5\0\2\u010d\3\0\2\u010d\23\0\1\u015f\4\0\6\u010d"+
    "\3\0\3\u010d\3\0\1\u010d\1\0\2\u010d\3\0\2\u010d"+
    "\23\0\1\u015f\4\0\3\u010d\2\0\1\u010d\3\0\3\u010d"+
    "\3\0\1\u010d\1\0\2\u010d\4\0\1\u010d\23\0\1\u015f"+
    "\4\0\2\u010d\15\0\1\u010d\12\0\1\u0160\67\0\2\u0161"+
    "\44\0\2\u0162\34\0\1\u0162\25\0\1\u0163\27\0\1\u0163"+
    "\31\0\1\u0164\61\0\1\u0165\54\0\1\u0166\71\0\1\u0118"+
    "\64\0\1\u0167\41\0\1\u0160\77\0\1\u0168\35\0\1\u0169"+
    "\27\0\1\u0169\14\0\2\u011e\4\0\1\u011e\44\0\1\u016a"+
    "\2\0\1\u011e\6\0\1\u011e\32\0\2\u011e\2\0\1\u011e"+
    "\3\0\3\u011e\5\0\2\u011e\3\0\2\u011e\30\0\6\u011e"+
    "\3\0\3\u011e\1\u016a\2\0\1\u011e\1\0\2\u011e\3\0"+
    "\2\u011e\30\0\3\u011e\2\0\1\u011e\3\0\3\u011e\1\u016a"+
    "\2\0\1\u011e\1\0\2\u011e\4\0\1\u011e\30\0\2\u011e"+
    "\12\0\1\u016a\2\0\1\u011e\12\0\1\u016b\67\0\2\u016c"+
    "\44\0\2\u016d\34\0\1\u016d\25\0\1\u016e\27\0\1\u016e"+
    "\31\0\1\u016f\61\0\1\u0170\54\0\1\u0171\71\0\1\u0129"+
    "\64\0\1\u0172\41\0\1\u016b\77\0\1\u0173\22\0\2\u012e"+
    "\4\0\1\u012e\45\0\1\u0174\1\0\1\u012e\6\0\1\u012e"+
    "\32\0\2\u012e\2\0\1\u012e\3\0\3\u012e\5\0\2\u012e"+
    "\3\0\2\u012e\30\0\6\u012e\3\0\3\u012e\1\0\1\u0174"+
    "\1\0\1\u012e\1\0\2\u012e\3\0\2\u012e\30\0\3\u012e"+
    "\2\0\1\u012e\3\0\3\u012e\1\0\1\u0174\1\0\1\u012e"+
    "\1\0\2\u012e\4\0\1\u012e\30\0\2\u012e\13\0\1\u0174"+
    "\1\0\1\u012e\12\0\1\u0175\67\0\2\u0176\44\0\2\u0177"+
    "\34\0\1\u0177\25\0\1\u0178\27\0\1\u0178\31\0\1\u0179"+
    "\61\0\1\u017a\54\0\1\u017b\71\0\1\u0139\64\0\1\u017c"+
    "\41\0\1\u0175\77\0\1\u017d\36\0\1\u0140\70\0\1\u013e"+
    "\32\0\2\u0140\4\0\1\u0140\31\0\1\u017e\1\u017f\14\0"+
    "\1\u0140\51\0\3\u0180\12\0\1\u0180\31\0\3\u0180\2\0"+
    "\1\u0180\3\0\3\u0180\44\0\3\u0180\15\0\1\u0181\1\u0182"+
    "\4\u0181\1\0\31\u0181\3\0\2\u0181\1\0\3\u0181\3\0"+
    "\5\u0181\1\u0182\4\u0181\1\0\31\u0181\3\0\2\u0181\1\0"+
    "\3\u0181\3\u0180\5\u0181\1\u0182\4\u0181\1\u0180\31\u0181\3\u0180"+
    "\2\u0181\1\u0180\3\u0181\3\u0180\5\u0181\1\u0182\4\u0181\1\0"+
    "\31\u0181\3\u0180\2\u0181\1\0\3\u0181\3\0\4\u0181\12\0"+
    "\1\u0183\67\0\2\u0184\44\0\2\u0185\34\0\1\u0185\25\0"+
    "\1\u0186\27\0\1\u0186\31\0\1\u0187\61\0\1\u0188\54\0"+
    "\1\u0189\71\0\1\u014e\64\0\1\u018a\24\0\2\u0151\1\u018b"+
    "\2\0\1\u018c\1\u0151\30\0\1\u018c\1\u018d\1\u018e\2\0"+
    "\1\u018c\3\0\3\u018c\3\0\1\u0151\16\0\1\u0183\77\0"+
    "\1\u018f\31\0\2\u015c\34\0\1\u015c\40\0\1\u015c\42\0"+
    "\1\u0190\101\0\1\u0191\43\0\1\u015c\52\0\1\u0154\101\0"+
    "\1\u0157\50\0\1\u0159\45\0\1\u0192\27\0\1\u0192\30\0"+
    "\1\u0169\70\0\1\u015d\32\0\2\u015f\3\0\1\u0193\1\u015f"+
    "\30\0\1\u0194\1\u0195\1\u0193\2\0\1\u0193\3\0\3\u0193"+
    "\3\0\1\u015f\10\0\2\u0168\34\0\1\u0168\40\0\1\u0168"+
    "\42\0\1\u0196\101\0\1\u0197\43\0\1\u0168\52\0\1\u0160"+
    "\101\0\1\u0163\50\0\1\u0165\45\0\1\u0193\27\0\1\u0193"+
    "\13\0\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\0\1\343"+
    "\1\u019a\1\u0198\11\0\1\u0198\6\0\2\u0198\1\u019c\4\0"+
    "\1\343\1\344\1\345\1\u0198\1\0\1\343\3\0\3\343"+
    "\1\u019c\2\u0198\1\u019a\1\0\2\u016a\3\0\1\u019d\1\u016a"+
    "\30\0\1\u019e\1\u019f\1\u019d\2\0\1\u019d\3\0\3\u019d"+
    "\3\0\1\u016a\10\0\2\u0173\34\0\1\u0173\40\0\1\u0173"+
    "\42\0\1\u01a0\101\0\1\u01a1\43\0\1\u0173\52\0\1\u016b"+
    "\101\0\1\u016e\50\0\1\u0170\45\0\1\u019d\27\0\1\u019d"+
    "\14\0\2\u0174\3\0\1\u01a2\1\u0174\30\0\1\u01a3\1\u01a4"+
    "\1\u01a2\2\0\1\u01a2\3\0\3\u01a2\3\0\1\u0174\10\0"+
    "\2\u017d\34\0\1\u017d\40\0\1\u017d\42\0\1\u01a5\101\0"+
    "\1\u01a6\43\0\1\u017d\52\0\1\u0175\101\0\1\u0178\50\0"+
    "\1\u017a\45\0\1\u01a2\27\0\1\u01a2\64\0\1\u01a7\1\0"+
    "\1\u01a8\44\0\1\u01a9\25\0\1\u01aa\31\0\3\u01aa\2\0"+
    "\1\u01aa\3\0\3\u01aa\6\0\1\u0181\65\0\2\u018f\34\0"+
    "\1\u018f\40\0\1\u018f\42\0\1\u01ab\101\0\1\u01ac\43\0"+
    "\1\u018f\52\0\1\u0183\101\0\1\u0186\50\0\1\u0188\37\0"+
    "\1\u018c\31\0\3\u018c\2\0\1\u018c\3\0\3\u018c\12\0"+
    "\1\u01ad\31\0\3\u01ad\2\0\1\u01ad\3\0\3\u01ad\12\0"+
    "\1\u01ad\31\0\3\u01ad\2\0\1\u01ad\3\0\1\u01ae\1\u01ad"+
    "\1\u01af\12\0\1\u01ad\31\0\1\u01b0\2\u01ad\2\0\1\u01ad"+
    "\3\0\3\u01ad\20\0\1\214\27\0\1\214\30\0\1\u0192"+
    "\70\0\1\u0190\32\0\2\u0192\1\0\1\214\2\0\1\u0192"+
    "\47\0\1\u0192\1\0\2\u0193\4\0\1\u0193\23\0\1\214"+
    "\23\0\1\u0193\6\0\1\u0193\32\0\2\u0193\2\0\1\u0193"+
    "\3\0\3\u0193\5\0\2\u0193\4\0\1\u0193\23\0\1\214"+
    "\4\0\3\u0193\14\0\1\u0193\15\0\1\u0193\70\0\1\u0196"+
    "\32\0\1\u01b1\1\u019a\1\342\1\u01b2\1\0\1\343\1\u01b1"+
    "\23\0\1\u01b2\4\0\1\343\1\344\1\345\2\0\1\343"+
    "\3\0\3\343\1\u01b2\2\0\1\u01b1\1\0\2\u01b1\1\342"+
    "\1\u01b2\1\0\1\343\1\u01b1\23\0\1\u01b2\4\0\1\343"+
    "\1\344\1\345\2\0\1\343\3\0\3\343\1\u01b2\2\0"+
    "\1\u01b1\1\0\2\u01b2\3\0\1\273\1\u01b2\30\0\1\u01b3"+
    "\1\u01b4\1\u01b5\2\0\1\u01b6\3\0\3\273\3\0\1\u01b2"+
    "\1\0\2\u019d\4\0\1\u019d\44\0\1\214\2\0\1\u019d"+
    "\6\0\1\u019d\32\0\2\u019d\2\0\1\u019d\3\0\3\u019d"+
    "\5\0\2\u019d\4\0\1\u019d\30\0\3\u019d\11\0\1\214"+
    "\2\0\1\u019d\15\0\1\u019d\70\0\1\u01a0\32\0\2\u01a2"+
    "\4\0\1\u01a2\45\0\1\214\1\0\1\u01a2\6\0\1\u01a2"+
    "\32\0\2\u01a2\2\0\1\u01a2\3\0\3\u01a2\5\0\2\u01a2"+
    "\4\0\1\u01a2\30\0\3\u01a2\12\0\1\214\1\0\1\u01a2"+
    "\15\0\1\u01a2\70\0\1\u01a5\102\0\3\u01b7\12\0\1\u01b7"+
    "\31\0\3\u01b7\2\0\1\u01b7\3\0\3\u01b7\44\0\3\u01b7"+
    "\15\0\1\u0181\1\u0182\2\u0181\1\u01b8\1\u0181\1\0\31\u0181"+
    "\3\0\2\u0181\1\0\3\u0181\3\0\4\u0181\15\0\1\214"+
    "\70\0\1\u01ab\31\0\1\u01b9\1\u01ba\4\u01b9\1\0\31\u01b9"+
    "\3\0\2\u01b9\1\0\3\u01b9\3\0\5\u01b9\1\u01ba\4\u01b9"+
    "\1\0\31\u01b9\3\0\2\u01b9\1\0\3\u01b9\3\u01bb\5\u01b9"+
    "\1\u01ba\4\u01b9\1\u01bb\31\u01b9\3\u01bb\2\u01b9\1\u01bb\3\u01b9"+
    "\3\u01bb\5\u01b9\1\u01ba\4\u01b9\1\0\31\u01b9\3\u01bb\2\u01b9"+
    "\1\0\3\u01b9\3\0\4\u01b9\6\0\1\273\32\0\2\273"+
    "\2\0\1\273\3\0\3\273\5\0\2\273\3\0\2\273"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\4\0\1\226\2\0\4\273"+
    "\1\274\1\273\3\0\3\273\3\0\1\273\1\0\2\273"+
    "\3\0\2\273\2\0\1\215\1\216\1\217\1\0\1\220"+
    "\1\221\1\222\1\0\2\223\4\0\1\224\4\0\1\226"+
    "\2\0\3\273\1\0\1\217\1\273\3\0\3\273\3\0"+
    "\1\273\1\0\2\273\4\0\1\273\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\4\0\1\226\2\0\2\273\2\0\1\217\12\0"+
    "\1\273\6\0\1\u01bc\31\0\3\u01bc\2\0\1\u01bc\3\0"+
    "\3\u01bc\52\0\3\u01bd\11\0\1\u01b9\63\0\1\u01be\31\0"+
    "\3\u01be\2\0\1\u01be\3\0\3\u01be\4\0\1\u01bf\1\u01c0"+
    "\2\u01bf\1\u01c1\1\u01bf\1\0\31\u01bf\3\0\2\u01bf\1\0"+
    "\3\u01bf\3\0\4\u01bf\1\u0181\1\u0182\4\u0181\1\0\31\u0181"+
    "\3\0\2\u0181\1\0\3\u01c2\3\0\4\u0181\1\u01b9\1\u01ba"+
    "\2\u01b9\1\u01c3\1\u01b9\1\0\31\u01b9\3\0\2\u01b9\1\0"+
    "\3\u01b9\3\0\4\u01b9\2\0\1\u01bf\123\0\3\u01c4\55\0"+
    "\3\u01c5\7\0\1\u01bf\1\u01c0\4\u01bf\1\0\31\u01bf\3\0"+
    "\2\u01bf\1\0\3\u01c6\3\0\4\u01bf\1\u01b9\1\u01ba\4\u01b9"+
    "\1\0\31\u01b9\3\0\2\u01b9\1\0\3\u01c7\3\0\4\u01b9";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\3\1\1\11\1\1\1\11\55\0"+
    "\1\1\120\0\1\11\366\0\1\11\1\1\25\0\1\11"+
    "\4\1\33\0\1\1\1\11\1\1\4\0\1\11\4\1"+
    "\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	static final private Pattern ints = Pattern.compile("\\d+");

	private String openTag = "<font color=\"brown\"><LK:DATA"; 
	private String closeTag = "</LK:DATA></font>"; 
		
	private StringBuilder output = new StringBuilder();

	public String getOutput() {
		return output.toString();
	}
	
		
	private String getGiorno(String text) {
		/*
		 * Il giorno è il primo numero.
		 */
	
		Matcher matcher = ints.matcher(text);
		
		if( !matcher.find()) {
			System.err.println("DateMarker - getGiorno() - match failed - " + text);
			return "";
		}

		int start = matcher.start();
		int end = matcher.end();
	
		String giorno = text.substring(start, end);
		
		if(giorno.length() != 1 && giorno.length() != 2) {
			System.err.println("DateMarker - getGiorno() - length check failed - " + text);
		}

		if(giorno.length() == 1) {
			giorno = "0" + giorno;
		}
		
		return giorno;
	}

	private String getMese(String text) {

		return getMese(text, false);
	}
	
	private String getMese(String text, boolean giornoDoppio) {
		/*
		 * Cerca la forma estesa, altrimenti il secondo numero.
		 * Nel caso di data con giorno doppio il mese è il terzo numero. 
		 */
		
		/*
		 * TODO
		 * Non funziona nel seguente (raro) caso (omissione del primo anno):
		 * 24 dicembre - 22 gennaio 2012
		 */
		
		text = text.toLowerCase().trim();
		
		if(text.indexOf("gen") > -1) return "01";
		if(text.indexOf("feb") > -1) return "02";
		if(text.indexOf("mar") > -1) return "03";
		if(text.indexOf("apr") > -1) return "04";
		if(text.indexOf("mag") > -1) return "05";
		if(text.indexOf("giu") > -1) return "06";
		if(text.indexOf("lug") > -1) return "07";
		if(text.indexOf("ago") > -1) return "08";
		if(text.indexOf("set") > -1) return "09";
		if(text.indexOf("ott") > -1) return "10";
		if(text.indexOf("nov") > -1) return "11";
		if(text.indexOf("dic") > -1) return "12";
			
		Matcher matcher = ints.matcher(text);
		
		if( !matcher.find()) {
			System.err.println("DateMarker - getMese() - first match failed - " + text);
			return "";
		}

		if( !matcher.find()) {
			System.err.println("DateMarker - getMese() - second match failed - " + text);
			return "";
		}

		if(giornoDoppio) {
			if( !matcher.find()) {
				System.err.println("DateMarker - getMese() - third match failed - " + text);
				return "";
			}
		}

		int start = matcher.start();
		int end = matcher.end();
	
		String mese = text.substring(start, end);
		
		if(mese.length() != 1 && mese.length() != 2) {
			System.err.println("DateMarker - getMese() - length check failed - " + text);
		}

		if(mese.length() == 1) {
			mese = "0" + mese;
		}

		return mese;
	}
	
	private String getAnno(String text) {
		/*
		 * L'anno è l'ultimo numero.
		 */
		
		Matcher matcher = ints.matcher(text);
		
		//Trova l'ultima cifra
		String anno = "";
		while(matcher.find()) {
			
			int start = matcher.start();
			int end = matcher.end();
			
			anno = text.substring(start, end);
		}

		if(anno.length() != 2 && anno.length() != 4) {
			System.err.println("DateMarker - getAnno() - length check failed - " + text);
		}
		
		if(anno.length() == 2) {
			
			int num = -1;
			try {
				num = Integer.valueOf(anno);
			} catch (NumberFormatException e) {
				System.err.println("DateMarker - getAnno() - num conv failed - " + text);
				return "";
			}
			
			if(num > 20) {
				anno = "19" + anno;
			} else {
				anno = "20" + anno;
			}		
		}
		
		return anno;
	}
	
	private String setData(String text) {
		
		return setData(text, false, false);
	}
	
	private String setData(String text, boolean giornoDoppio) {
		
		return setData(text, giornoDoppio, false);
	}
	
	private String setData(String text, boolean giornoDoppio, boolean senzaAnno) {
		/*
		 * Comprende anche il caso "Date doppie con cambio mese": 
		 * 12/6-28/8/2012
		 * 24 settembre - 22 dicembre 2012
		 */
		
		String giorno = getGiorno(text);
		String mese = (giornoDoppio) ? getMese(text, true) : getMese(text);
		
		if(senzaAnno) {
			/*
			 * TODO
			 * Che valore impostare in questi casi?
			 */
			return " value=\"\">" + text;
		}
		
		String anno = getAnno(text);

		String value = giorno + mese + anno;
		String output = " value=\"" + value + "\">" + text;
		
		return output;
	}
	
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Date(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 10: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 11: break;
        case 3: 
          { 
          }
        case 12: break;
        case 4: 
          { output.append(yytext()); yybegin(AH);
          }
        case 13: break;
        case 5: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 14: break;
        case 6: 
          { output.append(yytext().substring(0,1) + 
					openTag + setData(yytext().substring(1, yytext().length()-1)) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 15: break;
        case 7: 
          { output.append(yytext().substring(0,1) + 
					openTag + setData(yytext().substring(1, yytext().length()-1), false, true) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 16: break;
        case 8: 
          { output.append(yytext().substring(0,1) + 
						openTag + setData(yytext().substring(1, yytext().length()-1), true) + 
						closeTag + yytext().substring(yytext().length()-1));
          }
        case 17: break;
        case 9: 
          { output.append(yytext().substring(0,1) + 
					openTag + " value=\"\">" + yytext().substring(1, yytext().length()-1) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Date [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Date scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Date(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
