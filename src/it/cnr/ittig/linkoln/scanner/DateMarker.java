/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>DateMarker.jflex</tt>
 */
public class DateMarker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AH = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\2\1\53\1\54\1\1\22\0\1\7\6\0\1\4"+
    "\4\0\1\0\1\5\1\52\1\33\1\40\1\41\1\42\1\45\2\6"+
    "\2\47\1\46\1\50\2\0\1\31\1\0\1\32\2\0\1\13\1\34"+
    "\1\21\1\17\1\15\1\30\1\16\1\3\1\11\1\3\1\3\1\12"+
    "\1\35\1\20\1\14\1\25\1\3\1\26\1\23\1\27\1\24\1\37"+
    "\1\3\1\3\1\3\1\36\1\0\1\51\1\0\1\43\1\5\1\4"+
    "\1\13\1\34\1\21\1\17\1\15\1\30\1\16\1\3\1\11\2\3"+
    "\1\12\1\35\1\20\1\44\1\25\1\3\1\26\1\23\1\27\1\24"+
    "\1\37\1\3\1\3\1\3\1\36\12\0\1\53\52\0\1\43\3\0"+
    "\1\4\13\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\5\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\65\0\2\10\115\0\1\22\u1e93\0\1\5\1\5\4\0\1\4"+
    "\16\0\1\53\1\53\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\1\2\2\3\1\1\1\2\55\0\1\4"+
    "\120\0\1\5\364\0\1\6\25\0\4\7\32\0\1\10"+
    "\1\0\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\132\0\u010e"+
    "\0\264\0\u013b\0\264\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u03b1\0\u03de\0\u040b\0\u013b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a"+
    "\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\264\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815"+
    "\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d"+
    "\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5"+
    "\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d"+
    "\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085"+
    "\0\u20b2\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed"+
    "\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd"+
    "\0\u24ea\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625"+
    "\0\u2652\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d"+
    "\0\u27ba\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5"+
    "\0\u2922\0\u294f\0\u297c\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d"+
    "\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5"+
    "\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d"+
    "\0\u2d5a\0\u2d87\0\u2db4\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95"+
    "\0\u2ec2\0\u2eef\0\u2f1c\0\u2f49\0\u2f76\0\u2fa3\0\u2fd0\0\u2ffd"+
    "\0\u302a\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138\0\u3165"+
    "\0\u3192\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd"+
    "\0\u32fa\0\u3327\0\u3354\0\u3381\0\u33ae\0\u33db\0\u3408\0\u3435"+
    "\0\u3462\0\u348f\0\u34bc\0\u34e9\0\u3516\0\u3543\0\u3570\0\u359d"+
    "\0\u35ca\0\u35f7\0\u3624\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705"+
    "\0\u3732\0\u375f\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d"+
    "\0\u389a\0\u38c7\0\u38f4\0\u3921\0\u394e\0\u397b\0\u39a8\0\u39d5"+
    "\0\u3a02\0\u3a2f\0\u3a5c\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d"+
    "\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\u3c78\0\u3ca5"+
    "\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59\0\u3d86\0\u3db3\0\u3de0\0\u3e0d"+
    "\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b\0\u3f48\0\u3f75"+
    "\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u4083\0\u40b0\0\u40dd"+
    "\0\u410a\0\u4137\0\u4164\0\u4191\0\u41be\0\u41eb\0\264\0\u4218"+
    "\0\u4245\0\u4272\0\u429f\0\u42cc\0\u42f9\0\u4326\0\u4353\0\u4380"+
    "\0\u43ad\0\u43da\0\u4407\0\u4434\0\u4461\0\u448e\0\u44bb\0\u44e8"+
    "\0\u4515\0\u4542\0\u456f\0\u459c\0\264\0\u45c9\0\u267f\0\u45f6"+
    "\0\u4623\0\u4650\0\u467d\0\u46aa\0\u46d7\0\u4704\0\u4731\0\u475e"+
    "\0\u478b\0\u47b8\0\u47e5\0\u4812\0\u483f\0\u486c\0\u4899\0\u48c6"+
    "\0\u48f3\0\u4920\0\u494d\0\u45c9\0\u45f6\0\u497a\0\u49a7\0\u49d4"+
    "\0\u4a01\0\u4a2e\0\264\0\u4a5b\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\4\3\1\5\22\3\1\6\6\3\3\5"+
    "\2\3\4\5\2\3\2\7\1\5\1\10\1\11\26\5"+
    "\1\12\21\5\2\13\6\0\1\14\3\0\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\0\2\23\4\0"+
    "\1\24\4\0\1\25\2\0\1\26\1\27\1\30\1\0"+
    "\1\17\1\31\3\14\6\0\1\5\3\0\1\14\3\0"+
    "\1\15\1\16\1\17\1\0\1\20\1\21\1\22\1\0"+
    "\2\23\4\0\1\24\4\0\1\25\2\0\1\26\1\27"+
    "\1\30\1\0\1\17\1\31\3\14\62\0\2\32\3\0"+
    "\1\14\1\32\2\0\1\15\1\33\1\17\1\0\1\20"+
    "\1\21\1\22\1\0\2\23\4\0\1\24\4\0\1\25"+
    "\2\0\1\26\1\27\1\30\1\0\1\17\1\31\3\14"+
    "\3\0\1\32\2\0\1\11\53\0\2\34\4\0\1\34"+
    "\23\0\1\35\20\0\1\34\1\0\2\36\2\0\1\37"+
    "\1\0\1\36\2\0\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\0\2\46\4\0\1\47\2\0\1\50"+
    "\1\0\1\51\6\0\1\42\4\0\1\52\1\53\1\0"+
    "\1\36\24\0\1\54\46\0\1\55\6\0\1\56\56\0"+
    "\1\57\35\0\2\60\3\0\1\61\47\0\2\62\57\0"+
    "\1\63\27\0\1\63\25\0\1\64\54\0\1\65\52\0"+
    "\1\66\47\0\1\14\32\0\2\14\2\0\4\14\5\0"+
    "\2\36\2\0\1\37\1\14\1\36\2\0\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\0\2\46\4\0"+
    "\1\47\2\0\1\50\1\0\1\51\2\0\4\14\1\67"+
    "\4\14\1\52\1\53\1\0\1\36\1\0\2\36\2\0"+
    "\1\37\1\14\1\36\2\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\0\2\46\4\0\1\47\2\0"+
    "\1\50\1\0\1\51\2\0\3\14\1\0\1\42\4\14"+
    "\1\52\1\53\1\0\1\36\1\0\2\36\2\0\1\37"+
    "\1\0\1\36\2\0\1\40\1\41\1\42\1\0\1\43"+
    "\1\44\1\45\1\0\2\46\4\0\1\47\2\0\1\50"+
    "\1\0\1\51\2\0\2\14\2\0\1\42\4\0\1\52"+
    "\1\53\1\0\1\36\1\0\2\32\4\0\1\32\3\0"+
    "\1\70\40\0\1\32\1\0\2\71\4\0\1\71\6\0"+
    "\1\55\6\0\1\56\26\0\1\71\13\0\1\72\42\0"+
    "\2\36\2\0\1\37\1\73\1\36\2\0\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\0\2\46\4\0"+
    "\1\47\2\0\1\50\1\0\1\51\2\0\1\74\1\75"+
    "\1\73\1\0\1\42\4\73\1\52\1\53\1\0\1\36"+
    "\1\0\2\37\3\0\1\76\1\37\2\0\1\77\1\100"+
    "\1\101\1\0\1\102\1\103\1\104\1\0\2\105\4\0"+
    "\1\106\4\0\1\107\2\0\1\110\1\111\1\112\1\0"+
    "\1\101\1\113\3\76\3\0\1\37\24\0\1\114\46\0"+
    "\1\115\6\0\1\116\56\0\1\117\35\0\2\120\3\0"+
    "\1\121\47\0\2\122\57\0\1\123\27\0\1\123\25\0"+
    "\1\124\54\0\1\125\40\0\2\50\3\0\1\126\1\50"+
    "\2\0\1\127\1\130\1\131\1\0\1\132\1\133\1\134"+
    "\1\0\2\135\4\0\1\136\4\0\1\137\2\0\1\140"+
    "\1\141\1\142\1\0\1\131\1\143\3\126\3\0\1\50"+
    "\13\0\1\144\42\0\2\52\3\0\1\145\1\52\2\0"+
    "\1\146\1\147\1\150\1\0\1\151\1\152\1\153\1\0"+
    "\2\154\4\0\1\155\4\0\1\156\2\0\1\157\1\160"+
    "\1\161\1\0\1\150\1\162\3\145\3\0\1\52\1\0"+
    "\2\53\3\0\1\163\1\53\2\0\1\164\1\165\1\166"+
    "\1\0\1\167\1\170\1\171\1\0\2\172\4\0\1\173"+
    "\4\0\1\174\2\0\1\175\1\176\1\163\1\0\1\166"+
    "\4\163\3\0\1\53\16\0\1\177\52\0\1\200\27\0"+
    "\1\200\36\0\1\201\55\0\1\202\51\0\1\203\50\0"+
    "\1\204\55\0\1\205\72\0\1\205\44\0\1\206\61\0"+
    "\1\207\36\0\1\210\7\0\1\211\27\0\2\36\2\0"+
    "\1\37\1\0\1\36\2\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\0\2\46\3\0\1\117\1\47"+
    "\2\0\1\50\1\0\1\51\6\0\1\42\4\0\1\52"+
    "\1\53\1\0\1\36\1\0\2\71\4\0\1\71\44\0"+
    "\1\71\32\0\1\212\23\0\2\213\4\0\1\213\44\0"+
    "\1\213\6\0\1\73\32\0\2\73\2\0\4\73\5\0"+
    "\2\213\4\0\1\213\30\0\3\73\11\0\1\213\1\0"+
    "\2\76\2\0\1\214\1\0\1\76\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\2\0\1\225\1\0\1\226\6\0\1\217\4\0"+
    "\1\227\1\230\1\0\1\76\24\0\1\231\46\0\1\232"+
    "\6\0\1\233\56\0\1\234\35\0\2\235\3\0\1\236"+
    "\47\0\2\237\57\0\1\240\27\0\1\240\25\0\1\241"+
    "\54\0\1\242\52\0\1\243\47\0\1\76\32\0\2\76"+
    "\2\0\4\76\5\0\2\76\2\0\1\214\1\244\1\76"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\2\0\1\225\1\0\1\226"+
    "\2\0\3\76\1\244\1\245\4\244\1\227\1\230\1\0"+
    "\1\76\1\0\2\76\2\0\1\214\1\244\1\76\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\4\0\1\224\2\0\1\225\1\0\1\226\2\0"+
    "\3\244\1\0\1\217\4\244\1\227\1\230\1\0\1\76"+
    "\1\0\2\76\2\0\1\214\1\0\1\76\2\0\1\215"+
    "\1\216\1\217\1\0\1\220\1\221\1\222\1\0\2\223"+
    "\4\0\1\224\2\0\1\225\1\0\1\226\2\0\2\244"+
    "\2\0\1\217\4\0\1\227\1\230\1\0\1\76\16\0"+
    "\1\246\52\0\1\247\27\0\1\247\36\0\1\250\55\0"+
    "\1\251\51\0\1\252\50\0\1\253\55\0\1\254\72\0"+
    "\1\254\44\0\1\255\61\0\1\256\21\0\2\126\2\0"+
    "\1\257\1\0\1\126\2\0\1\215\1\216\1\217\1\0"+
    "\1\220\1\221\1\222\1\0\2\223\4\0\1\224\2\0"+
    "\1\214\1\0\1\226\6\0\1\217\7\0\1\126\24\0"+
    "\1\260\46\0\1\261\6\0\1\262\56\0\1\263\35\0"+
    "\2\264\3\0\1\265\47\0\2\266\57\0\1\267\27\0"+
    "\1\267\25\0\1\270\54\0\1\271\52\0\1\272\47\0"+
    "\1\126\32\0\2\126\2\0\4\126\5\0\2\126\2\0"+
    "\1\257\1\273\1\126\2\0\1\215\1\216\1\217\1\0"+
    "\1\220\1\221\1\222\1\0\2\223\4\0\1\224\2\0"+
    "\1\214\1\0\1\226\2\0\3\126\1\273\1\274\4\273"+
    "\3\0\1\126\1\0\2\126\2\0\1\257\1\273\1\126"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\2\0\1\214\1\0\1\226"+
    "\2\0\3\273\1\0\1\217\4\273\3\0\1\126\1\0"+
    "\2\126\2\0\1\257\1\0\1\126\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\2\0\1\214\1\0\1\226\2\0\2\273\2\0"+
    "\1\217\7\0\1\126\16\0\1\275\7\0\1\276\27\0"+
    "\2\145\2\0\1\277\1\0\1\145\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\4\0\1\226\6\0\1\217\4\0\1\214\2\0"+
    "\1\145\24\0\1\300\46\0\1\301\6\0\1\302\56\0"+
    "\1\303\35\0\2\304\3\0\1\305\47\0\2\306\57\0"+
    "\1\307\27\0\1\307\25\0\1\310\54\0\1\311\52\0"+
    "\1\312\47\0\1\145\32\0\2\145\2\0\4\145\5\0"+
    "\2\145\2\0\1\277\1\273\1\145\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\4\0\1\226\2\0\3\145\1\273\1\274\4\273"+
    "\1\214\2\0\1\145\1\0\2\145\2\0\1\277\1\273"+
    "\1\145\2\0\1\215\1\216\1\217\1\0\1\220\1\221"+
    "\1\222\1\0\2\223\4\0\1\224\4\0\1\226\2\0"+
    "\3\273\1\0\1\217\4\273\1\214\2\0\1\145\1\0"+
    "\2\145\2\0\1\277\1\0\1\145\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\4\0"+
    "\1\224\4\0\1\226\2\0\2\273\2\0\1\217\4\0"+
    "\1\214\2\0\1\145\1\0\2\163\2\0\1\313\1\0"+
    "\1\163\42\0\1\214\1\0\1\163\24\0\1\314\46\0"+
    "\1\315\6\0\1\316\56\0\1\317\35\0\2\320\3\0"+
    "\1\321\47\0\2\322\57\0\1\323\27\0\1\323\25\0"+
    "\1\324\54\0\1\325\52\0\1\326\47\0\1\163\32\0"+
    "\2\163\2\0\4\163\5\0\2\163\2\0\1\313\1\0"+
    "\1\163\30\0\3\163\7\0\1\214\1\0\1\163\12\0"+
    "\1\327\64\0\2\330\41\0\2\331\57\0\1\332\27\0"+
    "\1\332\26\0\1\333\56\0\1\334\51\0\1\335\66\0"+
    "\1\205\61\0\1\336\36\0\1\327\74\0\1\337\17\0"+
    "\2\213\4\0\1\213\31\0\1\340\1\341\11\0\1\213"+
    "\1\0\2\214\1\0\1\342\1\0\1\343\1\214\30\0"+
    "\1\343\1\344\1\345\2\0\4\343\3\0\1\214\24\0"+
    "\1\346\46\0\1\347\6\0\1\350\56\0\1\351\35\0"+
    "\2\352\3\0\1\353\47\0\2\354\57\0\1\355\27\0"+
    "\1\355\25\0\1\356\54\0\1\357\40\0\2\225\3\0"+
    "\1\360\1\225\30\0\1\361\1\362\1\360\2\0\4\360"+
    "\3\0\1\225\13\0\1\363\42\0\2\227\3\0\1\364"+
    "\1\227\30\0\1\365\1\366\1\364\2\0\4\364\3\0"+
    "\1\227\1\0\2\230\3\0\1\367\1\230\30\0\1\370"+
    "\1\371\1\367\2\0\4\367\3\0\1\230\16\0\1\372"+
    "\52\0\1\373\27\0\1\373\36\0\1\374\55\0\1\375"+
    "\51\0\1\376\50\0\1\377\55\0\1\u0100\72\0\1\u0100"+
    "\44\0\1\u0101\61\0\1\u0102\36\0\1\u0103\7\0\1\u0104"+
    "\27\0\2\244\4\0\1\244\2\0\1\215\1\216\1\217"+
    "\1\0\1\220\1\221\1\222\1\0\2\223\4\0\1\224"+
    "\2\0\1\225\1\0\1\226\6\0\1\217\4\0\1\227"+
    "\1\230\1\0\1\244\1\0\2\244\4\0\1\244\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\3\0\1\351\1\224\2\0\1\225\1\0\1\226"+
    "\6\0\1\217\4\0\1\227\1\230\1\0\1\244\12\0"+
    "\1\u0105\64\0\2\u0106\41\0\2\u0107\57\0\1\u0108\27\0"+
    "\1\u0108\26\0\1\u0109\56\0\1\u010a\51\0\1\u010b\66\0"+
    "\1\254\61\0\1\u010c\21\0\2\257\3\0\1\u010d\1\257"+
    "\30\0\1\u010e\1\u010f\1\u0110\2\0\1\u0111\3\u010d\3\0"+
    "\1\257\16\0\1\u0112\52\0\1\u0113\27\0\1\u0113\36\0"+
    "\1\u0114\55\0\1\u0115\51\0\1\u0116\50\0\1\u0117\55\0"+
    "\1\u0118\72\0\1\u0118\44\0\1\u0119\61\0\1\u011a\36\0"+
    "\1\u011b\7\0\1\u011c\27\0\2\273\4\0\1\273\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\4\0\1\224\4\0\1\226\6\0\1\217\7\0"+
    "\1\273\1\0\2\273\4\0\1\273\2\0\1\215\1\216"+
    "\1\217\1\0\1\220\1\221\1\222\1\0\2\223\3\0"+
    "\1\351\1\224\4\0\1\226\6\0\1\217\7\0\1\273"+
    "\16\0\1\u0105\74\0\1\u011d\17\0\2\277\3\0\1\u011e"+
    "\1\277\30\0\1\u011f\1\u0120\1\u0121\2\0\1\u0122\3\u011e"+
    "\3\0\1\277\16\0\1\u0123\52\0\1\u0124\27\0\1\u0124"+
    "\36\0\1\u0125\55\0\1\u0126\51\0\1\u0127\50\0\1\u0128"+
    "\55\0\1\u0129\72\0\1\u0129\44\0\1\u012a\61\0\1\u012b"+
    "\36\0\1\u012c\7\0\1\u012d\27\0\2\313\3\0\1\u012e"+
    "\1\313\30\0\1\u012f\1\u0130\1\u0131\2\0\1\u0132\3\u012e"+
    "\3\0\1\313\16\0\1\u0133\52\0\1\u0134\27\0\1\u0134"+
    "\36\0\1\u0135\55\0\1\u0136\51\0\1\u0137\50\0\1\u0138"+
    "\55\0\1\u0139\72\0\1\u0139\44\0\1\u013a\61\0\1\u013b"+
    "\36\0\1\u013c\7\0\1\u013d\36\0\2\337\72\0\1\337"+
    "\37\0\1\u013e\76\0\1\u013f\40\0\1\337\47\0\1\327"+
    "\76\0\1\332\45\0\1\334\42\0\1\u0140\27\0\1\u0140"+
    "\56\0\1\u0141\1\0\1\342\44\0\1\u0142\22\0\1\343"+
    "\31\0\3\343\2\0\4\343\12\0\1\u0143\31\0\3\u0143"+
    "\2\0\4\u0143\12\0\1\u0143\31\0\3\u0143\2\0\1\u0143"+
    "\1\u0144\1\u0143\1\u0145\12\0\1\u0143\31\0\1\u0146\2\u0143"+
    "\2\0\4\u0143\22\0\1\u0147\52\0\1\u0148\27\0\1\u0148"+
    "\36\0\1\u0149\55\0\1\u014a\51\0\1\u014b\50\0\1\u014c"+
    "\55\0\1\u014d\72\0\1\u014d\44\0\1\u014e\61\0\1\u014f"+
    "\21\0\2\360\4\0\1\360\23\0\1\u0150\20\0\1\360"+
    "\6\0\1\360\32\0\2\360\2\0\4\360\5\0\2\360"+
    "\4\0\1\360\23\0\1\u0150\4\0\3\360\11\0\1\360"+
    "\16\0\1\u0151\7\0\1\u0152\27\0\2\364\4\0\1\364"+
    "\41\0\1\u0150\2\0\1\364\6\0\1\364\32\0\2\364"+
    "\2\0\4\364\5\0\2\364\4\0\1\364\30\0\3\364"+
    "\6\0\1\u0150\2\0\1\364\1\0\2\367\4\0\1\367"+
    "\42\0\1\u0150\1\0\1\367\6\0\1\367\32\0\2\367"+
    "\2\0\4\367\5\0\2\367\4\0\1\367\30\0\3\367"+
    "\7\0\1\u0150\1\0\1\367\12\0\1\u0153\64\0\2\u0154"+
    "\41\0\2\u0155\57\0\1\u0156\27\0\1\u0156\26\0\1\u0157"+
    "\56\0\1\u0158\51\0\1\u0159\66\0\1\u0100\61\0\1\u015a"+
    "\36\0\1\u0153\74\0\1\u015b\26\0\2\u011d\72\0\1\u011d"+
    "\37\0\1\u015c\76\0\1\u015d\40\0\1\u011d\47\0\1\u0105"+
    "\76\0\1\u0108\45\0\1\u010a\27\0\2\u010d\4\0\1\u010d"+
    "\23\0\1\u015e\20\0\1\u010d\6\0\1\u010d\32\0\2\u010d"+
    "\2\0\4\u010d\5\0\2\u010d\3\0\2\u010d\23\0\1\u015e"+
    "\4\0\11\u010d\3\0\1\u010d\1\0\2\u010d\3\0\2\u010d"+
    "\23\0\1\u015e\4\0\3\u010d\2\0\4\u010d\3\0\1\u010d"+
    "\1\0\2\u010d\4\0\1\u010d\23\0\1\u015e\4\0\2\u010d"+
    "\12\0\1\u010d\12\0\1\u015f\64\0\2\u0160\41\0\2\u0161"+
    "\57\0\1\u0162\27\0\1\u0162\26\0\1\u0163\56\0\1\u0164"+
    "\51\0\1\u0165\66\0\1\u0118\61\0\1\u0166\36\0\1\u015f"+
    "\74\0\1\u0167\32\0\1\u0168\27\0\1\u0168\11\0\2\u011e"+
    "\4\0\1\u011e\41\0\1\u0169\2\0\1\u011e\6\0\1\u011e"+
    "\32\0\2\u011e\2\0\4\u011e\5\0\2\u011e\3\0\2\u011e"+
    "\30\0\11\u011e\1\u0169\2\0\1\u011e\1\0\2\u011e\3\0"+
    "\2\u011e\30\0\3\u011e\2\0\4\u011e\1\u0169\2\0\1\u011e"+
    "\1\0\2\u011e\4\0\1\u011e\30\0\2\u011e\7\0\1\u0169"+
    "\2\0\1\u011e\12\0\1\u016a\64\0\2\u016b\41\0\2\u016c"+
    "\57\0\1\u016d\27\0\1\u016d\26\0\1\u016e\56\0\1\u016f"+
    "\51\0\1\u0170\66\0\1\u0129\61\0\1\u0171\36\0\1\u016a"+
    "\74\0\1\u0172\17\0\2\u012e\4\0\1\u012e\42\0\1\u0173"+
    "\1\0\1\u012e\6\0\1\u012e\32\0\2\u012e\2\0\4\u012e"+
    "\5\0\2\u012e\3\0\2\u012e\30\0\11\u012e\1\0\1\u0173"+
    "\1\0\1\u012e\1\0\2\u012e\3\0\2\u012e\30\0\3\u012e"+
    "\2\0\4\u012e\1\0\1\u0173\1\0\1\u012e\1\0\2\u012e"+
    "\4\0\1\u012e\30\0\2\u012e\10\0\1\u0173\1\0\1\u012e"+
    "\12\0\1\u0174\64\0\2\u0175\41\0\2\u0176\57\0\1\u0177"+
    "\27\0\1\u0177\26\0\1\u0178\56\0\1\u0179\51\0\1\u017a"+
    "\66\0\1\u0139\61\0\1\u017b\36\0\1\u0174\74\0\1\u017c"+
    "\33\0\1\u0140\65\0\1\u013e\27\0\2\u0140\4\0\1\u0140"+
    "\31\0\1\u017d\1\u017e\11\0\1\u0140\46\0\3\343\44\0"+
    "\3\343\12\0\6\u017f\1\0\31\u017f\3\0\2\u017f\4\0"+
    "\12\u017f\1\0\31\u017f\3\0\2\u017f\1\0\3\343\12\u017f"+
    "\1\343\31\u017f\3\343\2\u017f\4\343\12\u017f\1\0\31\u017f"+
    "\3\343\2\u017f\4\0\4\u017f\12\0\1\u0180\64\0\2\u0181"+
    "\41\0\2\u0182\57\0\1\u0183\27\0\1\u0183\26\0\1\u0184"+
    "\56\0\1\u0185\51\0\1\u0186\66\0\1\u014d\61\0\1\u0187"+
    "\21\0\2\u0150\1\0\1\u0188\1\0\1\u0189\1\u0150\30\0"+
    "\1\u0189\1\u018a\1\u018b\2\0\4\u0189\3\0\1\u0150\16\0"+
    "\1\u0180\74\0\1\u018c\26\0\2\u015b\72\0\1\u015b\37\0"+
    "\1\u018d\76\0\1\u018e\40\0\1\u015b\47\0\1\u0153\76\0"+
    "\1\u0156\45\0\1\u0158\42\0\1\u018f\27\0\1\u018f\25\0"+
    "\1\u0168\65\0\1\u015c\27\0\2\u015e\3\0\1\u0190\1\u015e"+
    "\30\0\1\u0191\1\u0192\1\u0190\2\0\4\u0190\3\0\1\u015e"+
    "\10\0\2\u0167\72\0\1\u0167\37\0\1\u0193\76\0\1\u0194"+
    "\40\0\1\u0167\47\0\1\u015f\76\0\1\u0162\45\0\1\u0164"+
    "\42\0\1\u0190\27\0\1\u0190\10\0\1\u0195\2\u0196\1\0"+
    "\1\u0197\1\u0198\1\343\1\u0196\1\u0195\11\0\1\u0195\6\0"+
    "\2\u0195\1\u0198\4\0\1\343\1\344\1\345\1\u0195\1\0"+
    "\4\343\1\u0198\2\u0195\1\u0196\1\0\2\u0169\3\0\1\u0199"+
    "\1\u0169\30\0\1\u019a\1\u019b\1\u0199\2\0\4\u0199\3\0"+
    "\1\u0169\10\0\2\u0172\72\0\1\u0172\37\0\1\u019c\76\0"+
    "\1\u019d\40\0\1\u0172\47\0\1\u016a\76\0\1\u016d\45\0"+
    "\1\u016f\42\0\1\u0199\27\0\1\u0199\11\0\2\u0173\3\0"+
    "\1\u019e\1\u0173\30\0\1\u019f\1\u01a0\1\u019e\2\0\4\u019e"+
    "\3\0\1\u0173\10\0\2\u017c\72\0\1\u017c\37\0\1\u01a1"+
    "\76\0\1\u01a2\40\0\1\u017c\47\0\1\u0174\76\0\1\u0177"+
    "\45\0\1\u0179\42\0\1\u019e\27\0\1\u019e\56\0\1\u01a3"+
    "\1\0\1\u01a4\44\0\1\u01a5\24\0\2\u018c\72\0\1\u018c"+
    "\37\0\1\u01a6\76\0\1\u01a7\40\0\1\u018c\47\0\1\u0180"+
    "\76\0\1\u0183\45\0\1\u0185\34\0\1\u0189\31\0\3\u0189"+
    "\2\0\4\u0189\12\0\1\u01a8\31\0\3\u01a8\2\0\4\u01a8"+
    "\12\0\1\u01a8\31\0\3\u01a8\2\0\1\u01a8\1\u01a9\1\u01a8"+
    "\1\u01aa\12\0\1\u01a8\31\0\1\u01ab\2\u01a8\2\0\4\u01a8"+
    "\20\0\1\214\27\0\1\214\25\0\1\u018f\65\0\1\u018d"+
    "\27\0\2\u018f\2\0\1\214\1\0\1\u018f\44\0\1\u018f"+
    "\1\0\2\u0190\4\0\1\u0190\23\0\1\214\20\0\1\u0190"+
    "\6\0\1\u0190\32\0\2\u0190\2\0\4\u0190\5\0\2\u0190"+
    "\4\0\1\u0190\23\0\1\214\4\0\3\u0190\11\0\1\u0190"+
    "\15\0\1\u0190\65\0\1\u0193\27\0\2\u01ac\1\0\1\342"+
    "\1\u01ad\1\343\1\u01ac\23\0\1\u01ad\4\0\1\343\1\344"+
    "\1\345\2\0\4\343\1\u01ad\2\0\1\u01ac\1\0\2\u01ad"+
    "\3\0\1\273\1\u01ad\30\0\1\u01ae\1\u01af\1\u01b0\2\0"+
    "\1\u01b1\3\273\3\0\1\u01ad\1\0\2\u0199\4\0\1\u0199"+
    "\41\0\1\214\2\0\1\u0199\6\0\1\u0199\32\0\2\u0199"+
    "\2\0\4\u0199\5\0\2\u0199\4\0\1\u0199\30\0\3\u0199"+
    "\6\0\1\214\2\0\1\u0199\15\0\1\u0199\65\0\1\u019c"+
    "\27\0\2\u019e\4\0\1\u019e\42\0\1\214\1\0\1\u019e"+
    "\6\0\1\u019e\32\0\2\u019e\2\0\4\u019e\5\0\2\u019e"+
    "\4\0\1\u019e\30\0\3\u019e\7\0\1\214\1\0\1\u019e"+
    "\15\0\1\u019e\65\0\1\u01a1\74\0\3\u01b2\12\0\1\u01b2"+
    "\31\0\3\u01b2\2\0\4\u01b2\44\0\3\u01b2\27\0\1\214"+
    "\65\0\1\u01a6\26\0\6\u01b3\1\0\31\u01b3\3\0\2\u01b3"+
    "\4\0\12\u01b3\1\0\31\u01b3\3\0\2\u01b3\1\0\3\u0189"+
    "\12\u01b3\1\u0189\31\u01b3\3\u0189\2\u01b3\4\u0189\12\u01b3\1\0"+
    "\31\u01b3\3\u0189\2\u01b3\4\0\4\u01b3\6\0\1\273\32\0"+
    "\2\273\2\0\4\273\5\0\2\273\3\0\2\273\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\4\0\1\224\4\0\1\226\2\0\4\273\1\274"+
    "\4\273\3\0\1\273\1\0\2\273\3\0\2\273\2\0"+
    "\1\215\1\216\1\217\1\0\1\220\1\221\1\222\1\0"+
    "\2\223\4\0\1\224\4\0\1\226\2\0\3\273\1\0"+
    "\1\217\4\273\3\0\1\273\1\0\2\273\4\0\1\273"+
    "\2\0\1\215\1\216\1\217\1\0\1\220\1\221\1\222"+
    "\1\0\2\223\4\0\1\224\4\0\1\226\2\0\2\273"+
    "\2\0\1\217\7\0\1\273\6\0\1\u01b4\31\0\3\u01b4"+
    "\2\0\4\u01b4\4\0\6\u01b5\1\0\31\u01b5\3\0\2\u01b5"+
    "\4\0\4\u01b5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\3\1\1\11\1\1\1\11\55\0"+
    "\1\1\120\0\1\11\364\0\1\11\25\0\1\11\3\1"+
    "\32\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[437];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	static final private Pattern ints = Pattern.compile("\\d+");

	private String openTag = "<font color=\"brown\"><LK:DATA"; 
	private String closeTag = "</LK:DATA></font>"; 
		
	private StringBuilder output = new StringBuilder();

	public String getOutput() {
		return output.toString();
	}
	
		
	private String getGiorno(String text) {
		/*
		 * Il giorno è il primo numero.
		 */
	
		Matcher matcher = ints.matcher(text);
		
		if( !matcher.find()) {
			System.err.println("DateMarker - getGiorno() - match failed - " + text);
			return "";
		}

		int start = matcher.start();
		int end = matcher.end();
	
		String giorno = text.substring(start, end);
		
		if(giorno.length() != 1 && giorno.length() != 2) {
			System.err.println("DateMarker - getGiorno() - length check failed - " + text);
		}

		if(giorno.length() == 1) {
			giorno = "0" + giorno;
		}
		
		return giorno;
	}

	private String getMese(String text) {

		return getMese(text, false);
	}
	
	private String getMese(String text, boolean giornoDoppio) {
		/*
		 * Cerca la forma estesa, altrimenti il secondo numero.
		 * Nel caso di data con giorno doppio il mese è il terzo numero. 
		 */
		
		/*
		 * TODO
		 * Non funziona nel seguente (raro) caso (omissione del primo anno):
		 * 24 dicembre - 22 gennaio 2012
		 */
		
		text = text.toLowerCase().trim();
		
		if(text.indexOf("gen") > -1) return "01";
		if(text.indexOf("feb") > -1) return "02";
		if(text.indexOf("mar") > -1) return "03";
		if(text.indexOf("apr") > -1) return "04";
		if(text.indexOf("mag") > -1) return "05";
		if(text.indexOf("giu") > -1) return "06";
		if(text.indexOf("lug") > -1) return "07";
		if(text.indexOf("ago") > -1) return "08";
		if(text.indexOf("set") > -1) return "09";
		if(text.indexOf("ott") > -1) return "10";
		if(text.indexOf("nov") > -1) return "11";
		if(text.indexOf("dic") > -1) return "12";
			
		Matcher matcher = ints.matcher(text);
		
		if( !matcher.find()) {
			System.err.println("DateMarker - getMese() - first match failed - " + text);
			return "";
		}

		if( !matcher.find()) {
			System.err.println("DateMarker - getMese() - second match failed - " + text);
			return "";
		}

		if(giornoDoppio) {
			if( !matcher.find()) {
				System.err.println("DateMarker - getMese() - third match failed - " + text);
				return "";
			}
		}

		int start = matcher.start();
		int end = matcher.end();
	
		String mese = text.substring(start, end);
		
		if(mese.length() != 1 && mese.length() != 2) {
			System.err.println("DateMarker - getMese() - length check failed - " + text);
		}

		if(mese.length() == 1) {
			mese = "0" + mese;
		}

		return mese;
	}
	
	private String getAnno(String text) {
		/*
		 * L'anno è l'ultimo numero.
		 */
		
		Matcher matcher = ints.matcher(text);
		
		//Trova l'ultima cifra
		String anno = "";
		while(matcher.find()) {
			
			int start = matcher.start();
			int end = matcher.end();
			
			anno = text.substring(start, end);
		}

		if(anno.length() != 2 && anno.length() != 4) {
			System.err.println("DateMarker - getAnno() - length check failed - " + text);
		}
		
		if(anno.length() == 2) {
			
			int num = -1;
			try {
				num = Integer.valueOf(anno);
			} catch (NumberFormatException e) {
				System.err.println("DateMarker - getAnno() - num conv failed - " + text);
				return "";
			}
			
			if(num > 20) {
				anno = "19" + anno;
			} else {
				anno = "20" + anno;
			}		
		}
		
		return anno;
	}
	
	private String setData(String text) {
		
		return setData(text, false, false);
	}
	
	private String setData(String text, boolean giornoDoppio) {
		
		return setData(text, giornoDoppio, false);
	}
	
	private String setData(String text, boolean giornoDoppio, boolean senzaAnno) {
		/*
		 * Comprende anche il caso "Date doppie con cambio mese": 
		 * 12/6-28/8/2012
		 * 24 settembre - 22 dicembre 2012
		 */
		
		String giorno = getGiorno(text);
		String mese = (giornoDoppio) ? getMese(text, true) : getMese(text);
		
		if(senzaAnno) {
			/*
			 * TODO
			 * Che valore impostare in questi casi?
			 */
			return " value=\"\">" + text;
		}
		
		String anno = getAnno(text);

		String value = giorno + mese + anno;
		String output = " value=\"" + value + "\">" + text;
		
		return output;
	}
	
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DateMarker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 10: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 11: break;
        case 3: 
          { 
          }
        case 12: break;
        case 4: 
          { output.append(yytext()); yybegin(AH);
          }
        case 13: break;
        case 5: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 14: break;
        case 6: 
          { output.append(yytext().substring(0,1) + 
					openTag + setData(yytext().substring(1, yytext().length()-1)) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 15: break;
        case 7: 
          { output.append(yytext().substring(0,1) + 
					openTag + setData(yytext().substring(1, yytext().length()-1), false, true) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 16: break;
        case 8: 
          { output.append(yytext().substring(0,1) + 
						openTag + setData(yytext().substring(1, yytext().length()-1), true) + 
						closeTag + yytext().substring(yytext().length()-1));
          }
        case 17: break;
        case 9: 
          { output.append(yytext().substring(0,1) + 
					openTag + " value=\"\">" + yytext().substring(1, yytext().length()-1) + 
					closeTag + yytext().substring(yytext().length()-1));
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java DateMarker [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        DateMarker scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new DateMarker(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
