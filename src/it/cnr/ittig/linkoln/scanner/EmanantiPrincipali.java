/*******************************************************************************
 * Copyright (c) 2016 Institute of Legal Information Theory and Techniques (ITTIG).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL license v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Contributors: 
 *   Institute of Legal Information Theory and Techniques (ITTIG/CNR)
 *******************************************************************************/
/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>EmanantiPrincipali.jflex</tt>
 */
public class EmanantiPrincipali {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AH = 2;
  public static final int LK = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\36\1\37\1\1\22\0\1\3\6\0\1\0"+
    "\4\0\1\0\1\0\1\31\1\26\12\0\2\0\1\23\1\0\1\25"+
    "\2\0\1\6\1\33\1\14\1\12\1\10\1\22\1\11\1\0\1\4"+
    "\1\0\1\30\1\27\1\32\1\13\1\7\1\17\1\0\1\20\1\15"+
    "\1\21\1\16\1\34\1\0\1\24\1\0\1\35\4\0\1\0\1\0"+
    "\1\6\1\33\1\14\1\12\1\10\1\22\1\11\1\0\1\4\2\0"+
    "\1\5\1\32\1\13\1\7\1\17\1\0\1\20\1\15\1\21\1\16"+
    "\1\34\1\0\1\24\1\0\1\35\12\0\1\36\56\0\1\0\13\0"+
    "\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0\2\0\5\0"+
    "\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0\2\0\65\0"+
    "\2\4\115\0\1\15\u1e93\0\1\0\1\0\4\0\1\0\16\0\1\36"+
    "\1\36\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\7\1\1\2\2\3\2\1\24\0\1\4\1\5"+
    "\11\0\1\6\4\0\1\7\1\0\1\10\36\0\2\7"+
    "\1\0\1\7\7\0\2\10\1\0\1\10\21\0\1\7"+
    "\1\0\1\7\5\0\1\10\1\0\1\10\13\0\1\7"+
    "\41\0\1\11\37\0\1\12\21\0\2\11\1\0\1\11"+
    "\34\0\1\11\1\0\1\11\42\0\1\13\33\0\1\14"+
    "\57\0\1\15\3\0\1\16\10\0\1\17\20\0\1\20"+
    "\62\0\1\21\24\0\1\22\1\0\1\23\142\0\1\24"+
    "\2\0\1\25\17\0\1\26\10\0\1\27\1\0\1\27"+
    "\11\0\1\30\22\0\1\31\1\0\1\32\7\0\2\27"+
    "\1\0\1\27\4\0\1\27\15\0\1\27\1\0\1\27"+
    "\111\0\1\33\7\0\1\34\6\0\1\35\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[767];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\140\0\u0140\0\140\0\u0160\0\u0180\0\u01a0"+
    "\0\u01c0\0\u01e0\0\u0200\0\u0220\0\u0240\0\u0120\0\u0260\0\u0280"+
    "\0\u0160\0\u02a0\0\u0180\0\u02c0\0\u02e0\0\u0300\0\u0320\0\u0340"+
    "\0\u0360\0\u0380\0\u03a0\0\u0260\0\140\0\u03c0\0\u03e0\0\u0400"+
    "\0\u0420\0\u0440\0\u0460\0\u0480\0\u04a0\0\u04c0\0\140\0\u04e0"+
    "\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0"+
    "\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\u06c0\0\u06e0"+
    "\0\u0700\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0\0\u07c0\0\u07e0"+
    "\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0"+
    "\0\u0900\0\u0920\0\u0940\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0"+
    "\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\u0ae0"+
    "\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0\0\u0be0"+
    "\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0\0\u0ce0"+
    "\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0da0\0\u0dc0\0\u0de0"+
    "\0\u0e00\0\u0e20\0\u0e40\0\u0e60\0\u0d80\0\u0e80\0\u0ea0\0\u0ec0"+
    "\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\u0f80\0\u0fa0\0\u0fc0"+
    "\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060\0\u1080\0\u10a0\0\u10c0"+
    "\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160\0\u1180\0\u11a0\0\u11c0"+
    "\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260\0\u1280\0\u12a0\0\u12c0"+
    "\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360\0\u1380\0\u13a0\0\u13c0"+
    "\0\u13e0\0\u1400\0\u1420\0\u1440\0\u1460\0\u1480\0\u14a0\0\u14c0"+
    "\0\u14e0\0\u1500\0\u1520\0\u1540\0\u1560\0\u1580\0\u15a0\0\u15c0"+
    "\0\u15e0\0\u1600\0\u1620\0\u1640\0\u1660\0\u1680\0\u16a0\0\u16c0"+
    "\0\u16e0\0\u1700\0\u1720\0\u1740\0\u1760\0\u1780\0\u17a0\0\u17c0"+
    "\0\u17e0\0\u1800\0\u1820\0\u1840\0\140\0\u1860\0\u1880\0\u18a0"+
    "\0\u18c0\0\u18e0\0\u1900\0\u1920\0\u1940\0\u1960\0\u1980\0\u19a0"+
    "\0\u19c0\0\u19e0\0\u1a00\0\u1a20\0\u1a40\0\u1a60\0\u1a80\0\u1aa0"+
    "\0\u1ac0\0\u1ae0\0\u1b00\0\u1b20\0\u1b40\0\u1b60\0\u1b80\0\u1ba0"+
    "\0\u1bc0\0\u1be0\0\u1c00\0\u1c20\0\u1c40\0\u1c60\0\u1c80\0\u1ca0"+
    "\0\u1cc0\0\u1ce0\0\u1d00\0\u1d20\0\u1d40\0\u1d60\0\u1d80\0\u1da0"+
    "\0\u1dc0\0\u1de0\0\u1e00\0\u1e20\0\u1e40\0\u1e60\0\u0d80\0\u1e80"+
    "\0\u1ea0\0\u1ec0\0\u1ee0\0\u1f00\0\u1f20\0\u1f40\0\u1f60\0\u1f80"+
    "\0\u1fa0\0\u1fc0\0\u1fe0\0\u2000\0\u2020\0\u2040\0\u2060\0\u2080"+
    "\0\u20a0\0\u20c0\0\u20e0\0\u2100\0\u2120\0\u2140\0\u2160\0\u2180"+
    "\0\u21a0\0\u21c0\0\u21e0\0\u2200\0\u2220\0\u2240\0\u2260\0\u2280"+
    "\0\u22a0\0\u22c0\0\u22e0\0\140\0\u2300\0\u2320\0\u2340\0\u2360"+
    "\0\u2380\0\u23a0\0\u23c0\0\u23e0\0\u2400\0\u2420\0\u2440\0\u2460"+
    "\0\u2480\0\u24a0\0\u24c0\0\u24e0\0\u2500\0\u2520\0\u2540\0\u2560"+
    "\0\u2580\0\u25a0\0\u25c0\0\u25e0\0\u2600\0\u2620\0\u2640\0\140"+
    "\0\u2660\0\u2680\0\u26a0\0\u26c0\0\u26e0\0\u2700\0\u2720\0\u2740"+
    "\0\u2760\0\u2780\0\u27a0\0\u27c0\0\u27e0\0\u2800\0\u2820\0\u2840"+
    "\0\u2860\0\u2880\0\u28a0\0\u28c0\0\u28e0\0\u2900\0\u2920\0\u2940"+
    "\0\u2960\0\u2980\0\u29a0\0\u29c0\0\u29e0\0\u2a00\0\u2a20\0\u2a40"+
    "\0\u2a60\0\u2a80\0\u2aa0\0\u2ac0\0\u2ae0\0\u2b00\0\u2b20\0\u2b40"+
    "\0\u2b60\0\u2b80\0\u2ba0\0\u2bc0\0\u2be0\0\u2c00\0\u2c20\0\140"+
    "\0\u2c40\0\u2c60\0\u2c80\0\140\0\u2ca0\0\u2cc0\0\u2ce0\0\u2d00"+
    "\0\u2d20\0\u2d40\0\u2d60\0\u2d80\0\u2da0\0\u2dc0\0\u2de0\0\u2e00"+
    "\0\u2e20\0\u2e40\0\u2e60\0\u2e80\0\u2ea0\0\u2ec0\0\u2ee0\0\u2f00"+
    "\0\u2f20\0\u2f40\0\u2f60\0\u2f80\0\u2fa0\0\140\0\u2fc0\0\u2fe0"+
    "\0\u3000\0\u3020\0\u3040\0\u3060\0\u3080\0\u30a0\0\u30c0\0\u30e0"+
    "\0\u3100\0\u3120\0\u3140\0\u3160\0\u3180\0\u31a0\0\u31c0\0\u31e0"+
    "\0\u3200\0\u3220\0\u3240\0\u3260\0\u3280\0\u32a0\0\u32c0\0\u32e0"+
    "\0\u3300\0\u3320\0\u3340\0\u3360\0\u3380\0\u33a0\0\u33c0\0\u33e0"+
    "\0\u3400\0\u3420\0\u3440\0\u3460\0\u3480\0\u34a0\0\u34c0\0\u34e0"+
    "\0\u3500\0\u3520\0\u3540\0\u3560\0\u3580\0\u35a0\0\u35c0\0\u35e0"+
    "\0\140\0\u3600\0\u3620\0\u3640\0\u3660\0\u3680\0\u36a0\0\u36c0"+
    "\0\u36e0\0\u3700\0\u3720\0\u3740\0\u3760\0\u3780\0\u37a0\0\u37c0"+
    "\0\u37e0\0\u3800\0\u3820\0\u3840\0\u3860\0\140\0\u3880\0\140"+
    "\0\u38a0\0\u38c0\0\u38e0\0\u3900\0\u3920\0\u3940\0\u3960\0\u3980"+
    "\0\u39a0\0\u39c0\0\u39e0\0\u3a00\0\u3a20\0\u3a40\0\u3a60\0\u3a80"+
    "\0\u3aa0\0\u3ac0\0\u3ae0\0\u3b00\0\u3b20\0\u3b40\0\u3b60\0\u3b80"+
    "\0\u3ba0\0\u3bc0\0\u3be0\0\u3c00\0\u3c20\0\u3c40\0\u3c60\0\u3c80"+
    "\0\u3ca0\0\u3cc0\0\u3ce0\0\u3d00\0\u3d20\0\u3d40\0\u3d60\0\u3d80"+
    "\0\u3da0\0\u3dc0\0\u3de0\0\u3e00\0\u3e20\0\u3e40\0\u3e60\0\u3e80"+
    "\0\u3ea0\0\u3ec0\0\u3ee0\0\u3f00\0\u3f20\0\u3f40\0\u3f60\0\u3f80"+
    "\0\u3fa0\0\u3fc0\0\u3fe0\0\u4000\0\u4020\0\u4040\0\u4060\0\u4080"+
    "\0\u40a0\0\u40c0\0\u40e0\0\u4100\0\u4120\0\u4140\0\u4160\0\u4180"+
    "\0\u41a0\0\u41c0\0\u41e0\0\u4200\0\u4220\0\u4240\0\u4260\0\u4280"+
    "\0\u42a0\0\u42c0\0\u42e0\0\u4300\0\u4320\0\u4340\0\u4360\0\u4380"+
    "\0\u43a0\0\u43c0\0\u43e0\0\u4400\0\u4420\0\u4440\0\u4460\0\u4480"+
    "\0\u44a0\0\u44c0\0\140\0\u44e0\0\u4500\0\140\0\u4520\0\u4540"+
    "\0\u4560\0\u4580\0\u45a0\0\u45c0\0\u45e0\0\u4600\0\u4620\0\u4640"+
    "\0\u4660\0\u4680\0\u46a0\0\u46c0\0\u46e0\0\140\0\u4700\0\u4720"+
    "\0\u4740\0\u4760\0\u4780\0\u47a0\0\u47c0\0\u47e0\0\u4800\0\u4820"+
    "\0\u4840\0\u4860\0\u4880\0\u48a0\0\u48c0\0\u48e0\0\u4900\0\u4920"+
    "\0\u4940\0\u4960\0\140\0\u4980\0\u49a0\0\u49c0\0\u49e0\0\u4a00"+
    "\0\u4a20\0\u4a40\0\u4a60\0\u4a80\0\u4aa0\0\u4ac0\0\u4ae0\0\u4b00"+
    "\0\u4b20\0\u4b40\0\u4b60\0\u4b80\0\u4ba0\0\140\0\u4bc0\0\140"+
    "\0\u4be0\0\u4c00\0\u4c20\0\u4c40\0\u4c60\0\u4c80\0\u4ca0\0\u4cc0"+
    "\0\u4ce0\0\u4d00\0\u4d20\0\u4d40\0\u4d60\0\u4d80\0\u4da0\0\u4dc0"+
    "\0\u4de0\0\u4e00\0\u4e20\0\u4e40\0\u4e60\0\u4e80\0\u4ea0\0\u4ec0"+
    "\0\u4ee0\0\u4f00\0\u4f20\0\u4f40\0\u4f60\0\140\0\u4f80\0\u4d60"+
    "\0\u4fa0\0\u4fc0\0\u4fe0\0\u5000\0\u5020\0\u5040\0\u5060\0\u5080"+
    "\0\u50a0\0\u50c0\0\u50e0\0\u5100\0\u5120\0\u5140\0\u5160\0\u5180"+
    "\0\u51a0\0\u51c0\0\u51e0\0\u5200\0\u5220\0\u5240\0\u5260\0\u5280"+
    "\0\u52a0\0\u52c0\0\u52e0\0\u5300\0\u5320\0\u5340\0\u5360\0\u5380"+
    "\0\u53a0\0\u53c0\0\u53e0\0\u5400\0\u5420\0\u5440\0\u5460\0\u5480"+
    "\0\u54a0\0\u54c0\0\u54e0\0\u5500\0\u5520\0\u5540\0\u5560\0\u5580"+
    "\0\u55a0\0\u55c0\0\u55e0\0\u5600\0\u5620\0\u5640\0\u5660\0\u5680"+
    "\0\u56a0\0\u56c0\0\u56e0\0\u5700\0\u5720\0\u5740\0\u5760\0\u5780"+
    "\0\u57a0\0\u57c0\0\u57e0\0\u5800\0\u5820\0\u5840\0\u5860\0\u5880"+
    "\0\u58a0\0\140\0\u58c0\0\u58e0\0\u5900\0\u5920\0\u5940\0\u5960"+
    "\0\u5980\0\140\0\u59a0\0\u59c0\0\u59e0\0\u5a00\0\u5a20\0\u5a40"+
    "\0\140\0\u5a60\0\u5a80\0\u5aa0\0\u5ac0\0\u5ae0\0\u5b00\0\u5b20"+
    "\0\u5b40\0\u5b60\0\u5b80\0\u5ba0\0\u5bc0\0\u5be0\0\u5c00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[767];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\7\4\1\6\2\4\1\7\1\4\1\10"+
    "\1\11\3\4\1\12\12\4\2\13\1\4\1\14\1\15"+
    "\20\4\1\16\12\4\2\13\1\4\1\14\1\15\20\4"+
    "\1\17\12\4\2\13\42\0\1\4\41\0\1\20\41\0"+
    "\1\21\1\22\52\0\1\23\23\0\1\24\11\0\1\25"+
    "\20\0\3\26\2\0\1\27\20\0\1\30\7\0\1\26"+
    "\2\0\1\15\36\0\3\31\22\0\1\32\10\0\1\31"+
    "\1\0\3\33\22\0\1\34\10\0\1\33\16\0\1\35"+
    "\40\0\1\36\33\0\1\37\16\0\1\40\27\0\1\41"+
    "\35\0\1\42\27\0\1\43\30\0\3\44\33\0\1\44"+
    "\30\0\1\45\15\0\1\46\60\0\1\47\23\0\1\50"+
    "\33\0\1\51\45\0\1\52\54\0\1\53\11\0\1\54"+
    "\40\0\1\55\21\0\1\55\25\0\1\56\47\0\1\57"+
    "\42\0\1\57\30\0\1\60\17\0\3\61\17\0\1\62"+
    "\13\0\1\61\4\0\1\63\24\0\1\64\12\0\1\65"+
    "\24\0\1\66\22\0\1\67\31\0\1\70\35\0\1\71"+
    "\41\0\1\72\32\0\3\61\5\0\1\73\5\0\1\74"+
    "\17\0\1\61\5\0\1\75\21\0\1\75\21\0\1\76"+
    "\27\0\3\77\4\0\1\100\3\0\1\101\1\0\1\102"+
    "\4\0\1\103\13\0\1\77\15\0\1\104\23\0\3\105"+
    "\4\0\1\106\3\0\1\107\1\0\1\110\4\0\1\111"+
    "\13\0\1\105\4\0\1\112\65\0\1\113\17\0\1\114"+
    "\26\0\3\115\33\0\1\115\7\0\1\116\50\0\1\117"+
    "\27\0\1\120\34\0\1\121\21\0\1\121\11\0\3\77"+
    "\4\0\1\100\3\0\1\101\1\0\1\122\4\0\1\123"+
    "\13\0\1\77\10\0\1\124\3\0\1\125\1\0\1\126"+
    "\12\0\1\127\16\0\1\130\20\0\1\131\16\0\1\125"+
    "\20\0\1\132\13\0\1\133\21\0\1\133\25\0\1\134"+
    "\23\0\3\105\4\0\1\106\3\0\1\107\1\0\1\135"+
    "\4\0\1\136\13\0\1\105\10\0\1\137\3\0\1\140"+
    "\1\0\1\141\12\0\1\142\16\0\1\143\20\0\1\144"+
    "\16\0\1\140\20\0\1\145\13\0\1\146\21\0\1\146"+
    "\17\0\1\147\40\0\1\150\37\0\1\151\30\0\3\115"+
    "\10\0\1\152\2\0\1\153\1\154\16\0\1\115\34\0"+
    "\1\155\12\0\1\156\54\0\1\157\17\0\1\160\43\0"+
    "\1\125\2\0\1\161\15\0\1\132\13\0\1\162\21\0"+
    "\1\162\24\0\1\125\14\0\1\163\31\0\1\164\5\0"+
    "\1\165\26\0\1\166\2\0\1\164\5\0\1\165\16\0"+
    "\1\124\3\0\1\125\1\0\1\125\31\0\1\125\12\0"+
    "\1\164\5\0\1\167\16\0\1\130\37\0\1\125\37\0"+
    "\1\170\33\0\1\171\43\0\1\140\2\0\1\172\15\0"+
    "\1\145\13\0\1\173\21\0\1\173\24\0\1\140\14\0"+
    "\1\174\31\0\1\164\5\0\1\175\26\0\1\176\2\0"+
    "\1\164\5\0\1\175\16\0\1\137\3\0\1\140\1\0"+
    "\1\140\31\0\1\140\12\0\1\164\5\0\1\177\16\0"+
    "\1\143\37\0\1\140\37\0\1\200\30\0\3\201\17\0"+
    "\1\202\13\0\1\201\13\0\1\203\37\0\1\204\33\0"+
    "\1\205\50\0\1\206\27\0\1\207\37\0\1\210\63\0"+
    "\1\211\20\0\1\212\31\0\1\213\34\0\1\214\43\0"+
    "\1\215\43\0\1\125\30\0\1\216\21\0\1\216\33\0"+
    "\1\164\23\0\1\217\40\0\1\125\12\0\1\164\40\0"+
    "\1\220\22\0\1\221\34\0\1\222\43\0\1\223\43\0"+
    "\1\140\32\0\1\224\40\0\1\140\12\0\1\164\40\0"+
    "\1\225\14\0\3\201\13\0\1\226\17\0\1\201\5\0"+
    "\1\227\21\0\1\227\31\0\1\230\37\0\1\231\50\0"+
    "\1\232\14\0\1\233\41\0\1\234\46\0\1\235\53\0"+
    "\1\236\13\0\1\237\30\0\3\240\4\0\1\100\3\0"+
    "\1\101\1\0\1\102\4\0\1\103\13\0\1\240\7\0"+
    "\1\241\54\0\1\242\23\0\1\243\46\0\1\244\35\0"+
    "\1\245\35\0\1\246\33\0\1\247\54\0\1\250\32\0"+
    "\1\251\35\0\1\252\42\0\1\253\27\0\1\254\36\0"+
    "\1\255\40\0\1\256\45\0\1\257\55\0\1\260\7\0"+
    "\1\261\46\0\1\262\30\0\1\263\52\0\1\264\21\0"+
    "\3\240\4\0\1\100\3\0\1\265\1\0\1\122\1\266"+
    "\1\267\2\0\1\123\13\0\1\240\13\0\1\270\41\0"+
    "\1\271\46\0\1\272\23\0\1\273\37\0\1\274\37\0"+
    "\1\66\42\0\1\275\41\0\1\276\32\0\1\277\37\0"+
    "\1\300\37\0\1\301\53\0\1\302\14\0\3\303\4\0"+
    "\1\304\3\0\1\305\1\0\1\306\4\0\1\307\13\0"+
    "\1\303\1\0\3\310\17\0\1\311\13\0\1\310\13\0"+
    "\1\312\30\0\1\313\42\0\1\314\37\0\1\315\45\0"+
    "\1\316\47\0\1\317\21\0\1\320\1\130\20\0\1\131"+
    "\26\0\1\321\27\0\1\322\37\0\1\323\37\0\1\324"+
    "\44\0\1\325\31\0\1\165\47\0\1\326\30\0\1\327"+
    "\37\0\1\330\35\0\1\175\50\0\1\331\35\0\1\332"+
    "\37\0\1\333\23\0\3\303\4\0\1\304\3\0\1\305"+
    "\1\0\1\334\4\0\1\335\13\0\1\303\10\0\1\336"+
    "\3\0\1\337\1\0\1\340\12\0\1\341\16\0\1\342"+
    "\20\0\1\343\16\0\1\337\20\0\1\344\13\0\1\345"+
    "\21\0\1\345\11\0\3\310\5\0\1\346\2\0\1\347"+
    "\1\350\2\0\1\351\16\0\1\310\5\0\1\352\21\0"+
    "\1\352\16\0\1\353\44\0\1\354\37\0\1\355\33\0"+
    "\1\356\30\0\23\357\1\0\14\357\32\0\1\360\14\0"+
    "\1\361\41\0\1\362\27\0\3\363\33\0\1\363\17\0"+
    "\1\364\30\0\1\365\54\0\1\366\13\0\3\367\33\0"+
    "\1\367\17\0\1\370\45\0\1\371\16\0\1\372\43\0"+
    "\1\373\37\0\1\337\2\0\1\374\15\0\1\344\13\0"+
    "\1\375\21\0\1\375\24\0\1\337\14\0\1\376\31\0"+
    "\1\164\5\0\1\377\26\0\1\u0100\2\0\1\164\5\0"+
    "\1\377\16\0\1\336\3\0\1\337\1\0\1\337\31\0"+
    "\1\337\12\0\1\164\5\0\1\u0101\16\0\1\342\37\0"+
    "\1\337\37\0\1\u0102\33\0\1\u0103\41\0\1\u0104\1\u0105"+
    "\40\0\1\u0106\37\0\1\u0107\37\0\1\u0108\34\0\1\u0109"+
    "\21\0\1\u0109\24\0\1\u010a\31\0\1\u010b\51\0\1\u010c"+
    "\17\0\23\357\1\u010d\14\357\16\0\1\u010e\55\0\1\u010f"+
    "\7\0\1\u0110\34\0\3\363\4\0\1\u0111\26\0\1\363"+
    "\25\0\1\u0112\31\0\1\u0113\20\0\23\u0114\1\0\14\u0114"+
    "\1\0\3\367\4\0\1\u0115\26\0\1\367\25\0\1\u0116"+
    "\12\0\23\u0117\1\0\14\u0117\12\0\1\u0118\44\0\1\u0119"+
    "\24\0\1\u011a\43\0\1\u011b\43\0\1\337\32\0\1\u011c"+
    "\40\0\1\337\12\0\1\164\40\0\1\u011d\31\0\1\u011e"+
    "\53\0\1\u011f\20\0\1\u0120\37\0\1\u0121\43\0\1\u0122"+
    "\44\0\1\u0123\23\0\1\u0124\33\0\1\u0125\40\0\1\u0126"+
    "\21\0\1\u0126\14\0\1\u0127\61\0\1\u0128\24\0\1\u0129"+
    "\30\0\1\u012a\42\0\1\u012b\46\0\1\u012c\21\0\23\u012d"+
    "\1\0\14\u012d\25\0\1\u012e\12\0\23\u0114\1\u012f\14\u0114"+
    "\16\0\1\u0130\21\0\23\u0131\1\0\14\u0131\23\u0117\1\u0132"+
    "\14\u0117\10\0\1\u0133\54\0\1\u0134\21\0\1\u0135\54\0"+
    "\1\u0136\32\0\1\u0137\35\0\1\u0138\35\0\1\u0139\34\0"+
    "\1\u013a\44\0\1\u013b\30\0\1\u013c\47\0\1\u013d\36\0"+
    "\1\u013e\30\0\1\u013f\41\0\1\u0140\36\0\1\u0141\35\0"+
    "\1\u0142\21\0\1\u0142\16\0\1\u0143\44\0\1\u0144\37\0"+
    "\1\u0145\44\0\1\u0146\17\0\23\u012d\1\u0147\14\u012d\23\u0148"+
    "\1\0\14\u0148\26\0\1\u0149\31\0\1\176\17\0\23\u0131"+
    "\1\u014a\14\u0131\26\0\1\u014b\24\0\1\u014c\24\0\23\u014d"+
    "\1\0\14\u014d\13\0\1\u014e\41\0\1\u014f\32\0\1\u0150"+
    "\37\0\1\u0151\50\0\1\u0152\36\0\1\u0153\23\0\1\u0154"+
    "\54\0\1\u0155\51\0\1\u0156\14\0\1\u0157\34\0\1\u0158"+
    "\21\0\1\u0158\11\0\3\u0159\17\0\1\u015a\13\0\1\u0159"+
    "\10\0\1\u015b\34\0\1\u015c\21\0\1\u015c\24\0\1\u015d"+
    "\31\0\1\u015e\40\0\1\u015f\56\0\1\u0160\11\0\23\u0148"+
    "\1\u0161\14\u0148\5\0\1\u0162\21\0\1\u0162\36\0\1\u0163"+
    "\16\0\1\u0164\21\0\1\u0164\45\0\1\u0165\2\0\23\u014d"+
    "\1\u0166\14\u014d\10\0\1\u0167\37\0\1\u0168\36\0\1\377"+
    "\47\0\1\u0169\26\0\1\u016a\37\0\1\u016b\42\0\1\u016c"+
    "\35\0\1\u016d\63\0\1\u016e\23\0\1\u016f\30\0\1\u0170"+
    "\30\0\3\u0159\11\0\1\u0171\21\0\1\u0159\5\0\1\u0172"+
    "\21\0\1\u0172\34\0\1\u0173\23\0\1\u0174\33\0\1\u0175"+
    "\40\0\1\u0176\21\0\1\u0176\27\0\1\u0177\25\0\1\u0178"+
    "\21\0\1\u0178\36\0\1\u0179\21\0\1\u017a\34\0\1\u017b"+
    "\21\0\1\u017b\20\0\1\u017c\35\0\1\u017d\57\0\1\u017e"+
    "\12\0\3\u017f\33\0\1\u017f\17\0\1\u0180\45\0\1\u0181"+
    "\13\0\3\u0182\33\0\1\u0182\1\0\3\u0183\17\0\1\u0184"+
    "\13\0\1\u0183\5\0\1\u0185\21\0\1\u0185\11\0\3\u0186"+
    "\17\0\1\u0187\13\0\1\u0186\5\0\1\u0188\21\0\1\u0188"+
    "\35\0\1\u0189\33\0\1\u018a\26\0\1\u018b\44\0\1\u018c"+
    "\30\0\1\u018d\41\0\1\u018e\37\0\1\u018f\37\0\1\u0190"+
    "\34\0\1\u0191\21\0\1\u0191\34\0\1\u0192\23\0\1\u0193"+
    "\53\0\1\u0194\14\0\3\u0195\17\0\1\u0196\13\0\1\u0195"+
    "\5\0\1\u0197\21\0\1\u0197\11\0\3\u017f\4\0\1\u0198"+
    "\26\0\1\u017f\25\0\1\u0199\12\0\23\u019a\1\0\14\u019a"+
    "\1\0\3\u0182\10\0\1\u019b\2\0\1\u019c\1\u019d\16\0"+
    "\1\u0182\1\0\3\u0183\6\0\1\u019e\24\0\1\u0183\5\0"+
    "\1\u019f\21\0\1\u019f\14\0\1\u01a0\34\0\3\u0186\14\0"+
    "\1\u01a1\16\0\1\u0186\5\0\1\u01a2\21\0\1\u01a2\14\0"+
    "\1\u01a3\33\0\23\u01a4\1\0\14\u01a4\6\0\1\u01a5\55\0"+
    "\1\u01a6\23\0\1\u01a7\34\0\1\u01a8\21\0\1\u01a8\16\0"+
    "\1\165\55\0\1\u01a9\23\0\1\u01aa\44\0\1\u01ab\46\0"+
    "\1\u01ac\30\0\1\u01ad\23\0\3\u0195\10\0\1\u01ae\22\0"+
    "\1\u0195\5\0\1\u01af\21\0\1\u01af\20\0\1\u01b0\45\0"+
    "\1\u01b1\21\0\23\u01b2\1\0\14\u01b2\23\u019a\1\u01b3\14\u019a"+
    "\7\0\1\u01b4\50\0\1\u01b5\27\0\1\u01b6\37\0\1\u01b7"+
    "\37\0\1\u01b8\36\0\1\u01b9\40\0\1\u01ba\37\0\1\u01bb"+
    "\43\0\1\u01bc\23\0\23\u01a4\1\u01bd\14\u01a4\21\0\1\u01be"+
    "\33\0\1\u01bf\41\0\1\u01c0\30\0\1\u01c1\44\0\1\u01c2"+
    "\46\0\1\u01c3\23\0\1\u01c4\44\0\1\u01c5\32\0\1\u01c6"+
    "\36\0\1\u01c7\40\0\1\u01c8\53\0\1\u01c9\33\0\1\u01ca"+
    "\17\0\23\u01b2\1\u01cb\14\u01b2\26\0\1\u01cc\43\0\1\u01cd"+
    "\14\0\1\u01ce\41\0\1\u01cf\45\0\1\u01d0\44\0\1\u01d1"+
    "\14\0\3\u01d2\17\0\1\u01d3\13\0\1\u01d2\17\0\1\u01d4"+
    "\44\0\1\u01d5\21\0\1\u01d6\57\0\1\u01d7\20\0\1\u01d8"+
    "\40\0\1\u01d9\54\0\1\u01da\22\0\1\u01db\44\0\1\u01dc"+
    "\41\0\1\u01dd\30\0\1\u01de\46\0\1\u01df\33\0\1\u01e0"+
    "\50\0\1\u01e1\30\0\1\u01e2\31\0\1\u01e3\56\0\1\u01e4"+
    "\16\0\1\u01e5\21\0\1\u01e5\26\0\1\u01e6\55\0\1\u01e7"+
    "\7\0\1\u01e8\51\0\1\u01e9\36\0\1\u01ea\23\0\3\u01d2"+
    "\26\0\1\u01eb\4\0\1\u01d2\5\0\1\u01ec\21\0\1\u01ec"+
    "\26\0\1\u01ed\36\0\1\u01ee\27\0\1\u01ef\21\0\1\u01ef"+
    "\27\0\1\u01f0\31\0\1\73\45\0\1\u01f1\30\0\1\u01f2"+
    "\54\0\1\u01f3\31\0\1\u01f4\45\0\1\u01f5\27\0\1\u01f6"+
    "\37\0\1\u01f7\32\0\1\u01f8\46\0\1\u01f9\25\0\1\u01fa"+
    "\21\0\1\u01fa\20\0\1\u01fb\42\0\1\u01fc\30\0\1\u01fd"+
    "\42\0\1\u01fe\51\0\1\u01ff\26\0\1\u0200\33\0\1\u0201"+
    "\43\0\1\u0202\62\0\1\u0203\14\0\1\u0204\37\0\1\u0205"+
    "\54\0\1\u0206\37\0\1\u0207\31\0\1\u0208\30\0\1\u0209"+
    "\3\0\1\u020a\1\0\1\122\1\u020b\45\0\1\u020c\22\0"+
    "\1\u020d\3\0\1\u020e\1\0\1\135\1\u020b\24\0\1\u020f"+
    "\43\0\1\u0210\46\0\1\u0211\30\0\1\u0212\37\0\1\u0213"+
    "\53\0\1\u0214\21\0\1\u0215\44\0\1\u0216\37\0\1\u0217"+
    "\32\0\1\u0218\50\0\1\u0219\33\0\1\u021a\50\0\1\u021b"+
    "\46\0\1\u021c\23\0\1\u021d\44\0\1\u021e\13\0\23\u021f"+
    "\1\0\14\u021f\10\0\1\u0209\3\0\1\101\1\0\1\102"+
    "\46\0\1\u0220\22\0\1\124\3\0\1\125\1\0\1\125"+
    "\12\0\1\127\15\0\1\u0221\1\130\20\0\1\131\14\0"+
    "\1\u0222\41\0\1\u020d\3\0\1\107\1\0\1\110\31\0"+
    "\1\137\3\0\1\140\1\0\1\140\12\0\1\142\15\0"+
    "\1\u0221\1\143\20\0\1\144\17\0\1\u0223\45\0\1\u0224"+
    "\45\0\1\u0225\20\0\1\377\55\0\1\u0226\30\0\1\u0227"+
    "\27\0\1\u0228\21\0\1\u0228\24\0\1\u0229\31\0\1\u022a"+
    "\52\0\1\u022b\43\0\1\u022c\16\0\1\u022d\50\0\1\u022e"+
    "\27\0\1\u022f\21\0\1\u022f\35\0\1\u0230\27\0\1\u0231"+
    "\22\0\23\u021f\1\u0232\14\u021f\14\0\1\u0233\2\0\1\u020b"+
    "\33\0\1\u0234\16\0\1\u0235\25\0\1\u0236\24\0\1\u0237"+
    "\21\0\1\u0237\35\0\1\u0238\31\0\1\226\35\0\1\u0239"+
    "\32\0\1\u023a\37\0\1\u023b\33\0\1\u023c\40\0\1\u023d"+
    "\21\0\1\u023d\14\0\1\u023e\33\0\23\u023f\1\0\14\u023f"+
    "\15\0\1\u0240\32\0\1\u0241\33\0\1\u0242\33\0\23\u0243"+
    "\1\0\14\u0243\10\0\1\u0244\55\0\1\u0245\20\0\1\u0221"+
    "\45\0\1\u0246\54\0\1\u0247\12\0\1\u0248\21\0\1\u0248"+
    "\14\0\1\u0249\33\0\23\u024a\1\0\14\u024a\10\0\1\u024b"+
    "\46\0\1\u024c\26\0\1\u024d\41\0\1\u024e\27\0\23\u023f"+
    "\1\u024f\14\u023f\21\0\1\u0250\35\0\1\u0251\34\0\1\u0252"+
    "\23\0\23\u0243\1\u0253\14\u0243\17\0\1\u0254\25\0\1\u0255"+
    "\21\0\1\u0255\14\0\1\u0256\24\0\1\u0257\12\0\1\u0258"+
    "\24\0\1\u0259\14\0\1\u025a\40\0\1\u025b\30\0\23\u024a"+
    "\1\u025c\14\u024a\17\0\1\u025d\45\0\1\u025e\17\0\1\u025f"+
    "\21\0\1\u025f\36\0\1\u0260\31\0\1\u0261\44\0\1\u0262"+
    "\20\0\1\u0263\57\0\1\u0264\36\0\1\u0265\22\0\1\u0266"+
    "\40\0\1\u0267\27\0\3\u0268\4\0\1\u0269\3\0\1\u026a"+
    "\1\0\1\u026b\4\0\1\u026c\13\0\1\u0268\15\0\1\u026d"+
    "\23\0\3\u026e\4\0\1\u026f\3\0\1\u026a\1\0\1\u026b"+
    "\4\0\1\u026c\13\0\1\u026e\32\0\1\u0270\6\0\3\u0271"+
    "\33\0\1\u0271\26\0\1\u0272\36\0\1\u0273\22\0\1\u0274"+
    "\3\0\1\u0275\1\0\1\334\1\u020b\30\0\1\u0276\34\0"+
    "\1\u0277\21\0\1\u0277\14\0\1\u0278\33\0\23\u0279\1\0"+
    "\14\u0279\5\0\1\u027a\21\0\1\u027a\21\0\1\346\2\0"+
    "\1\347\1\350\2\0\1\351\43\0\1\u027b\20\0\1\u027c"+
    "\21\0\1\u027c\11\0\3\u0268\4\0\1\u0269\3\0\1\u026a"+
    "\1\0\1\u027d\4\0\1\u027e\13\0\1\u0268\10\0\1\u027f"+
    "\3\0\1\u0280\1\0\1\u0281\12\0\1\u0282\16\0\1\u0283"+
    "\20\0\1\u0284\16\0\1\u0280\20\0\1\u0285\13\0\1\u0286"+
    "\21\0\1\u0286\25\0\1\u0287\23\0\3\u026e\4\0\1\u026f"+
    "\3\0\1\u026a\1\0\1\u027d\4\0\1\u027e\13\0\1\u026e"+
    "\10\0\1\u027f\3\0\1\u0280\1\0\1\u0288\12\0\1\u0282"+
    "\16\0\1\u0289\30\0\3\u0271\10\0\1\u028a\2\0\1\u028b"+
    "\1\u028c\16\0\1\u0271\5\0\1\u028d\21\0\1\u028d\20\0"+
    "\1\u0274\3\0\1\305\1\0\1\306\31\0\1\336\3\0"+
    "\1\337\1\0\1\337\12\0\1\341\15\0\1\u0221\1\342"+
    "\20\0\1\343\16\0\1\u028e\27\0\23\u0279\1\u028f\14\u0279"+
    "\10\0\1\u0290\44\0\1\u0291\26\0\1\u0292\43\0\1\u0280"+
    "\2\0\1\u0293\15\0\1\u0285\13\0\1\u0294\21\0\1\u0294"+
    "\24\0\1\u0280\14\0\1\u0295\37\0\1\u0296\26\0\1\u0297"+
    "\10\0\1\u0296\16\0\1\u027f\3\0\1\u0280\1\0\1\u0280"+
    "\31\0\1\u0280\20\0\1\u0298\16\0\1\u0283\37\0\1\u0280"+
    "\37\0\1\u0299\33\0\1\u029a\53\0\1\u029b\10\0\1\u0296"+
    "\21\0\1\u029c\33\0\1\u029d\50\0\1\u029e\27\0\1\u029f"+
    "\37\0\1\u02a0\53\0\1\u02a1\41\0\1\u02a2\35\0\1\u02a3"+
    "\23\0\1\u02a4\36\0\1\u0257\34\0\1\u02a5\43\0\1\u02a6"+
    "\43\0\1\u0280\32\0\1\u02a7\54\0\1\u02a8\22\0\1\u02a9"+
    "\37\0\1\u02aa\51\0\1\u0292\50\0\1\u02ab\14\0\1\u02ac"+
    "\41\0\1\u02ad\52\0\1\u02ae\30\0\1\u02af\27\0\1\u02b0"+
    "\21\0\1\u02b0\25\0\1\u02b1\41\0\1\u02b2\27\0\1\u02b3"+
    "\54\0\1\u02b4\32\0\1\u02b5\35\0\1\u02b6\35\0\1\u02b7"+
    "\43\0\1\u02b8\36\0\1\u02b9\55\0\1\u02ba\7\0\1\u02bb"+
    "\50\0\1\u02bc\32\0\1\u02bd\37\0\1\u02be\37\0\1\u02bf"+
    "\54\0\1\u02c0\25\0\1\u02c1\41\0\1\u02c2\32\0\1\u02c3"+
    "\37\0\1\u02c4\37\0\1\u0259\37\0\1\u02c5\42\0\1\u02c6"+
    "\30\0\1\u02c7\42\0\1\u02c8\40\0\1\u02c9\46\0\1\u02ca"+
    "\44\0\1\u02cb\32\0\1\u02cc\35\0\1\u0171\32\0\1\u02cd"+
    "\37\0\1\u02ce\36\0\1\u0296\47\0\1\u02cf\26\0\1\u0296"+
    "\37\0\1\u02d0\44\0\1\u02d1\37\0\1\u02d2\43\0\1\u02d3"+
    "\45\0\1\u02d4\27\0\1\u02d5\47\0\1\u02d6\13\0\3\u02d7"+
    "\33\0\1\u02d7\17\0\1\u02d8\45\0\1\u02d9\17\0\1\u02da"+
    "\21\0\1\u02da\24\0\1\u02db\31\0\1\u02dc\56\0\1\u02dd"+
    "\24\0\1\u019e\35\0\1\u02de\47\0\1\u01a1\20\0\3\u02d7"+
    "\4\0\1\u02df\26\0\1\u02d7\25\0\1\u02e0\12\0\23\u02e1"+
    "\1\0\14\u02e1\10\0\1\u02e2\33\0\1\u02e3\40\0\1\u02e4"+
    "\21\0\1\u02e4\24\0\1\u01ae\42\0\1\u02e5\36\0\1\u02e6"+
    "\21\0\23\u02e7\1\0\14\u02e7\23\u02e1\1\u02e8\14\u02e1\6\0"+
    "\1\u02e9\41\0\1\u02ea\54\0\1\u02eb\32\0\1\u029b\17\0"+
    "\23\u02e7\1\u02ec\14\u02e7\26\0\1\u02ed\16\0\1\u02ee\21\0"+
    "\1\u02ee\42\0\1\u01eb\33\0\1\u02ef\16\0\1\u02f0\21\0"+
    "\1\u02f0\20\0\1\u02f1\34\0\1\u02f2\21\0\1\u02f2\20\0"+
    "\1\u02f3\37\0\1\u02f4\53\0\1\u02f5\37\0\1\u02f6\30\0"+
    "\1\u02f7\37\0\1\u02f8\32\0\1\u02f9\37\0\1\u02fa\46\0"+
    "\1\u02fb\37\0\1\u02fc\45\0\1\u02fd\37\0\1\u02fe\22\0"+
    "\1\u02ff\3\0\1\u026a\1\0\1\u027d\31\0\1\u02ff\3\0"+
    "\1\u026a\1\0\1\u026b\31\0\1\u027f\3\0\1\u0280\1\0"+
    "\1\u0280\12\0\1\u0282\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\1\1\1\11\2\1\24\0"+
    "\1\1\1\11\11\0\1\11\4\0\1\1\1\0\1\1"+
    "\36\0\2\1\1\0\1\1\7\0\2\1\1\0\1\1"+
    "\21\0\1\1\1\0\1\1\5\0\1\1\1\0\1\1"+
    "\13\0\1\1\41\0\1\1\37\0\1\11\21\0\2\1"+
    "\1\0\1\1\34\0\1\1\1\0\1\1\42\0\1\11"+
    "\33\0\1\11\57\0\1\11\3\0\1\11\10\0\1\1"+
    "\20\0\1\11\62\0\1\11\24\0\1\11\1\0\1\11"+
    "\142\0\1\11\2\0\1\11\17\0\1\11\10\0\1\1"+
    "\1\0\1\1\11\0\1\11\22\0\1\11\1\0\1\11"+
    "\7\0\2\1\1\0\1\1\4\0\1\1\15\0\1\11"+
    "\1\0\1\1\111\0\1\11\7\0\1\11\6\0\1\11"+
    "\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[767];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	private StringBuilder output = new StringBuilder();

	public String getOutput() {
		return output.toString();
	}
	
	private String openTag = "<font color=\"cyan\"><LK:EMANANTE";  
	private String closeTag = "</LK:EMANANTE></font>"; 
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EmanantiPrincipali(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 30: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 31: break;
        case 3: 
          { 
          }
        case 32: break;
        case 4: 
          { output.append(yytext()); yybegin(AH);
          }
        case 33: break;
        case 5: 
          { output.append(yytext()); yybegin(LK);
          }
        case 34: break;
        case 6: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 35: break;
        case 7: 
          { output.append(openTag + " value=\"consiglio.europeo\">" + yytext() + closeTag);
          }
        case 36: break;
        case 8: 
          { output.append(openTag + " value=\"commissione.europea\">" + yytext() + closeTag);
          }
        case 37: break;
        case 9: 
          { output.append(openTag + " value=\"parlamento.europeo\">" + yytext() + closeTag);
          }
        case 38: break;
        case 10: 
          { output.append(openTag + " value=\"capo.governo\">" + yytext() + closeTag);
          }
        case 39: break;
        case 11: 
          { output.append(openTag + " value=\"giunta.comune.\">" + yytext() + closeTag);
          }
        case 40: break;
        case 12: 
          { output.append(openTag + " value=\"giunta.regione.\">" + yytext() + closeTag);
          }
        case 41: break;
        case 13: 
          { output.append(openTag + " value=\"giunta.provincia.\">" + yytext() + closeTag);
          }
        case 42: break;
        case 14: 
          { output.append(openTag + " value=\"consiglio.comune.\">" + yytext() + closeTag);
          }
        case 43: break;
        case 15: 
          { output.append(openTag + " value=\"ufficio.presidenza\">" + yytext() + closeTag);
          }
        case 44: break;
        case 16: 
          { output.append(openTag + " value=\"consiglio.regione.\">" + yytext() + closeTag);
          }
        case 45: break;
        case 17: 
          { output.append(openTag + " value=\"consiglio.provincia.\">" + yytext() + closeTag);
          }
        case 46: break;
        case 18: 
          { output.append(openTag + " value=\"presidente.repubblica\">" + yytext() + closeTag);
          }
        case 47: break;
        case 19: 
          { output.append(openTag + " value=\"capo.provvisorio.stato\">" + yytext() + closeTag);
          }
        case 48: break;
        case 20: 
          { output.append(openTag + " value=\"presidente.giunta.comune.\">" + yytext() + closeTag);
          }
        case 49: break;
        case 21: 
          { output.append(openTag + " value=\"presidente.camera.deputati\">" + yytext() + closeTag);
          }
        case 50: break;
        case 22: 
          { output.append(openTag + " value=\"presidente.giunta.regione.\">" + yytext() + closeTag);
          }
        case 51: break;
        case 23: 
          { output.append(openTag + " value=\"unione.europea\">" + yytext() + closeTag);
          }
        case 52: break;
        case 24: 
          { output.append(openTag + " value=\"presidente.senato.repubblica\">" + yytext() + closeTag);
          }
        case 53: break;
        case 25: 
          { output.append(openTag + " value=\"presidente.giunta.provincia.\">" + yytext() + closeTag);
          }
        case 54: break;
        case 26: 
          { output.append(openTag + " value=\"presidente.consiglio.ministri\">" + yytext() + closeTag);
          }
        case 55: break;
        case 27: 
          { output.append(openTag + " value=\"presidente.consiglio.comune.\">" + yytext() + closeTag);
          }
        case 56: break;
        case 28: 
          { output.append(openTag + " value=\"presidente.consiglio.regione.\">" + yytext() + closeTag);
          }
        case 57: break;
        case 29: 
          { output.append(openTag + " value=\"presidente.consiglio.provincia.\">" + yytext() + closeTag);
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java EmanantiPrincipali [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        EmanantiPrincipali scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new EmanantiPrincipali(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
