/*******************************************************************************
 * Copyright (c) 2016 ITTIG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL license v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Contributors:
 *     ITTIG
 *******************************************************************************/
/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>IgnoraNumeri.jflex</tt>
 */
public class IgnoraNumeri {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AH = 2;
  public static final int LK = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\53\1\54\1\1\22\0\1\5\3\0\1\35"+
    "\1\50\1\0\1\0\4\0\1\6\1\0\1\44\1\32\12\4\2\0"+
    "\1\30\1\0\1\31\2\0\1\12\1\3\1\20\1\16\1\14\1\27"+
    "\1\15\1\47\1\10\1\3\1\34\1\33\1\43\1\17\1\13\1\24"+
    "\1\51\1\25\1\22\1\26\1\23\1\52\1\3\1\3\2\3\4\0"+
    "\1\0\1\0\1\36\1\3\1\20\1\16\1\37\1\27\1\15\1\47"+
    "\1\40\1\3\1\46\1\11\1\43\1\17\1\41\1\24\1\51\1\25"+
    "\1\42\1\26\1\23\1\52\1\3\1\3\2\3\12\0\1\53\35\0"+
    "\1\35\20\0\1\0\13\0\2\0\6\0\2\0\2\0\2\0\4\0"+
    "\2\0\5\0\2\0\5\0\2\0\6\0\2\0\2\0\2\0\4\0"+
    "\2\0\5\0\2\0\65\0\2\7\115\0\1\21\u1e93\0\1\0\1\0"+
    "\4\0\1\0\16\0\1\53\1\53\202\0\1\35\175\0\1\45\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\21\1\1\3\2\4\2\1\1\5"+
    "\1\0\1\2\11\0\1\5\26\0\1\5\15\0\1\2"+
    "\1\5\2\0\1\5\7\0\1\5\20\0\1\6\1\7"+
    "\1\0\1\5\15\0\1\2\1\0\1\5\32\0\2\5"+
    "\5\0\1\10\5\0\1\5\2\0\1\5\23\0\2\5"+
    "\4\0\1\5\4\0\1\5\16\0\1\5\2\0\2\5"+
    "\13\0\1\5\24\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\207\0\u0438\0\207\0\u0465\0\u0492\0\341\0\u04bf\0\u04ec"+
    "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"+
    "\0\u0681\0\207\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u032a\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0384"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0465\0\u0b40"+
    "\0\u0492\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u097e\0\207\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329"+
    "\0\u1356\0\u0e6a\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc"+
    "\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734"+
    "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"+
    "\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04"+
    "\0\207\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f"+
    "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"+
    "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u040b\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2"+
    "\0\u20df\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a"+
    "\0\u2247\0\u2274\0\u22a1\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382"+
    "\0\u23af\0\u23dc\0\u2409\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea"+
    "\0\u2517\0\u2544\0\u2571\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652"+
    "\0\u267f\0\u26ac\0\u26d9\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba"+
    "\0\u27e7\0\u2814\0\u2841\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922"+
    "\0\u294f\0\u297c\0\u29a9\0\u29d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\2\4\1\10\1\11"+
    "\1\12\2\6\1\13\1\14\1\15\1\6\1\16\1\17"+
    "\1\20\1\21\1\22\3\6\1\23\2\4\1\12\1\24"+
    "\1\25\1\6\1\13\1\11\1\6\1\20\1\26\1\4"+
    "\1\27\1\24\1\6\1\30\2\6\2\31\1\4\1\32"+
    "\1\33\25\4\1\34\22\4\2\31\1\4\1\32\1\33"+
    "\25\4\1\35\22\4\2\31\57\0\1\4\56\0\1\36"+
    "\51\0\2\37\1\0\1\40\1\37\1\41\2\0\1\42"+
    "\2\0\1\43\1\44\1\45\1\0\1\46\2\47\1\0"+
    "\1\50\6\0\1\42\1\51\1\52\1\0\1\43\2\0"+
    "\1\47\1\53\1\54\2\51\1\0\1\52\3\0\1\37"+
    "\17\0\1\55\41\0\1\36\12\0\1\55\41\0\1\36"+
    "\2\0\2\56\27\0\1\56\20\0\1\36\16\0\1\57"+
    "\25\0\1\60\7\0\1\36\20\0\1\61\33\0\1\36"+
    "\6\0\1\62\25\0\1\62\17\0\1\36\7\0\1\63"+
    "\22\0\1\63\7\0\1\64\30\0\1\65\2\0\1\66"+
    "\32\0\1\36\16\0\1\65\2\0\1\66\32\0\1\36"+
    "\10\0\1\67\43\0\1\36\5\0\1\70\1\71\1\72"+
    "\21\0\1\70\1\72\1\0\1\71\14\0\2\73\2\0"+
    "\1\73\4\0\1\74\20\0\1\75\2\0\1\74\15\0"+
    "\1\73\4\0\1\36\2\0\2\76\4\0\1\77\22\0"+
    "\1\76\2\0\1\100\12\0\2\100\1\0\1\101\1\100"+
    "\46\0\1\100\4\0\1\36\2\0\2\102\1\103\1\104"+
    "\1\0\1\105\16\0\1\103\2\0\1\104\1\105\1\102"+
    "\23\0\2\76\4\0\1\77\22\0\1\76\2\0\1\100"+
    "\12\0\2\106\1\0\1\101\1\106\46\0\1\106\2\0"+
    "\1\33\53\0\2\107\2\0\1\107\24\0\1\110\21\0"+
    "\1\107\1\0\2\111\2\0\1\111\24\0\1\112\21\0"+
    "\1\111\1\0\2\37\2\0\1\37\3\0\1\42\1\113"+
    "\1\0\1\43\1\114\1\45\1\0\1\46\2\115\1\0"+
    "\1\50\6\0\1\42\1\51\1\52\1\113\1\43\2\0"+
    "\1\115\1\116\1\0\2\51\1\0\1\52\3\0\1\37"+
    "\1\0\2\37\1\0\1\117\1\37\1\41\2\0\1\42"+
    "\2\0\1\43\1\44\1\45\1\0\1\46\2\47\1\0"+
    "\1\50\6\0\1\42\1\51\1\52\1\0\1\43\2\0"+
    "\1\47\1\53\1\54\2\51\1\0\1\52\3\0\1\37"+
    "\4\0\1\120\57\0\2\121\27\0\1\121\37\0\1\122"+
    "\56\0\1\123\42\0\1\124\25\0\1\124\27\0\1\125"+
    "\22\0\1\125\7\0\1\126\33\0\1\127\41\0\1\130"+
    "\1\131\22\0\1\131\1\0\1\130\22\0\2\132\4\0"+
    "\1\133\22\0\1\132\2\0\1\52\20\0\2\134\1\135"+
    "\2\0\1\136\16\0\1\135\3\0\1\136\1\134\20\0"+
    "\1\137\77\0\1\140\52\0\1\141\54\0\1\142\52\0"+
    "\1\143\32\0\2\100\1\0\1\101\1\100\4\0\1\144"+
    "\23\0\1\144\5\0\1\100\7\0\1\100\11\0\1\145"+
    "\21\0\1\145\40\0\1\146\44\0\2\76\27\0\1\76"+
    "\40\0\1\140\44\0\1\147\22\0\1\147\40\0\1\150"+
    "\46\0\1\151\62\0\1\152\56\0\1\153\30\0\2\154"+
    "\2\0\1\154\46\0\1\154\34\0\1\155\31\0\1\156"+
    "\21\0\1\156\22\0\2\100\1\0\1\101\1\100\36\0"+
    "\1\100\7\0\1\100\4\0\1\157\1\0\1\160\35\0"+
    "\1\160\21\0\1\161\5\0\1\162\13\0\1\161\37\0"+
    "\2\77\52\0\1\163\65\0\1\164\27\0\2\106\1\0"+
    "\1\101\1\106\10\0\1\165\35\0\1\106\12\0\1\166"+
    "\23\0\1\166\51\0\1\167\40\0\1\170\44\0\2\171"+
    "\4\0\1\172\7\0\1\123\12\0\1\171\30\0\1\173"+
    "\11\0\1\127\10\0\1\173\24\0\2\134\1\135\2\0"+
    "\1\174\16\0\1\135\3\0\1\174\1\134\15\0\2\37"+
    "\1\0\1\175\1\37\1\41\2\0\1\42\2\0\1\43"+
    "\1\44\1\45\1\0\1\46\2\47\1\0\1\50\6\0"+
    "\1\42\1\51\1\52\1\0\1\43\2\0\1\47\1\53"+
    "\1\54\2\51\1\0\1\52\3\0\1\37\1\0\2\176"+
    "\1\0\1\177\1\176\1\54\2\0\1\42\2\0\1\43"+
    "\1\44\1\45\1\0\1\46\2\47\1\0\1\50\6\0"+
    "\1\42\1\51\1\52\1\0\1\43\2\0\1\47\1\53"+
    "\1\54\2\51\1\0\1\52\3\0\1\176\25\0\1\200"+
    "\54\0\1\201\41\0\1\202\23\0\1\202\5\0\1\52"+
    "\21\0\1\203\21\0\1\203\40\0\1\204\44\0\2\132"+
    "\27\0\1\132\30\0\1\205\22\0\1\205\40\0\1\206"+
    "\56\0\1\207\40\0\1\210\21\0\1\210\65\0\1\52"+
    "\21\0\1\211\21\0\1\211\37\0\2\133\63\0\1\212"+
    "\27\0\2\176\1\0\1\213\1\176\1\54\2\0\1\42"+
    "\2\0\1\43\1\44\1\45\1\0\1\46\2\47\1\0"+
    "\1\50\6\0\1\42\1\51\1\52\1\0\1\43\2\0"+
    "\1\47\1\53\1\54\2\51\1\0\1\52\3\0\1\176"+
    "\14\0\1\214\22\0\1\214\53\0\2\100\30\0\1\100"+
    "\25\0\1\100\22\0\2\215\27\0\1\215\57\0\1\216"+
    "\22\0\1\217\21\0\1\217\47\0\1\220\53\0\1\221"+
    "\41\0\1\222\23\0\1\222\25\0\2\223\4\0\1\224"+
    "\22\0\1\223\3\0\1\225\27\0\1\226\36\0\2\227"+
    "\2\0\1\227\12\0\1\230\33\0\1\227\13\0\1\231"+
    "\25\0\1\231\17\0\1\232\1\0\1\160\35\0\1\160"+
    "\14\0\1\233\57\0\2\234\27\0\1\234\27\0\1\235"+
    "\25\0\1\235\30\0\1\236\64\0\1\237\43\0\1\240"+
    "\22\0\1\240\46\0\1\241\57\0\1\241\37\0\1\242"+
    "\50\0\1\243\25\0\1\243\41\0\1\244\47\0\2\242"+
    "\3\0\1\212\13\0\1\242\13\0\2\37\1\0\1\175"+
    "\1\37\1\245\2\0\1\42\2\0\1\43\1\44\1\45"+
    "\1\0\1\46\2\47\1\0\1\50\6\0\1\42\1\51"+
    "\1\52\1\0\1\43\2\0\1\47\1\53\1\246\2\51"+
    "\1\0\1\52\3\0\1\37\1\0\2\176\2\0\1\176"+
    "\3\0\1\42\2\0\1\43\1\44\1\45\1\0\1\46"+
    "\2\47\1\0\1\50\6\0\1\42\1\51\1\52\1\0"+
    "\1\43\2\0\1\47\1\53\1\0\2\51\1\0\1\52"+
    "\3\0\1\176\1\0\2\176\1\0\1\247\1\176\1\54"+
    "\2\0\1\42\2\0\1\43\1\44\1\45\1\0\1\46"+
    "\2\47\1\0\1\50\6\0\1\42\1\51\1\52\1\0"+
    "\1\43\2\0\1\47\1\53\1\54\2\51\1\0\1\52"+
    "\3\0\1\176\36\0\2\52\30\0\1\52\25\0\1\52"+
    "\56\0\1\250\22\0\1\251\21\0\1\251\47\0\1\252"+
    "\53\0\1\253\46\0\1\254\36\0\2\255\2\0\1\255"+
    "\12\0\1\256\33\0\1\255\13\0\1\257\25\0\1\257"+
    "\22\0\2\260\27\0\1\260\41\0\1\242\30\0\2\176"+
    "\1\0\1\261\1\176\1\54\2\0\1\42\2\0\1\43"+
    "\1\44\1\45\1\0\1\46\2\47\1\0\1\50\6\0"+
    "\1\42\1\51\1\52\1\0\1\43\2\0\1\47\1\53"+
    "\1\54\2\51\1\0\1\52\3\0\1\176\25\0\1\236"+
    "\101\0\1\262\45\0\1\237\23\0\1\263\23\0\1\263"+
    "\17\0\2\100\1\0\1\101\1\100\6\0\1\264\4\0"+
    "\2\100\14\0\1\264\2\0\1\100\11\0\1\100\11\0"+
    "\1\265\21\0\1\265\32\0\1\266\21\0\1\266\40\0"+
    "\1\267\101\0\1\225\11\0\2\225\1\0\1\36\1\225"+
    "\46\0\1\225\16\0\1\270\37\0\2\227\2\0\1\227"+
    "\12\0\1\271\33\0\1\227\14\0\1\272\22\0\1\272"+
    "\4\0\1\273\25\0\1\274\25\0\1\275\15\0\1\276"+
    "\1\0\1\160\35\0\1\160\14\0\1\277\1\0\1\160"+
    "\35\0\1\160\22\0\1\300\1\301\22\0\1\300\2\0"+
    "\1\301\40\0\1\266\36\0\2\162\27\0\1\162\23\0"+
    "\2\100\27\0\1\100\25\0\1\302\21\0\1\302\30\0"+
    "\2\52\27\0\1\52\41\0\1\170\55\0\1\303\32\0"+
    "\1\304\54\0\1\305\51\0\2\176\1\0\1\36\1\176"+
    "\1\54\2\0\1\42\2\0\1\43\1\44\1\45\1\0"+
    "\1\46\2\47\1\0\1\50\6\0\1\42\1\51\1\52"+
    "\1\0\1\43\2\0\1\47\1\53\1\54\2\51\1\0"+
    "\1\52\3\0\1\176\43\0\1\242\23\0\1\306\23\0"+
    "\1\306\32\0\1\307\4\0\2\52\14\0\1\307\2\0"+
    "\1\52\23\0\1\310\21\0\1\310\37\0\1\311\37\0"+
    "\2\255\2\0\1\255\12\0\1\312\33\0\1\255\14\0"+
    "\1\313\22\0\1\313\4\0\1\52\25\0\1\314\25\0"+
    "\1\315\23\0\1\316\1\170\22\0\1\316\2\0\1\170"+
    "\14\0\2\176\2\0\1\176\1\54\2\0\1\42\2\0"+
    "\1\43\1\44\1\45\1\0\1\46\2\47\1\0\1\50"+
    "\6\0\1\42\1\51\1\52\1\0\1\43\2\0\1\47"+
    "\1\53\1\54\2\51\1\0\1\52\3\0\1\176\12\0"+
    "\1\317\23\0\1\317\43\0\1\320\50\0\2\321\17\0"+
    "\1\321\21\0\2\322\27\0\1\322\53\0\2\323\26\0"+
    "\1\225\23\0\1\225\17\0\2\100\1\0\1\101\1\100"+
    "\13\0\2\100\17\0\1\100\11\0\1\100\14\0\1\324"+
    "\22\0\1\324\34\0\1\325\62\0\1\326\43\0\1\105"+
    "\22\0\1\105\21\0\1\276\1\0\1\327\35\0\1\327"+
    "\14\0\1\330\1\0\1\160\35\0\1\160\35\0\1\331"+
    "\46\0\1\237\36\0\2\225\2\0\1\225\46\0\1\225"+
    "\7\0\2\332\27\0\1\332\15\0\2\176\1\0\1\333"+
    "\1\176\3\0\1\42\2\0\1\43\1\44\1\45\1\0"+
    "\1\46\2\47\1\0\1\50\6\0\1\42\1\51\1\52"+
    "\1\0\1\43\2\0\1\47\1\53\1\0\2\51\1\0"+
    "\1\52\3\0\1\176\1\0\2\176\1\0\2\176\3\0"+
    "\1\42\2\0\1\43\1\44\1\45\1\0\1\46\2\47"+
    "\1\0\1\50\6\0\1\42\1\51\1\52\1\0\1\43"+
    "\2\0\1\47\1\53\1\0\2\51\1\0\1\52\3\0"+
    "\1\176\25\0\1\334\50\0\2\335\17\0\1\335\21\0"+
    "\2\336\27\0\1\336\35\0\2\52\17\0\1\52\26\0"+
    "\1\337\22\0\1\337\34\0\1\340\62\0\1\341\43\0"+
    "\1\136\22\0\1\136\42\0\1\342\40\0\1\343\21\0"+
    "\1\343\22\0\2\100\1\0\1\101\1\100\32\0\3\100"+
    "\11\0\1\100\7\0\2\344\27\0\1\344\33\0\1\141"+
    "\36\0\2\345\2\0\1\345\46\0\1\345\17\0\1\346"+
    "\63\0\1\347\40\0\1\144\23\0\1\144\22\0\1\350"+
    "\56\0\1\160\35\0\1\160\26\0\1\237\101\0\1\351"+
    "\12\0\2\176\1\0\1\36\1\176\3\0\1\42\2\0"+
    "\1\43\1\44\1\45\1\0\1\46\2\47\1\0\1\50"+
    "\6\0\1\42\1\51\1\52\1\0\1\43\2\0\1\47"+
    "\1\53\1\0\2\51\1\0\1\52\3\0\1\176\40\0"+
    "\3\52\21\0\2\352\27\0\1\352\33\0\1\200\54\0"+
    "\1\353\63\0\1\354\40\0\1\202\23\0\1\202\34\0"+
    "\1\242\52\0\1\355\22\0\1\355\60\0\1\356\12\0"+
    "\2\345\2\0\1\345\4\0\1\357\3\0\1\360\17\0"+
    "\1\357\15\0\1\345\26\0\1\361\51\0\1\362\35\0"+
    "\1\52\62\0\1\363\23\0\1\363\61\0\1\364\37\0"+
    "\1\201\51\0\1\365\50\0\1\366\75\0\2\100\14\0"+
    "\2\225\2\0\1\225\1\0\3\302\21\0\1\302\4\0"+
    "\1\302\13\0\1\225\7\0\2\302\3\0\1\367\22\0"+
    "\1\367\1\302\27\0\1\273\25\0\1\273\25\0\1\370"+
    "\23\0\1\370\35\0\1\371\75\0\2\52\25\0\1\372"+
    "\23\0\1\372\44\0\1\266\35\0\3\302\21\0\1\302"+
    "\4\0\1\302\25\0\1\373\21\0\1\373\35\0\1\52"+
    "\22\0\1\52\26\0\1\374\21\0\1\374\60\0\2\273"+
    "\53\0\2\52\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\1\11\1\1\1\11\3\1\1\0"+
    "\1\1\11\0\1\11\26\0\1\1\15\0\2\1\2\0"+
    "\1\1\7\0\1\1\20\0\1\1\1\11\1\0\1\1"+
    "\15\0\1\1\1\0\1\1\32\0\2\1\5\0\1\11"+
    "\5\0\1\1\2\0\1\1\23\0\2\1\4\0\1\1"+
    "\4\0\1\1\16\0\1\1\2\0\2\1\13\0\1\1"+
    "\24\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	private String ignTagStart = ""; // "<IGNORE>";
	private String ignTagEnd = ""; //"</IGNORE>";
	
	private StringBuilder output = new StringBuilder();

	boolean debug = false;
	
	public void setDebug(boolean deb) {
		debug = deb;
	}
	
	public String getOutput() {
		return output.toString();
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IgnoraNumeri(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 9: break;
        case 2: 
          { if(debug) {
						output.append("<strong>" + yytext() + "</strong>"); 
					} else {
						output.append( yytext() );
					}
          }
        case 10: break;
        case 3: 
          { System.out.print(yytext());
          }
        case 11: break;
        case 4: 
          { 
          }
        case 12: break;
        case 5: 
          { output.append(ignTagStart + yytext() + ignTagEnd);
          }
        case 13: break;
        case 6: 
          { output.append(yytext()); yybegin(AH);
          }
        case 14: break;
        case 7: 
          { output.append(yytext()); yybegin(LK);
          }
        case 15: break;
        case 8: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java IgnoraNumeri [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        IgnoraNumeri scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new IgnoraNumeri(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
