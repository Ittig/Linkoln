/*******************************************************************************
 * Copyright (c) 2016 Institute of Legal Information Theory and Techniques (ITTIG).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL license v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Contributors: 
 *   Institute of Legal Information Theory and Techniques (ITTIG/CNR)
 *******************************************************************************/
/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>RiferimentiAutorita.jflex</tt>
 */
public class RiferimentiAutorita extends Riferimenti {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int s50 = 2;
  public static final int AH = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\33\1\34\1\1\22\0\1\4\6\0\1\3"+
    "\4\0\1\5\1\0\1\0\1\26\12\0\1\30\1\0\1\24\1\0"+
    "\1\25\2\0\1\10\1\0\1\16\1\14\1\12\1\23\1\13\1\0"+
    "\1\6\1\0\1\27\1\7\1\31\1\15\1\11\1\20\1\0\1\21"+
    "\1\0\1\22\1\17\2\0\1\0\1\0\1\32\4\0\1\0\1\3"+
    "\1\10\1\0\1\16\1\14\1\12\1\23\1\13\1\0\1\6\1\0"+
    "\1\27\1\7\1\31\1\15\1\11\1\20\1\0\1\21\1\0\1\22"+
    "\1\17\2\0\1\0\1\0\1\32\12\0\1\33\56\0\1\3\13\0"+
    "\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0\2\0\5\0"+
    "\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0\2\0\65\0"+
    "\2\6\115\0\1\0\u1e93\0\1\0\1\0\4\0\1\3\16\0\1\33"+
    "\1\33\u0100\0\1\27\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\2\3\2\4\1\1\11\0\1\5"+
    "\10\0\1\6\u019a\0\1\7\265\0\1\7\222\0\1\10"+
    "\120\0\1\10\203\0\1\10\62\0\1\10\124\0\1\11"+
    "\2\0\1\7\51\0\2\10\3\0\1\7\21\0\1\10"+
    "\36\0\1\11\24\0\1\7\77\0\1\10\2\0\1\10"+
    "\3\0\1\7\11\0\1\10\55\0\1\11\1\7\14\0"+
    "\1\11\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[1382];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\127\0\127"+
    "\0\256\0\313\0\127\0\350\0\u0105\0\u0122\0\u013f\0\u015c"+
    "\0\u0179\0\u0196\0\350\0\u01b3\0\u01d0\0\u013f\0\u01ed\0\u020a"+
    "\0\u0227\0\u0244\0\u0261\0\u027e\0\u029b\0\u02b8\0\127\0\u02d5"+
    "\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u03a0\0\u03bd"+
    "\0\u03da\0\u03f7\0\u0414\0\u0431\0\u044e\0\u046b\0\u0488\0\u04a5"+
    "\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d"+
    "\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675"+
    "\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d"+
    "\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845"+
    "\0\u0862\0\u087f\0\u089c\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d"+
    "\0\u094a\0\u0967\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15"+
    "\0\u0a32\0\u0a4f\0\u0a6c\0\u0a89\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd"+
    "\0\u0b1a\0\u0b37\0\u0b54\0\u0b71\0\u0b8e\0\u0bab\0\u0bc8\0\u0be5"+
    "\0\u0c02\0\u0c1f\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd"+
    "\0\u0cea\0\u0d07\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5"+
    "\0\u0dd2\0\u0def\0\u0e0c\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d"+
    "\0\u0eba\0\u0ed7\0\u0ef4\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85"+
    "\0\u0fa2\0\u0fbf\0\u0fdc\0\u0ff9\0\u1016\0\u1033\0\u1050\0\u106d"+
    "\0\u108a\0\u10a7\0\u10c4\0\u10e1\0\u10fe\0\u111b\0\u1138\0\u1155"+
    "\0\u1172\0\u118f\0\u11ac\0\u11c9\0\u11e6\0\u1203\0\u1220\0\u123d"+
    "\0\u125a\0\u1277\0\u1294\0\u12b1\0\u12ce\0\u12eb\0\u1308\0\u1325"+
    "\0\u1342\0\u135f\0\u137c\0\u1399\0\u13b6\0\u13d3\0\u13f0\0\u140d"+
    "\0\u142a\0\u1447\0\u1464\0\u1481\0\u149e\0\u14bb\0\u14d8\0\u14f5"+
    "\0\u1512\0\u152f\0\u154c\0\u1569\0\u1586\0\u15a3\0\u15c0\0\u15dd"+
    "\0\u15fa\0\u1617\0\u1634\0\u1651\0\u166e\0\u168b\0\u16a8\0\u16c5"+
    "\0\u16e2\0\u16ff\0\u171c\0\u1739\0\u1756\0\u1773\0\u1790\0\u17ad"+
    "\0\u17ca\0\u17e7\0\u1804\0\u1821\0\u183e\0\u185b\0\u1878\0\u1895"+
    "\0\u18b2\0\u18cf\0\u18ec\0\u1909\0\u1926\0\u1943\0\u1960\0\u197d"+
    "\0\u199a\0\u19b7\0\u19d4\0\u19f1\0\u1a0e\0\u1a2b\0\u1a48\0\u1a65"+
    "\0\u1a82\0\u1a9f\0\u1abc\0\u1ad9\0\u1af6\0\u1b13\0\u1b30\0\u1b4d"+
    "\0\u1b6a\0\u1b87\0\u1ba4\0\u1bc1\0\u1bde\0\u1bfb\0\u1c18\0\u1c35"+
    "\0\u1c52\0\u1c6f\0\u1c8c\0\u1ca9\0\u1cc6\0\u1ce3\0\u1d00\0\u1d1d"+
    "\0\u1d3a\0\u1d57\0\u1d74\0\u1d91\0\u1dae\0\u1dcb\0\u1de8\0\u1e05"+
    "\0\u1e22\0\u1e3f\0\u1e5c\0\u1e79\0\u1e96\0\u1eb3\0\u1ed0\0\u1eed"+
    "\0\u1f0a\0\u1f27\0\u1f44\0\u1f61\0\u1f7e\0\u1f9b\0\u1fb8\0\u1fd5"+
    "\0\u1ff2\0\u200f\0\u202c\0\u2049\0\u2066\0\u2083\0\u20a0\0\u20bd"+
    "\0\u20da\0\u20f7\0\u2114\0\u2131\0\u214e\0\u216b\0\u2188\0\u21a5"+
    "\0\u21c2\0\u21df\0\u21fc\0\u2219\0\u2236\0\u2253\0\u2270\0\u228d"+
    "\0\u22aa\0\u22c7\0\u22e4\0\u2301\0\u231e\0\u233b\0\u2358\0\u2375"+
    "\0\u2392\0\u23af\0\u23cc\0\u23e9\0\u2406\0\u2423\0\u2440\0\u245d"+
    "\0\u247a\0\u2497\0\u24b4\0\u24d1\0\u24ee\0\u250b\0\u2528\0\u2545"+
    "\0\u2562\0\u257f\0\u259c\0\u25b9\0\u25d6\0\u25f3\0\u2610\0\u262d"+
    "\0\u264a\0\u2667\0\u2684\0\u26a1\0\u26be\0\u26db\0\u26f8\0\u2715"+
    "\0\u2732\0\u274f\0\u276c\0\u2789\0\u27a6\0\u27c3\0\u27e0\0\u27fd"+
    "\0\u281a\0\u2837\0\u2854\0\u2871\0\u288e\0\u28ab\0\u28c8\0\u28e5"+
    "\0\u2902\0\u291f\0\u293c\0\u2959\0\u2976\0\u2993\0\u29b0\0\u29cd"+
    "\0\u29ea\0\u2a07\0\u2a24\0\u2a41\0\u2a5e\0\u2a7b\0\u2a98\0\u2ab5"+
    "\0\u2ad2\0\u2aef\0\u2b0c\0\u2b29\0\u2b46\0\u2b63\0\u2b80\0\u2b9d"+
    "\0\u2bba\0\u2bd7\0\u2bf4\0\u2c11\0\u2c2e\0\u2c4b\0\u2c68\0\u2c85"+
    "\0\u2ca2\0\u2cbf\0\u2cdc\0\u2cf9\0\u2d16\0\u2d33\0\u2d50\0\u2d6d"+
    "\0\u2d8a\0\u2da7\0\u2dc4\0\u2de1\0\u2dfe\0\u2e1b\0\u2e38\0\u2e55"+
    "\0\u2e72\0\u2e8f\0\u2eac\0\u2ec9\0\u2ee6\0\u2f03\0\u2f20\0\u2f3d"+
    "\0\u2f5a\0\u2f77\0\u2f94\0\u2fb1\0\u2fce\0\u2feb\0\u3008\0\u3025"+
    "\0\u3042\0\u305f\0\u307c\0\u3099\0\u30b6\0\u30d3\0\u30f0\0\u310d"+
    "\0\u312a\0\u3147\0\u3164\0\u3181\0\u319e\0\u31bb\0\u31d8\0\u31f5"+
    "\0\u3212\0\u322f\0\u324c\0\u3269\0\u3286\0\u32a3\0\u32c0\0\u32dd"+
    "\0\u32fa\0\u3317\0\u3334\0\u3351\0\u336e\0\u338b\0\u33a8\0\u33c5"+
    "\0\u33e2\0\u33ff\0\u341c\0\u3439\0\u3456\0\u3473\0\u3490\0\u34ad"+
    "\0\u34ca\0\u34e7\0\u3504\0\u3521\0\u353e\0\u355b\0\u3578\0\u3595"+
    "\0\u35b2\0\u35cf\0\u35ec\0\u3609\0\u3626\0\u3643\0\u3660\0\u367d"+
    "\0\u369a\0\u36b7\0\u36d4\0\u36f1\0\u370e\0\u372b\0\u3748\0\u3765"+
    "\0\u3782\0\u379f\0\u37bc\0\u37d9\0\u37f6\0\u3813\0\u3830\0\u384d"+
    "\0\u386a\0\u3887\0\u38a4\0\u38c1\0\u38de\0\u38fb\0\u3918\0\u3935"+
    "\0\u3952\0\u396f\0\u398c\0\u39a9\0\u39c6\0\u39e3\0\u3a00\0\u3a1d"+
    "\0\u3a3a\0\u3a57\0\u3a74\0\u3a91\0\u3aae\0\u3acb\0\u3ae8\0\u3b05"+
    "\0\u3b22\0\u3b3f\0\u3b5c\0\u3b79\0\u3b96\0\u3bb3\0\u3bd0\0\u3bed"+
    "\0\u3c0a\0\u3c27\0\u3c44\0\u3c61\0\u3c7e\0\u3c9b\0\u3cb8\0\u3cd5"+
    "\0\u3cf2\0\u3d0f\0\u3d2c\0\u3d49\0\u3d66\0\u3d83\0\u3da0\0\u3dbd"+
    "\0\u3dda\0\u3df7\0\u3e14\0\u3e31\0\u3e4e\0\u3e6b\0\u3e88\0\u3ea5"+
    "\0\u3ec2\0\u3edf\0\u3efc\0\u3f19\0\u3f36\0\u3f53\0\u3f70\0\u3f8d"+
    "\0\u3faa\0\u3fc7\0\u3fe4\0\u4001\0\u401e\0\u403b\0\u4058\0\u4075"+
    "\0\u4092\0\u40af\0\u40cc\0\u40e9\0\u4106\0\u4123\0\u4140\0\u415d"+
    "\0\u417a\0\u4197\0\u41b4\0\u41d1\0\u41ee\0\u420b\0\u4228\0\u4245"+
    "\0\u4262\0\u427f\0\u429c\0\u42b9\0\u42d6\0\u42f3\0\u4310\0\u432d"+
    "\0\u434a\0\u4367\0\u4384\0\u43a1\0\u43be\0\u43db\0\u43f8\0\u4415"+
    "\0\u4432\0\u444f\0\u446c\0\u4489\0\u44a6\0\u44c3\0\u44e0\0\u44fd"+
    "\0\u451a\0\u4537\0\u4554\0\u4571\0\u458e\0\u45ab\0\u45c8\0\u32dd"+
    "\0\u45e5\0\u4602\0\u461f\0\u463c\0\u4659\0\u4676\0\u4693\0\u46b0"+
    "\0\u46cd\0\u46ea\0\u4707\0\u4724\0\u4741\0\u475e\0\u477b\0\u4798"+
    "\0\u47b5\0\u47d2\0\u47ef\0\u480c\0\u4829\0\u4846\0\u4863\0\u4880"+
    "\0\u489d\0\u48ba\0\u48d7\0\u48f4\0\u4911\0\u492e\0\u494b\0\u4968"+
    "\0\u4985\0\u49a2\0\u49bf\0\u49dc\0\u49f9\0\u4a16\0\u4a33\0\u4a50"+
    "\0\u4a6d\0\u4a8a\0\u4aa7\0\u4ac4\0\u4ae1\0\u4afe\0\u4b1b\0\u4b38"+
    "\0\u4b55\0\u4b72\0\u4b8f\0\u4bac\0\u4bc9\0\u4be6\0\u4c03\0\u4c20"+
    "\0\u4c3d\0\u4c5a\0\u4c77\0\u4c94\0\u4cb1\0\u4cce\0\u4ceb\0\u4d08"+
    "\0\u4d25\0\u4d42\0\u4d5f\0\u4d7c\0\u4d99\0\u4db6\0\u4dd3\0\u4df0"+
    "\0\u4e0d\0\u4e2a\0\u4e47\0\u4e64\0\u4e81\0\u4e9e\0\u4ebb\0\u4ed8"+
    "\0\u4ef5\0\u4f12\0\u4f2f\0\u4f4c\0\u4f69\0\u4f86\0\u4fa3\0\u4fc0"+
    "\0\u4fdd\0\u4ffa\0\u5017\0\u5034\0\u5051\0\u506e\0\u508b\0\u50a8"+
    "\0\u50c5\0\u50e2\0\u50ff\0\u511c\0\u5139\0\u5156\0\u5173\0\u5190"+
    "\0\u51ad\0\u51ca\0\u51e7\0\u5204\0\u5221\0\u523e\0\u525b\0\u5278"+
    "\0\u5295\0\u52b2\0\u52cf\0\u52ec\0\u5309\0\u5326\0\u5343\0\u5360"+
    "\0\u537d\0\u539a\0\u53b7\0\u53d4\0\u53f1\0\u540e\0\u542b\0\u5448"+
    "\0\u5465\0\u5482\0\u549f\0\u54bc\0\u54d9\0\u54f6\0\u5513\0\u5530"+
    "\0\u554d\0\u556a\0\u5587\0\u55a4\0\u55c1\0\u55de\0\u55fb\0\u5618"+
    "\0\u5635\0\u5652\0\u566f\0\u568c\0\u56a9\0\u56c6\0\u56e3\0\u5700"+
    "\0\u571d\0\u573a\0\u5757\0\u5774\0\u5791\0\u57ae\0\u57cb\0\u57e8"+
    "\0\u5805\0\u5822\0\u583f\0\u585c\0\u5879\0\u5896\0\u58b3\0\u58d0"+
    "\0\u58ed\0\u590a\0\u5927\0\u5944\0\u5961\0\u597e\0\u599b\0\u59b8"+
    "\0\u59d5\0\u59f2\0\u5a0f\0\u5a2c\0\u5a49\0\u5a66\0\u5a83\0\u5aa0"+
    "\0\u5abd\0\u5ada\0\u5af7\0\u5b14\0\u5b31\0\u5b4e\0\u5b6b\0\u5b88"+
    "\0\u5ba5\0\u5bc2\0\u5bdf\0\u5bfc\0\u5c19\0\u5c36\0\u5c53\0\u5c70"+
    "\0\u5c8d\0\u5caa\0\u5cc7\0\u5ce4\0\u5d01\0\u5d1e\0\u5d3b\0\u5d58"+
    "\0\u5d75\0\u5d92\0\u5daf\0\u5dcc\0\u5de9\0\u5e06\0\u5e23\0\u5e40"+
    "\0\u5e5d\0\u5e7a\0\u5e97\0\u5eb4\0\u5ed1\0\u5eee\0\u5f0b\0\u5f28"+
    "\0\u5f45\0\u5f62\0\u5f7f\0\u5f9c\0\u5fb9\0\u5fd6\0\u5ff3\0\u6010"+
    "\0\u602d\0\u604a\0\u6067\0\u6084\0\u60a1\0\u60be\0\u60db\0\u60f8"+
    "\0\u6115\0\u6132\0\u614f\0\u616c\0\u6189\0\u61a6\0\u61c3\0\u61e0"+
    "\0\u61fd\0\u621a\0\u6237\0\u6254\0\u6271\0\u628e\0\u62ab\0\u62c8"+
    "\0\u62e5\0\u6302\0\u631f\0\u633c\0\u6359\0\u6376\0\u6393\0\u63b0"+
    "\0\u63cd\0\u63ea\0\u6407\0\u6424\0\u6441\0\u645e\0\u647b\0\u6498"+
    "\0\u64b5\0\u64d2\0\u64ef\0\u650c\0\u6529\0\u6546\0\u6563\0\u6580"+
    "\0\u659d\0\u65ba\0\u65d7\0\u65f4\0\u6611\0\u662e\0\u664b\0\u6668"+
    "\0\u6685\0\u66a2\0\u66bf\0\u66dc\0\u66f9\0\u6716\0\u6733\0\u6750"+
    "\0\u676d\0\u678a\0\u67a7\0\u67c4\0\u67e1\0\u67fe\0\u681b\0\u6838"+
    "\0\u6855\0\u6872\0\u688f\0\u68ac\0\u68c9\0\u68e6\0\u6903\0\u6920"+
    "\0\u693d\0\u695a\0\u6977\0\u6994\0\u69b1\0\u69ce\0\u69eb\0\u6a08"+
    "\0\u6a25\0\u6a42\0\u6a5f\0\u6a7c\0\u6a99\0\u6ab6\0\u6ad3\0\u6af0"+
    "\0\u6b0d\0\u6b2a\0\u6b47\0\u6b64\0\u6b81\0\u6b9e\0\u6bbb\0\u6bd8"+
    "\0\u6bf5\0\u6c12\0\u6c2f\0\u6c4c\0\u6c69\0\u6c86\0\u6ca3\0\u6cc0"+
    "\0\u6cdd\0\u6cfa\0\u6d17\0\u6d34\0\u6d51\0\u6d6e\0\u6d8b\0\u6da8"+
    "\0\u6dc5\0\u6de2\0\u6dff\0\u6e1c\0\u6e39\0\u6e56\0\u6e73\0\u597e"+
    "\0\u6e90\0\u6ead\0\u6eca\0\u6ee7\0\u6f04\0\u6f21\0\u6f3e\0\u6f5b"+
    "\0\u6f78\0\u6f95\0\u6fb2\0\u6fcf\0\u6fec\0\u7009\0\u7026\0\u7043"+
    "\0\u7060\0\u707d\0\u709a\0\u70b7\0\u70d4\0\u70f1\0\u710e\0\u712b"+
    "\0\u7148\0\u7165\0\u7182\0\u719f\0\u71bc\0\u71d9\0\u71f6\0\u7213"+
    "\0\u7230\0\u724d\0\u726a\0\u7287\0\u72a4\0\u72c1\0\u72de\0\u72fb"+
    "\0\u7318\0\u7335\0\u7352\0\u736f\0\u738c\0\u73a9\0\u73c6\0\u73e3"+
    "\0\u7400\0\u741d\0\u63cd\0\u743a\0\u7457\0\u7474\0\u7491\0\u74ae"+
    "\0\u74cb\0\u74e8\0\u7505\0\u7522\0\u753f\0\u755c\0\u7579\0\u7596"+
    "\0\u75b3\0\u75d0\0\u75ed\0\u760a\0\u7627\0\u7644\0\u7661\0\u767e"+
    "\0\u769b\0\u76b8\0\u76d5\0\u76f2\0\u770f\0\u772c\0\u7749\0\u7766"+
    "\0\u7783\0\u77a0\0\u77bd\0\u77da\0\u77f7\0\u7814\0\u7831\0\u784e"+
    "\0\u786b\0\u7888\0\u78a5\0\u78c2\0\u78df\0\u78fc\0\u7919\0\u7936"+
    "\0\u7953\0\u7970\0\u798d\0\u79aa\0\u79c7\0\u79e4\0\u7a01\0\u7a1e"+
    "\0\u7a3b\0\u7a58\0\u7a75\0\u7a92\0\u7aaf\0\u7acc\0\u7ae9\0\u7b06"+
    "\0\u7b23\0\u7b40\0\u7b5d\0\u7b7a\0\u7b97\0\u7bb4\0\u7bd1\0\u7bee"+
    "\0\u7c0b\0\u7c28\0\u7c45\0\u7c62\0\u7c7f\0\u7c9c\0\u7cb9\0\u7cd6"+
    "\0\u7cf3\0\u7d10\0\u7d2d\0\u7d4a\0\u7d67\0\u7d84\0\u7da1\0\u7dbe"+
    "\0\u7ddb\0\u7df8\0\u7e15\0\u7e32\0\u7e4f\0\u7e6c\0\u7e89\0\u7ea6"+
    "\0\u7ec3\0\u7ee0\0\u7efd\0\u7f1a\0\u7f37\0\u7f54\0\u7f71\0\u7f8e"+
    "\0\u7fab\0\u7fc8\0\u7fe5\0\u8002\0\u801f\0\u803c\0\u8059\0\u8076"+
    "\0\u8093\0\u80b0\0\u80cd\0\u80ea\0\u8107\0\u8124\0\u8141\0\u815e"+
    "\0\u817b\0\u8198\0\u81b5\0\u81d2\0\u81ef\0\u820c\0\u8229\0\u8246"+
    "\0\u8263\0\u8280\0\u829d\0\u82ba\0\u82d7\0\u82f4\0\u8311\0\u832e"+
    "\0\u834b\0\u8368\0\u8385\0\u83a2\0\u83bf\0\u83dc\0\u83f9\0\u8416"+
    "\0\u8433\0\u8450\0\u846d\0\u848a\0\u84a7\0\u84c4\0\u84e1\0\u84fe"+
    "\0\u851b\0\u8538\0\u8555\0\u8572\0\u858f\0\u85ac\0\u85c9\0\u85e6"+
    "\0\u8603\0\u8620\0\u863d\0\u865a\0\u8677\0\u8694\0\u86b1\0\u86ce"+
    "\0\u86eb\0\u8708\0\u8725\0\u8742\0\u875f\0\u877c\0\u8799\0\u87b6"+
    "\0\u87d3\0\u87f0\0\u880d\0\u882a\0\u8847\0\u8864\0\u8881\0\u889e"+
    "\0\u88bb\0\u88d8\0\u7e89\0\u88f5\0\u8912\0\u892f\0\u894c\0\u8969"+
    "\0\u8986\0\u89a3\0\u89c0\0\u89dd\0\u89fa\0\u8a17\0\u8a34\0\u8a51"+
    "\0\u8a6e\0\u8a8b\0\u8aa8\0\u8ac5\0\u8ae2\0\u8aff\0\u8b1c\0\u7efd"+
    "\0\u8b39\0\u8b56\0\u8b73\0\u8b90\0\u8bad\0\u8bca\0\u8be7\0\u8c04"+
    "\0\u8c21\0\u8c3e\0\u8c5b\0\u8c78\0\u8c95\0\u8cb2\0\u8ccf\0\u8cec"+
    "\0\u8d09\0\u8d26\0\u8d43\0\u8d60\0\u8d7d\0\u8d9a\0\u8db7\0\u8dd4"+
    "\0\u8df1\0\u8e0e\0\u8e2b\0\u8e48\0\u8e65\0\u8e82\0\u8e9f\0\u8ebc"+
    "\0\u8ed9\0\u8ef6\0\u8f13\0\u8f30\0\u8f4d\0\u8f6a\0\u8f87\0\u8fa4"+
    "\0\u8fc1\0\u8fde\0\u8ffb\0\u9018\0\u9035\0\u9052\0\u906f\0\u908c"+
    "\0\u90a9\0\u90c6\0\u90e3\0\u9100\0\u911d\0\u913a\0\u9157\0\u9174"+
    "\0\u9191\0\u91ae\0\u91cb\0\u91e8\0\u9205\0\u9222\0\u923f\0\u8416"+
    "\0\u925c\0\u9279\0\u846d\0\u9296\0\u92b3\0\u92d0\0\u851b\0\u92ed"+
    "\0\u930a\0\u9327\0\u9344\0\u9361\0\u937e\0\u939b\0\u93b8\0\u93d5"+
    "\0\127\0\u93f2\0\u940f\0\u942c\0\u9449\0\u9466\0\u9483\0\u94a0"+
    "\0\u94bd\0\u94da\0\u94f7\0\u9514\0\u9531\0\u954e\0\u956b\0\u9588"+
    "\0\u95a5\0\u95c2\0\u95df\0\u95fc\0\u9619\0\u9636\0\u9653\0\u9670"+
    "\0\u968d\0\u96aa\0\u96c7\0\u96e4\0\u9701\0\u971e\0\u973b\0\u9758"+
    "\0\u9775\0\u9792\0\u97af\0\u97cc\0\u97e9\0\u9806\0\u9823\0\u9840"+
    "\0\u985d\0\u987a\0\u9897\0\u98b4\0\u98d1\0\u98ee\0\u990b\0\u9928"+
    "\0\u9945\0\u9962\0\u997f\0\u999c\0\u99b9\0\u99d6\0\u99f3\0\u9a10"+
    "\0\u9a2d\0\u9a4a\0\u9a67\0\u9a84\0\127\0\127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1382];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\22\4\1\6\6\4\2\7\24\10\1\11"+
    "\10\10\1\4\1\12\1\13\21\4\1\14\6\4\2\7"+
    "\37\0\1\4\33\0\2\15\1\0\1\15\2\0\1\16"+
    "\1\17\12\0\1\20\10\0\1\15\7\0\1\21\13\0"+
    "\1\22\13\0\1\13\33\0\2\23\1\0\1\23\21\0"+
    "\1\24\5\0\1\23\1\0\2\15\1\0\1\15\3\0"+
    "\1\17\23\0\1\15\27\0\1\25\6\0\2\26\1\0"+
    "\1\26\27\0\1\26\11\0\1\27\52\0\1\30\16\0"+
    "\1\31\33\0\1\32\54\0\1\33\21\0\1\34\47\0"+
    "\1\35\21\0\1\36\44\0\1\37\16\0\1\40\5\0"+
    "\1\41\1\42\1\0\1\43\1\0\1\44\34\0\1\45"+
    "\21\0\1\46\5\0\1\47\1\50\1\0\1\51\1\0"+
    "\1\52\34\0\1\53\24\0\1\54\41\0\1\55\26\0"+
    "\1\56\33\0\1\57\32\0\1\60\26\0\25\61\1\0"+
    "\7\61\12\0\1\62\41\0\1\63\26\0\1\64\33\0"+
    "\1\65\32\0\1\66\26\0\25\67\1\0\7\67\22\0"+
    "\1\70\43\0\1\71\34\0\1\72\24\0\1\73\33\0"+
    "\1\74\14\0\25\61\1\75\7\61\22\0\1\76\43\0"+
    "\1\77\34\0\1\100\24\0\1\101\33\0\1\102\14\0"+
    "\25\67\1\103\7\67\22\0\1\104\24\0\1\105\53\0"+
    "\1\106\25\0\1\107\23\0\1\110\47\0\1\111\32\0"+
    "\1\112\24\0\1\113\53\0\1\114\25\0\1\115\23\0"+
    "\1\116\47\0\1\117\22\0\1\120\43\0\1\121\23\0"+
    "\1\122\32\0\1\123\26\0\24\124\1\0\10\124\7\0"+
    "\1\125\37\0\1\126\43\0\1\127\23\0\1\130\32\0"+
    "\1\131\26\0\24\132\1\0\10\132\7\0\1\133\46\0"+
    "\1\134\24\0\1\135\23\0\24\136\1\0\10\136\32\0"+
    "\1\137\2\0\24\124\1\140\10\124\27\0\1\141\26\0"+
    "\1\142\24\0\1\143\23\0\24\144\1\0\10\144\32\0"+
    "\1\145\2\0\24\132\1\146\10\132\27\0\1\147\15\0"+
    "\1\150\24\0\24\151\1\0\10\151\24\136\1\152\10\136"+
    "\6\0\1\153\54\0\1\154\36\0\1\155\14\0\1\156"+
    "\24\0\24\157\1\0\10\157\24\144\1\160\10\144\6\0"+
    "\1\161\54\0\1\162\36\0\1\163\4\0\24\164\1\0"+
    "\10\164\24\151\1\165\10\151\26\0\1\166\17\0\1\167"+
    "\32\0\1\170\45\0\1\43\1\0\1\44\12\0\24\171"+
    "\1\0\10\171\24\157\1\172\10\157\26\0\1\173\17\0"+
    "\1\174\32\0\1\175\45\0\1\51\1\0\1\52\12\0"+
    "\24\164\1\176\10\164\26\0\1\177\15\0\1\200\42\0"+
    "\1\201\46\0\1\202\5\0\24\171\1\203\10\171\26\0"+
    "\1\204\15\0\1\205\42\0\1\206\46\0\1\207\33\0"+
    "\1\210\15\0\1\211\54\0\1\212\17\0\1\213\52\0"+
    "\1\214\32\0\1\215\15\0\1\216\54\0\1\217\17\0"+
    "\1\220\52\0\1\221\13\0\1\222\54\0\1\223\35\0"+
    "\1\224\4\0\24\225\1\0\10\225\22\0\1\226\21\0"+
    "\1\227\54\0\1\230\35\0\1\231\4\0\24\232\1\0"+
    "\10\232\22\0\1\233\41\0\1\234\35\0\1\235\22\0"+
    "\1\236\16\0\24\225\1\237\10\225\6\0\1\240\55\0"+
    "\1\241\35\0\1\242\22\0\1\243\16\0\24\232\1\244"+
    "\10\232\6\0\1\245\56\0\1\246\21\0\1\247\30\0"+
    "\1\250\51\0\1\251\26\0\1\252\44\0\1\253\21\0"+
    "\1\254\30\0\1\255\51\0\1\256\26\0\1\257\23\0"+
    "\1\260\44\0\1\261\46\0\1\262\12\0\1\263\36\0"+
    "\1\264\32\0\1\265\44\0\1\266\46\0\1\267\12\0"+
    "\1\270\36\0\1\271\35\0\1\272\53\0\1\273\34\0"+
    "\1\274\32\0\1\275\32\0\1\276\21\0\1\277\53\0"+
    "\1\300\34\0\1\301\32\0\1\302\32\0\1\303\31\0"+
    "\1\304\24\0\1\305\32\0\1\306\54\0\1\307\5\0"+
    "\2\310\1\0\2\310\6\0\1\311\7\0\1\312\7\0"+
    "\1\310\22\0\1\313\24\0\1\314\32\0\1\315\54\0"+
    "\1\316\5\0\2\317\1\0\2\317\6\0\1\320\7\0"+
    "\1\321\7\0\1\317\22\0\1\322\33\0\1\323\40\0"+
    "\1\324\27\0\1\325\15\0\2\310\1\0\2\310\6\0"+
    "\1\311\7\0\1\326\7\0\1\310\3\0\1\327\2\0"+
    "\1\327\3\0\1\330\23\0\2\331\1\0\1\331\2\0"+
    "\1\332\13\0\1\333\2\0\1\334\5\0\1\331\22\0"+
    "\1\335\33\0\1\336\40\0\1\337\27\0\1\340\15\0"+
    "\2\317\1\0\2\317\6\0\1\320\7\0\1\341\7\0"+
    "\1\317\3\0\1\342\2\0\1\342\3\0\1\343\23\0"+
    "\2\344\1\0\1\344\2\0\1\345\13\0\1\346\2\0"+
    "\1\347\5\0\1\344\12\0\1\350\33\0\1\306\24\0"+
    "\2\324\1\0\2\324\4\0\1\351\1\0\1\352\7\0"+
    "\1\353\7\0\1\324\10\0\1\354\33\0\1\332\13\0"+
    "\1\333\12\0\2\355\1\0\1\355\1\356\1\357\1\360"+
    "\1\361\2\0\1\362\1\363\7\0\1\364\7\0\1\355"+
    "\6\0\2\327\3\0\1\365\22\0\2\331\1\0\1\331"+
    "\21\0\1\334\5\0\1\331\27\0\1\366\16\0\1\367"+
    "\46\0\1\370\23\0\1\371\33\0\1\315\24\0\2\337"+
    "\1\0\2\337\4\0\1\372\1\0\1\373\7\0\1\374"+
    "\7\0\1\337\10\0\1\375\33\0\1\345\13\0\1\346"+
    "\12\0\2\376\1\0\1\376\1\0\1\377\1\u0100\1\u0101"+
    "\2\0\1\u0102\10\0\1\341\7\0\1\376\6\0\2\342"+
    "\3\0\1\u0103\22\0\2\344\1\0\1\344\21\0\1\347"+
    "\5\0\1\344\27\0\1\u0104\16\0\1\u0105\46\0\1\u0106"+
    "\32\0\1\274\14\0\2\u0107\1\0\1\u0107\7\0\1\u0108"+
    "\7\0\1\353\7\0\1\u0107\3\0\1\u0109\2\0\1\u0109"+
    "\3\0\1\u010a\31\0\1\u010b\13\0\1\u010c\32\0\1\u010d"+
    "\14\0\2\355\1\0\1\355\1\356\6\0\1\363\7\0"+
    "\1\364\7\0\1\355\1\0\2\356\1\0\2\356\6\0"+
    "\1\363\7\0\1\u010e\7\0\1\356\7\0\1\355\30\0"+
    "\1\355\4\0\3\355\31\0\1\u010f\34\0\1\u0110\30\0"+
    "\1\u0111\2\0\1\u0111\3\0\1\u0112\31\0\1\u0113\13\0"+
    "\1\u0114\20\0\1\u0115\55\0\1\u0116\21\0\1\u0117\30\0"+
    "\1\u0118\44\0\1\301\14\0\2\u0119\1\0\1\u0119\7\0"+
    "\1\u011a\7\0\1\374\7\0\1\u0119\3\0\1\u011b\2\0"+
    "\1\u011b\3\0\1\u011c\31\0\1\u011d\13\0\1\u011e\32\0"+
    "\1\u011f\14\0\2\376\1\0\1\376\17\0\1\341\7\0"+
    "\1\376\7\0\1\376\30\0\1\376\4\0\3\376\31\0"+
    "\1\u0120\34\0\1\u0121\34\0\1\u0122\55\0\1\u0123\21\0"+
    "\1\u0124\30\0\1\u0125\24\0\2\u0107\1\0\1\u0107\17\0"+
    "\1\353\7\0\1\u0107\1\0\2\u0107\1\u0109\1\u0107\1\0"+
    "\1\u0109\3\0\1\u010a\1\0\1\352\7\0\1\353\7\0"+
    "\1\u0107\1\0\2\u0107\1\0\1\u0107\1\0\1\u0126\1\u0127"+
    "\1\u0128\2\0\1\u0129\10\0\1\353\7\0\1\u0107\6\0"+
    "\2\u0109\3\0\1\u012a\50\0\1\u012b\16\0\1\u012c\45\0"+
    "\1\u012d\21\0\1\u012e\13\0\1\u012f\12\0\2\355\1\0"+
    "\1\355\1\356\1\0\1\u0130\4\0\1\363\7\0\1\364"+
    "\7\0\1\355\6\0\1\355\27\0\2\u0131\1\0\1\u0131"+
    "\1\0\1\u0132\1\u0133\1\u0134\2\0\1\u0135\10\0\1\u0136"+
    "\7\0\1\u0131\6\0\2\u0111\3\0\1\u0137\50\0\1\u0138"+
    "\16\0\1\u0139\31\0\1\327\36\0\1\u013a\3\0\1\u013b"+
    "\1\u013c\41\0\1\u013d\27\0\1\u013e\20\0\2\u0119\1\0"+
    "\1\u0119\17\0\1\374\7\0\1\u0119\1\0\2\u0119\1\u011b"+
    "\1\u0119\1\0\1\u011b\3\0\1\u011c\1\0\1\373\7\0"+
    "\1\374\7\0\1\u0119\1\0\2\u0119\1\0\1\u0119\1\0"+
    "\1\u013f\1\u0140\1\u0141\2\0\1\u0142\10\0\1\374\7\0"+
    "\1\u0119\6\0\2\u011b\3\0\1\u0143\50\0\1\u0144\16\0"+
    "\1\u0145\45\0\1\u0146\13\0\2\376\1\0\1\376\2\0"+
    "\1\u0147\14\0\1\341\7\0\1\376\6\0\1\376\34\0"+
    "\1\342\36\0\1\u0148\46\0\1\u0149\27\0\1\u014a\26\0"+
    "\1\u0107\30\0\1\u0107\4\0\3\u0107\31\0\1\u014b\34\0"+
    "\1\u014c\34\0\1\u014d\55\0\1\u014e\21\0\1\u014f\25\0"+
    "\1\u0150\55\0\1\u0151\16\0\1\u0152\26\0\1\355\32\0"+
    "\2\u0131\1\0\1\u0131\17\0\1\u0136\7\0\1\u0131\7\0"+
    "\1\u0131\30\0\1\u0131\4\0\3\u0131\31\0\1\u0153\34\0"+
    "\1\u0154\34\0\1\u0155\13\0\1\u0156\20\0\1\u0157\55\0"+
    "\1\u0158\21\0\1\u0159\36\0\1\u015a\25\0\1\u015b\43\0"+
    "\1\u015c\15\0\25\u015d\1\0\7\u015d\22\0\1\u015e\21\0"+
    "\1\u0119\30\0\1\u0119\4\0\3\u0119\31\0\1\u015f\34\0"+
    "\1\u0160\34\0\1\u0161\55\0\1\u0162\21\0\1\u0163\25\0"+
    "\1\u0164\31\0\1\376\50\0\1\u0165\15\0\25\u0166\1\0"+
    "\7\u0166\22\0\1\u0167\13\0\2\u0107\1\0\1\u0107\2\0"+
    "\1\u0168\14\0\1\353\7\0\1\u0107\6\0\1\u0107\34\0"+
    "\1\u0109\35\0\1\40\5\0\1\41\1\42\1\0\1\43"+
    "\36\0\1\u0169\44\0\1\u016a\32\0\1\u016b\21\0\1\u016c"+
    "\20\0\2\u0131\1\0\1\u0131\2\0\1\u016d\14\0\1\u0136"+
    "\7\0\1\u0131\6\0\1\u0131\55\0\1\u016e\16\0\1\u016f"+
    "\31\0\1\u0111\36\0\1\u013a\3\0\1\u013b\1\u0170\41\0"+
    "\1\u0171\34\0\1\u0172\34\0\1\u0173\43\0\1\u0174\3\0"+
    "\25\u015d\1\u0175\7\u015d\25\0\1\310\10\0\2\u0119\1\0"+
    "\1\u0119\2\0\1\u0176\14\0\1\374\7\0\1\u0119\6\0"+
    "\1\u0119\34\0\1\u011b\35\0\1\46\5\0\1\47\1\50"+
    "\1\0\1\51\36\0\1\u0177\44\0\1\u0178\24\0\1\u0179"+
    "\12\0\25\u0166\1\u017a\7\u0166\25\0\1\317\12\0\1\u0107"+
    "\31\0\25\u017b\1\0\7\u017b\6\0\1\u017c\36\0\1\u017d"+
    "\4\0\1\u0170\41\0\1\u017e\15\0\1\u0131\61\0\1\u017f"+
    "\21\0\1\u0180\36\0\1\u0181\15\0\25\u0182\1\0\7\u0182"+
    "\11\0\1\u0183\33\0\1\u0184\40\0\1\u0185\44\0\1\u0186"+
    "\13\0\1\u0119\31\0\25\u0187\1\0\7\u0187\6\0\1\u0188"+
    "\37\0\1\u0189\47\0\1\u018a\10\0\25\u017b\1\u018b\7\u017b"+
    "\11\0\1\u018c\42\0\1\u018d\15\0\25\u018e\1\0\7\u018e"+
    "\10\0\1\u017d\46\0\1\u018f\43\0\1\u0190\3\0\25\u0182"+
    "\1\u0191\7\u0182\21\0\1\u0192\13\0\24\u0193\1\0\10\u0193"+
    "\11\0\1\u0194\32\0\1\332\25\0\25\u0187\1\u0195\7\u0187"+
    "\11\0\1\u0196\44\0\1\u0197\22\0\1\345\51\0\1\u0198"+
    "\25\0\1\u0199\41\0\1\u019a\12\0\25\u018e\1\u019b\7\u018e"+
    "\25\u019c\1\0\7\u019c\14\0\1\u019d\44\0\1\u019e\16\0"+
    "\1\u019f\26\0\24\u0193\1\u01a0\10\u0193\16\0\1\u01a1\42\0"+
    "\1\u01a2\25\0\1\u01a3\25\0\1\u01a4\35\0\1\u01a5\37\0"+
    "\1\u01a6\33\0\1\u01a7\47\0\1\u01a8\10\0\25\u019c\1\u01a9"+
    "\7\u019c\11\0\1\u01aa\32\0\1\u0113\47\0\1\u01ab\40\0"+
    "\1\u01ac\6\0\24\u01ad\1\0\10\u01ad\7\0\1\u01ae\37\0"+
    "\1\u01af\44\0\1\u01b0\41\0\1\u01b1\32\0\1\u01b2\30\0"+
    "\1\u01b3\22\0\1\u012e\51\0\1\u01b4\26\0\1\u01b5\26\0"+
    "\1\u01b6\33\0\1\u01b7\25\0\24\u01ad\1\u01b8\10\u01ad\27\0"+
    "\1\u01b9\32\0\1\u01ba\17\0\1\u01bb\54\0\1\u01bc\5\0"+
    "\2\u01bd\1\0\1\u01bd\1\u01be\4\0\1\u01bf\1\0\1\u01c0"+
    "\7\0\1\u01c1\7\0\1\u01bd\6\0\1\u01c2\35\0\1\u0155"+
    "\25\0\24\u01c3\1\0\10\u01c3\24\u01c4\1\0\10\u01c4\27\0"+
    "\1\u01c5\33\0\1\u01c6\36\0\1\u01c7\5\0\2\u01c8\1\0"+
    "\2\u01c8\4\0\1\u01c9\1\0\1\u01ca\7\0\1\u01cb\7\0"+
    "\1\u01c8\24\u01cc\1\0\10\u01cc\20\0\1\43\15\0\2\u01bd"+
    "\1\0\1\u01bd\1\u01be\4\0\1\u01bf\1\0\1\u01c0\7\0"+
    "\1\u01cd\7\0\1\u01bd\1\0\2\u01be\1\0\2\u01be\4\0"+
    "\1\u01ce\1\0\1\u01c0\7\0\1\u01cd\7\0\1\u01be\1\0"+
    "\2\u01cf\1\0\1\u01cf\7\0\1\u01d0\7\0\1\u01d1\7\0"+
    "\1\u01cf\3\0\1\u01d2\2\0\1\u01d2\3\0\1\u01d3\23\0"+
    "\2\u01d4\1\0\1\u01d4\2\0\1\u01d5\13\0\1\u01d6\2\0"+
    "\1\u01d7\5\0\1\u01d4\22\0\1\u01d8\12\0\24\u01c3\1\u01d9"+
    "\10\u01c3\24\u01c4\1\u01da\10\u01c4\30\0\1\u01db\13\0\1\u01dc"+
    "\45\0\1\51\15\0\2\u01c8\1\0\2\u01c8\4\0\1\u01c9"+
    "\1\0\1\u01ca\7\0\1\u01dd\7\0\1\u01c8\1\0\2\u01de"+
    "\1\0\1\u01de\7\0\1\u01df\7\0\1\u01e0\7\0\1\u01de"+
    "\3\0\1\u01e1\2\0\1\u01e1\3\0\1\u01e2\23\0\2\u01e3"+
    "\1\0\1\u01e3\2\0\1\u01e4\13\0\1\u01e5\2\0\1\u01e6"+
    "\5\0\1\u01e3\24\u01cc\1\u01e7\10\u01cc\7\0\1\u01e8\13\0"+
    "\1\20\12\0\2\u01e9\1\0\1\u01e9\7\0\1\u01ea\7\0"+
    "\1\u01eb\7\0\1\u01e9\1\0\2\u01cf\1\0\1\u01cf\17\0"+
    "\1\u01d1\7\0\1\u01cf\1\0\2\u01cf\1\u01ec\1\u01cf\1\0"+
    "\1\u01ec\3\0\1\u01ed\1\0\1\u01ee\7\0\1\u01d1\7\0"+
    "\1\u01cf\7\0\1\u01ef\13\0\1\u010c\12\0\2\u01f0\1\0"+
    "\1\u01f0\1\0\1\u01f1\1\u01f2\1\u01f3\2\0\1\u01f4\10\0"+
    "\1\u01f5\7\0\1\u01f0\6\0\2\u01d2\3\0\1\u01f6\22\0"+
    "\2\u01d4\1\0\1\u01d4\21\0\1\u01d7\5\0\1\u01d4\27\0"+
    "\1\u01f7\16\0\1\u01f8\46\0\1\u01f9\21\0\1\u01fa\52\0"+
    "\1\u01fb\34\0\1\u01fc\22\0\1\u01fd\47\0\1\u01fe\14\0"+
    "\1\u01e4\13\0\1\u01e5\12\0\2\u01de\1\0\1\u01de\17\0"+
    "\1\u01e0\7\0\1\u01de\1\0\2\u01de\1\u01ff\1\u01de\1\0"+
    "\1\u01ff\3\0\1\u0200\1\0\1\u0201\7\0\1\u01e0\7\0"+
    "\1\u01de\7\0\1\u0202\26\0\2\u0203\1\0\1\u0203\1\0"+
    "\1\u0204\1\u0205\1\u0206\2\0\1\u0207\10\0\1\u01dd\7\0"+
    "\1\u0203\6\0\2\u01e1\3\0\1\u0208\22\0\2\u01e3\1\0"+
    "\1\u01e3\21\0\1\u01e6\5\0\1\u01e3\27\0\1\u0209\16\0"+
    "\1\u020a\46\0\1\u020b\37\0\1\u020c\35\0\1\u020d\6\0"+
    "\2\u01e9\1\0\1\u01e9\17\0\1\u01eb\7\0\1\u01e9\1\0"+
    "\2\u01e9\1\u01ec\1\u01e9\1\0\1\u01ec\3\0\1\u01ed\1\0"+
    "\1\u01ee\7\0\1\u01eb\7\0\1\u01e9\7\0\1\u020e\26\0"+
    "\2\u01e9\1\0\1\u01e9\1\0\1\u020f\1\u0210\1\u0211\2\0"+
    "\1\u0212\10\0\1\u01eb\7\0\1\u01e9\6\0\2\u01ec\3\0"+
    "\1\u0213\24\0\1\u01ec\2\0\1\u01ec\3\0\1\u01ed\51\0"+
    "\1\u0214\6\0\2\u01f0\1\0\1\u01f0\17\0\1\u01f5\7\0"+
    "\1\u01f0\7\0\1\u01f0\30\0\1\u01f0\4\0\3\u01f0\31\0"+
    "\1\u0215\34\0\1\u0216\34\0\1\u01d5\13\0\1\u01d6\20\0"+
    "\1\u0217\55\0\1\u0218\21\0\1\u0219\30\0\1\u021a\23\0"+
    "\24\u021b\1\0\10\u021b\7\0\1\u021c\34\0\1\u021d\35\0"+
    "\1\u021e\54\0\1\u021f\5\0\2\u01de\1\0\1\u01de\1\0"+
    "\1\u0220\1\u0221\1\u0222\2\0\1\u0223\10\0\1\u01e0\7\0"+
    "\1\u01de\6\0\2\u01ff\3\0\1\u0224\24\0\1\u01ff\2\0"+
    "\1\u01ff\3\0\1\u0200\51\0\1\u0225\6\0\2\u0203\1\0"+
    "\1\u0203\17\0\1\u01dd\7\0\1\u0203\7\0\1\u0203\30\0"+
    "\1\u0203\4\0\3\u0203\31\0\1\u0226\34\0\1\u0227\34\0"+
    "\1\u0228\55\0\1\u0229\21\0\1\u022a\30\0\1\u022b\32\0"+
    "\1\u022c\55\0\1\u022d\33\0\1\u022e\14\0\1\u01e9\30\0"+
    "\1\u01e9\4\0\3\u01e9\31\0\1\u022f\34\0\1\u0230\34\0"+
    "\1\u0231\55\0\1\u0232\5\0\2\u01f0\1\0\1\u01f0\2\0"+
    "\1\u0233\14\0\1\u01f5\7\0\1\u01f0\6\0\1\u01f0\34\0"+
    "\1\u01d2\35\0\1\u0234\5\0\1\u0235\1\u0236\3\0\1\44"+
    "\34\0\1\u0237\27\0\1\u0238\17\0\24\u021b\1\u0239\10\u021b"+
    "\27\0\1\u023a\34\0\1\u023b\27\0\1\u023c\27\0\1\u023d"+
    "\26\0\1\u01de\30\0\1\u01de\4\0\3\u01de\31\0\1\u023e"+
    "\34\0\1\u023f\34\0\1\u0240\55\0\1\u0241\5\0\2\u0203"+
    "\1\0\1\u0203\2\0\1\u0242\14\0\1\u01dd\7\0\1\u0203"+
    "\6\0\1\u0203\34\0\1\u01e1\35\0\1\u0243\5\0\1\u0244"+
    "\1\u0245\3\0\1\52\34\0\1\u0246\27\0\1\u0247\46\0"+
    "\1\u0248\14\0\1\u0249\5\0\1\u024a\1\u024b\1\0\1\43"+
    "\1\0\1\44\42\0\1\u024c\5\0\2\u01e9\1\0\1\u01e9"+
    "\2\0\1\u024d\14\0\1\u01eb\7\0\1\u01e9\6\0\1\u01e9"+
    "\34\0\1\u01ec\35\0\1\u0249\5\0\1\u024a\1\u024b\1\0"+
    "\1\43\17\0\1\u01f0\43\0\1\u024e\41\0\1\u024f\26\0"+
    "\1\u0250\23\0\25\u0251\1\0\7\u0251\22\0\1\u0252\40\0"+
    "\1\u0253\36\0\1\u0254\34\0\1\u0255\14\0\1\u0256\43\0"+
    "\1\u0257\16\0\2\u01de\1\0\1\u01de\2\0\1\u0258\14\0"+
    "\1\u01e0\7\0\1\u01de\6\0\1\u01de\34\0\1\u01ff\35\0"+
    "\1\u0243\5\0\1\u0244\1\u0245\21\0\1\u0203\43\0\1\u0259"+
    "\41\0\1\u025a\26\0\1\u025b\23\0\25\u025c\1\0\7\u025c"+
    "\22\0\1\u025d\42\0\1\u025e\16\0\1\u025f\41\0\1\u0260"+
    "\26\0\1\u0261\32\0\1\u0234\5\0\1\u0235\1\u0236\21\0"+
    "\1\u01e9\53\0\1\u0262\43\0\1\u0263\34\0\1\u0264\3\0"+
    "\25\u0251\1\u0265\7\u0251\25\0\1\u0266\16\0\1\u0267\42\0"+
    "\1\u0268\27\0\1\u0269\51\0\1\u026a\40\0\1\u026b\6\0"+
    "\1\u01de\53\0\1\u026c\43\0\1\u026d\34\0\1\u026e\3\0"+
    "\25\u025c\1\u026f\7\u025c\25\0\1\u0270\17\0\1\u0271\46\0"+
    "\1\u0272\43\0\1\u0273\34\0\1\u0274\25\0\1\u0275\24\0"+
    "\1\u0276\53\0\1\u0277\27\0\1\u0278\11\0\2\u01bd\1\0"+
    "\1\u01bd\1\u01be\4\0\1\u01bf\1\0\1\u01c0\7\0\1\u01f5"+
    "\7\0\1\u01bd\27\0\1\u0279\24\0\1\u027a\34\0\1\u027b"+
    "\16\0\2\356\1\0\2\356\6\0\1\363\7\0\1\u027c"+
    "\7\0\1\356\14\0\1\u027d\42\0\1\u027e\24\0\1\u027f"+
    "\53\0\1\u0280\27\0\1\u0281\27\0\1\u0282\37\0\1\u0283"+
    "\24\0\1\u0284\53\0\1\u0285\15\0\1\u0286\43\0\1\u0287"+
    "\23\0\1\u0288\33\0\1\u0289\55\0\1\u028a\35\0\1\u028b"+
    "\25\0\1\u028c\13\0\2\u028d\1\0\1\u028d\2\0\1\u012e"+
    "\13\0\1\u012f\2\0\1\u028e\5\0\1\u028d\11\0\1\u028f"+
    "\35\0\1\u0290\43\0\1\u0291\23\0\1\u0292\33\0\1\u0293"+
    "\47\0\1\u0294\24\0\1\u0295\43\0\1\u0296\23\0\1\u0297"+
    "\45\0\1\u0298\24\0\1\u0299\23\0\24\u029a\1\0\10\u029a"+
    "\27\0\1\u029b\15\0\1\u029c\40\0\1\u029d\31\0\1\u029e"+
    "\24\0\2\u028d\1\0\1\u028d\21\0\1\u028e\5\0\1\u028d"+
    "\23\0\1\u029f\27\0\1\u02a0\37\0\1\u02a1\24\0\1\u02a2"+
    "\23\0\24\u02a3\1\0\10\u02a3\27\0\1\u02a4\16\0\1\u02a5"+
    "\44\0\1\u02a6\24\0\1\u02a7\23\0\24\u02a8\1\0\10\u02a8"+
    "\10\0\1\u02a9\24\0\24\u02aa\1\0\10\u02aa\24\u029a\1\u02ab"+
    "\10\u029a\30\0\1\u02ac\23\0\1\u02ad\26\0\1\u02ae\44\0"+
    "\1\u02af\24\0\1\u02b0\50\0\1\u02b1\17\0\1\u02b2\24\0"+
    "\24\u02b3\1\0\10\u02b3\24\u02a3\1\u02b4\10\u02a3\30\0\1\u02b5"+
    "\25\0\1\u02b6\23\0\1\u02b7\24\0\24\u02b8\1\0\10\u02b8"+
    "\24\u02a8\1\u02b9\10\u02a8\24\u02ba\1\0\10\u02ba\24\u02aa\1\u02bb"+
    "\10\u02aa\26\0\1\u02bc\30\0\1\44\34\0\1\u02bd\30\0"+
    "\1\u02be\24\0\1\u02bf\43\0\1\u02c0\20\0\2\u02c1\1\0"+
    "\2\u02c1\6\0\1\u02c2\7\0\1\u02c3\7\0\1\u02c1\24\u02c4"+
    "\1\0\10\u02c4\24\u02b3\1\u02c5\10\u02b3\26\0\1\u02c6\30\0"+
    "\1\52\20\0\1\u02c7\26\0\24\u02c8\1\0\10\u02c8\24\u02b8"+
    "\1\u02c9\10\u02b8\26\0\1\u02ca\6\0\24\u02ba\1\u02cb\10\u02ba"+
    "\26\0\1\u02cc\15\0\1\u02cd\36\0\1\u02ce\50\0\1\u02cf"+
    "\31\0\1\u02d0\34\0\1\u02d1\13\0\2\u02c1\1\0\2\u02c1"+
    "\6\0\1\u02c2\7\0\1\u02d2\7\0\1\u02c1\3\0\1\u02d3"+
    "\2\0\1\u02d3\3\0\1\u02d4\23\0\2\u02d5\1\0\1\u02d5"+
    "\2\0\1\u02d6\13\0\1\u02d7\2\0\1\u02d8\5\0\1\u02d5"+
    "\24\u02c4\1\u02d9\10\u02c4\26\0\1\u02da\15\0\1\u02db\47\0"+
    "\1\u02dc\12\0\24\u02c8\1\u02dd\10\u02c8\26\0\1\u02de\15\0"+
    "\1\u02df\53\0\1\u02e0\15\0\1\u02e1\54\0\1\u02e2\26\0"+
    "\1\u02e3\14\0\2\u02e4\1\0\2\u02e4\6\0\1\u02e5\7\0"+
    "\1\u02e6\7\0\1\u02e4\10\0\1\u02e7\51\0\1\356\16\0"+
    "\1\u02d6\13\0\1\u02d7\12\0\2\u02e8\1\0\1\u02e8\1\0"+
    "\1\u02e9\1\u02ea\1\u02eb\2\0\1\u02ec\10\0\1\u02d2\7\0"+
    "\1\u02e8\6\0\2\u02d3\3\0\1\u02ed\22\0\2\u02d5\1\0"+
    "\1\u02d5\21\0\1\u02d8\5\0\1\u02d5\27\0\1\u02ee\16\0"+
    "\1\u02ef\46\0\1\u02f0\37\0\1\u02f1\15\0\1\u02f2\54\0"+
    "\1\u02f3\15\0\1\u02f4\52\0\1\u02f5\15\0\1\u02f6\54\0"+
    "\1\u02f7\14\0\1\u02f8\54\0\1\u02f9\35\0\1\u02fa\12\0"+
    "\1\u02fb\27\0\2\u02e4\1\0\2\u02e4\6\0\1\u02e5\7\0"+
    "\1\u02fc\7\0\1\u02e4\3\0\1\u02fd\2\0\1\u02fd\3\0"+
    "\1\u02fe\23\0\2\u02ff\1\0\1\u02ff\2\0\1\u0300\13\0"+
    "\1\u0301\2\0\1\u0302\5\0\1\u02ff\25\0\1\u0303\10\0"+
    "\2\u02e8\1\0\1\u02e8\17\0\1\u02d2\7\0\1\u02e8\7\0"+
    "\1\u02e8\30\0\1\u02e8\4\0\3\u02e8\31\0\1\u0304\34\0"+
    "\1\u0305\34\0\1\u0306\55\0\1\u0307\21\0\1\u0308\30\0"+
    "\1\u0309\32\0\1\u030a\54\0\1\u030b\35\0\1\u030c\31\0"+
    "\1\u030d\16\0\1\u030e\54\0\1\u030f\35\0\1\u0310\33\0"+
    "\1\u0311\35\0\1\u0312\22\0\1\u0313\40\0\1\u0314\21\0"+
    "\1\u0300\13\0\1\u0301\12\0\2\u0315\1\0\1\u0315\1\0"+
    "\1\u0316\1\u0317\1\u0318\2\0\1\u0319\10\0\1\u02fc\7\0"+
    "\1\u0315\6\0\2\u02fd\3\0\1\u031a\22\0\2\u02ff\1\0"+
    "\1\u02ff\21\0\1\u0302\5\0\1\u02ff\27\0\1\u031b\16\0"+
    "\1\u031c\46\0\1\u031d\12\0\2\u031e\1\0\2\u031e\6\0"+
    "\1\u031f\7\0\1\u0320\7\0\1\u031e\1\0\2\u02e8\1\0"+
    "\1\u02e8\2\0\1\u0321\14\0\1\u02d2\7\0\1\u02e8\6\0"+
    "\1\u02e8\34\0\1\u02d3\36\0\1\u0322\3\0\1\u0323\42\0"+
    "\1\u0324\27\0\1\u0325\46\0\1\u0326\35\0\1\u0327\22\0"+
    "\1\u0328\17\0\2\u0329\1\0\2\u0329\6\0\1\u032a\7\0"+
    "\1\u032b\7\0\1\u0329\27\0\1\u032c\35\0\1\u032d\22\0"+
    "\1\u032e\46\0\1\u032f\21\0\1\u0330\30\0\1\u0331\33\0"+
    "\1\u0332\25\0\2\u0315\1\0\1\u0315\17\0\1\u02fc\7\0"+
    "\1\u0315\7\0\1\u0315\30\0\1\u0315\4\0\3\u0315\31\0"+
    "\1\u0333\34\0\1\u0334\34\0\1\u0335\55\0\1\u0336\21\0"+
    "\1\u0337\30\0\1\u0338\24\0\2\u031e\1\0\2\u031e\6\0"+
    "\1\u031f\7\0\1\u0339\7\0\1\u031e\3\0\1\u033a\2\0"+
    "\1\u033a\3\0\1\u033b\23\0\2\u033c\1\0\1\u033c\2\0"+
    "\1\u033d\13\0\1\u033e\2\0\1\u033f\5\0\1\u033c\3\0"+
    "\1\u02e8\50\0\1\u0340\25\0\1\u0341\24\0\25\u0342\1\0"+
    "\7\u0342\22\0\1\u0343\42\0\1\u0344\21\0\1\u0345\30\0"+
    "\1\u0346\24\0\2\u0329\1\0\2\u0329\6\0\1\u032a\7\0"+
    "\1\u0347\7\0\1\u0329\3\0\1\u0348\2\0\1\u0348\3\0"+
    "\1\u0349\23\0\2\u034a\1\0\1\u034a\2\0\1\u034b\13\0"+
    "\1\u034c\2\0\1\u034d\5\0\1\u034a\30\0\1\u034e\21\0"+
    "\1\u034f\30\0\1\u0350\32\0\1\u0351\44\0\1\u0352\46\0"+
    "\1\u0353\30\0\1\u0354\10\0\2\u0315\1\0\1\u0315\2\0"+
    "\1\u0355\14\0\1\u02fc\7\0\1\u0315\6\0\1\u0315\34\0"+
    "\1\u02fd\36\0\1\u0356\46\0\1\u0357\27\0\1\u0358\26\0"+
    "\1\u033d\13\0\1\u033e\12\0\2\u0359\1\0\1\u0359\1\0"+
    "\1\u035a\1\u035b\1\u035c\2\0\1\u035d\10\0\1\u035e\7\0"+
    "\1\u0359\6\0\2\u033a\3\0\1\u035f\22\0\2\u033c\1\0"+
    "\1\u033c\21\0\1\u033f\5\0\1\u033c\27\0\1\u0360\16\0"+
    "\1\u0361\46\0\1\u0362\33\0\1\u0363\34\0\1\u0364\12\0"+
    "\25\u0342\1\u0365\7\u0342\25\0\1\u02c1\16\0\1\u0366\44\0"+
    "\1\u0367\46\0\1\u0368\12\0\1\u034b\13\0\1\u034c\12\0"+
    "\2\u0369\1\0\1\u0369\1\0\1\u036a\1\u036b\1\u036c\2\0"+
    "\1\u036d\10\0\1\u036e\7\0\1\u0369\6\0\2\u0348\3\0"+
    "\1\u036f\22\0\2\u034a\1\0\1\u034a\21\0\1\u034d\5\0"+
    "\1\u034a\27\0\1\u0370\16\0\1\u0371\46\0\1\u0372\20\0"+
    "\1\u0373\44\0\1\u0374\46\0\1\u0375\15\0\1\u0376\53\0"+
    "\1\u0377\34\0\1\u0378\4\0\2\u0379\1\0\2\u0379\16\0"+
    "\1\u037a\7\0\1\u0379\3\0\1\u0315\50\0\1\u037b\15\0"+
    "\25\u037c\1\0\7\u037c\22\0\1\u037d\13\0\2\u0359\1\0"+
    "\1\u0359\17\0\1\u035e\7\0\1\u0359\7\0\1\u0359\30\0"+
    "\1\u0359\4\0\3\u0359\31\0\1\u037e\34\0\1\u037f\34\0"+
    "\1\u0380\13\0\1\u0381\20\0\1\u0382\55\0\1\u0383\21\0"+
    "\1\u0384\30\0\1\u0385\34\0\1\u0386\33\0\1\u0387\50\0"+
    "\1\u0388\22\0\1\u0389\53\0\1\u038a\34\0\1\u038b\4\0"+
    "\2\u0369\1\0\1\u0369\17\0\1\u036e\7\0\1\u0369\7\0"+
    "\1\u0369\30\0\1\u0369\4\0\3\u0369\31\0\1\u038c\34\0"+
    "\1\u038d\34\0\1\u038e\13\0\1\u038f\20\0\1\u0390\55\0"+
    "\1\u0391\21\0\1\u0392\30\0\1\u0393\35\0\1\u0394\53\0"+
    "\1\u0395\34\0\1\u0396\25\0\1\u0397\24\0\1\u0398\32\0"+
    "\1\u0252\25\0\2\u0379\1\0\2\u0379\16\0\1\u0399\7\0"+
    "\1\u0379\1\0\2\u039a\1\0\1\u039a\2\0\1\u039b\13\0"+
    "\1\u039c\2\0\1\u039d\5\0\1\u039a\22\0\1\u039e\12\0"+
    "\25\u037c\1\u039f\7\u037c\25\0\1\u02e4\10\0\2\u0359\1\0"+
    "\1\u0359\2\0\1\u03a0\14\0\1\u035e\7\0\1\u0359\6\0"+
    "\1\u0359\55\0\1\u03a1\16\0\1\u03a2\31\0\1\u033a\42\0"+
    "\1\u03a3\1\u03a4\41\0\1\u03a5\27\0\1\u03a6\40\0\1\u03a7"+
    "\13\0\24\u03a8\1\0\10\u03a8\7\0\1\u02d6\47\0\1\u03a9"+
    "\24\0\1\u03aa\32\0\1\u025d\25\0\2\u0369\1\0\1\u0369"+
    "\2\0\1\u03ab\14\0\1\u036e\7\0\1\u0369\6\0\1\u0369"+
    "\55\0\1\u03ac\16\0\1\u03ad\31\0\1\u0348\42\0\1\u03ae"+
    "\1\u03af\41\0\1\u03b0\27\0\1\u03b1\41\0\1\u03b2\24\0"+
    "\1\u03b3\32\0\1\u03b4\46\0\1\u03b5\33\0\1\u03b6\22\0"+
    "\1\u039b\13\0\1\u039c\12\0\2\u039a\1\0\1\u039a\21\0"+
    "\1\u039d\5\0\1\u039a\27\0\1\u03b7\16\0\1\u03b8\46\0"+
    "\1\u03b9\22\0\1\u03ba\47\0\1\u03bb\13\0\1\u0359\61\0"+
    "\1\u03bc\21\0\1\u03bd\27\0\1\u03be\43\0\1\u03bf\15\0"+
    "\25\u03c0\1\0\7\u03c0\22\0\1\u03c1\20\0\1\u03c2\26\0"+
    "\24\u03a8\1\u03c3\10\u03a8\22\0\1\u03c4\33\0\1\u03c5\16\0"+
    "\1\u0369\61\0\1\u03c6\21\0\1\u03c7\27\0\1\u03c8\43\0"+
    "\1\u03c9\15\0\25\u03ca\1\0\7\u03ca\22\0\1\u03cb\34\0"+
    "\1\u03cc\33\0\1\u03cd\40\0\1\u03ce\21\0\1\u03cf\33\0"+
    "\1\u0252\53\0\1\u03d0\21\0\1\u03d1\30\0\1\u03d2\44\0"+
    "\1\u03d3\22\0\1\u0300\41\0\1\u03a3\42\0\1\u03d4\34\0"+
    "\1\u03d5\43\0\1\u03d6\3\0\25\u03c0\1\u03d7\7\u03c0\25\0"+
    "\1\u03d8\31\0\1\u03d9\40\0\1\u03da\20\0\1\u03db\33\0"+
    "\1\u025d\37\0\1\u03ae\42\0\1\u03dc\34\0\1\u03dd\43\0"+
    "\1\u03de\3\0\25\u03ca\1\u03df\7\u03ca\25\0\1\u0329\21\0"+
    "\1\u03e0\33\0\1\u03b4\24\0\2\u03ce\1\0\2\u03ce\4\0"+
    "\1\u03e1\1\0\1\u03e2\7\0\1\u01cd\7\0\1\u03ce\21\0"+
    "\1\u0378\30\0\1\u03e3\41\0\1\u03e4\27\0\1\u03e5\25\0"+
    "\1\u03e6\26\0\25\u03e7\1\0\7\u03e7\10\0\1\u03e8\40\0"+
    "\1\u03e9\44\0\1\u03ea\20\0\1\u03eb\33\0\1\u03ec\46\0"+
    "\1\u038b\13\0\25\u03ed\1\0\7\u03ed\10\0\1\u03ee\40\0"+
    "\1\u03ef\44\0\1\u03f0\31\0\1\u0396\14\0\2\u01cf\1\0"+
    "\1\u01cf\7\0\1\u03f1\7\0\1\u01d1\7\0\1\u01cf\3\0"+
    "\1\u03f2\2\0\1\u03f2\3\0\1\u03f3\41\0\1\u03f4\15\0"+
    "\25\u03f5\1\0\7\u03f5\22\0\1\u03f6\34\0\1\u03f7\12\0"+
    "\25\u03e7\1\u03f8\7\u03e7\24\u03f9\1\0\10\u03f9\11\0\1\u03fa"+
    "\32\0\1\u033d\25\0\24\u03fb\1\0\10\u03fb\27\0\1\u03fc"+
    "\5\0\25\u03ed\1\u03fd\7\u03ed\24\u03fe\1\0\10\u03fe\11\0"+
    "\1\u03ff\32\0\1\u034b\26\0\2\u01cf\1\u0400\1\u01cf\1\0"+
    "\1\u0400\3\0\1\u0401\1\0\1\u0402\7\0\1\u01d1\7\0"+
    "\1\u01cf\1\0\2\u0403\1\0\1\u0403\1\0\1\u0404\1\u0405"+
    "\1\u0406\2\0\1\u0407\10\0\1\u01cd\7\0\1\u0403\6\0"+
    "\2\u03f2\3\0\1\u0408\52\0\1\u0409\3\0\25\u03f5\1\u040a"+
    "\7\u03f5\25\0\1\u040b\17\0\1\u040c\50\0\1\u040d\10\0"+
    "\24\u03f9\1\u040e\10\u03f9\16\0\1\u040f\16\0\24\u03fb\1\u0410"+
    "\10\u03fb\30\0\1\u0411\30\0\1\u0412\10\0\24\u03fe\1\u0413"+
    "\10\u03fe\16\0\1\u0414\17\0\2\u01cf\1\0\1\u01cf\1\0"+
    "\1\u0415\1\u0416\1\u0417\2\0\1\u0418\10\0\1\u01d1\7\0"+
    "\1\u01cf\6\0\2\u0400\3\0\1\u0419\24\0\1\u0400\2\0"+
    "\1\u0400\3\0\1\u0401\23\0\2\u0403\1\0\1\u0403\17\0"+
    "\1\u01cd\7\0\1\u0403\7\0\1\u0403\30\0\1\u0403\4\0"+
    "\3\u0403\31\0\1\u041a\34\0\1\u041b\34\0\1\u041c\41\0"+
    "\1\u041d\44\0\1\u041e\10\0\24\u041f\1\0\10\u041f\7\0"+
    "\1\u0380\53\0\1\u0420\6\0\24\u0421\1\0\10\u0421\26\0"+
    "\1\u0422\22\0\1\u0423\27\0\1\u038e\53\0\1\u0424\6\0"+
    "\24\u0425\1\0\10\u0425\7\0\1\u01cf\30\0\1\u01cf\4\0"+
    "\3\u01cf\31\0\1\u0426\34\0\1\u0427\34\0\1\u0428\26\0"+
    "\2\u0403\1\0\1\u0403\2\0\1\u0429\14\0\1\u01cd\7\0"+
    "\1\u0403\6\0\1\u0403\34\0\1\u03f2\37\0\1\u042a\32\0"+
    "\1\u039b\25\0\24\u041f\1\u042b\10\u041f\7\0\1\u042c\25\0"+
    "\24\u0421\1\u042d\10\u0421\7\0\1\u042e\35\0\1\u042f\33\0"+
    "\1\u0430\25\0\24\u0425\1\u0431\10\u0425\1\0\2\u01cf\1\0"+
    "\1\u01cf\2\0\1\u0432\14\0\1\u01d1\7\0\1\u01cf\6\0"+
    "\1\u01cf\34\0\1\u0400\31\0\1\u0403\47\0\1\u0433\44\0"+
    "\1\u0434\35\0\1\u0435\33\0\1\u0436\35\0\1\u0437\27\0"+
    "\1\u0438\41\0\1\u0439\33\0\1\u043a\11\0\1\u01cf\31\0"+
    "\24\u043b\1\0\10\u043b\7\0\1\u043c\55\0\1\u043d\13\0"+
    "\1\u043e\55\0\1\u043f\14\0\1\u02be\54\0\1\u0440\13\0"+
    "\1\u0441\25\0\24\u043b\1\u0442\10\u043b\27\0\1\u0443\21\0"+
    "\1\u0444\47\0\1\u0445\15\0\1\u0446\40\0\1\u0447\47\0"+
    "\1\u0448\33\0\1\u0449\36\0\1\u044a\14\0\1\u044b\54\0"+
    "\1\u044c\23\0\1\u044d\25\0\1\u044e\54\0\1\u044f\13\0"+
    "\1\u0450\35\0\1\u0451\46\0\1\u0452\27\0\1\u0453\41\0"+
    "\1\u0454\34\0\1\u0455\27\0\1\u0456\46\0\1\u0457\24\0"+
    "\1\u0458\25\0\1\u0459\43\0\1\u045a\26\0\1\u045b\33\0"+
    "\1\u045c\43\0\1\u045d\45\0\1\u045e\26\0\1\u045f\37\0"+
    "\1\u0460\40\0\1\u0461\24\0\1\u0462\40\0\1\u0463\40\0"+
    "\1\u0464\20\0\1\u0465\30\0\1\u0466\24\0\2\u0467\1\0"+
    "\2\u0467\16\0\1\u0468\7\0\1\u0467\14\0\1\u0469\26\0"+
    "\1\u046a\27\0\2\u046b\1\0\2\u046b\16\0\1\u046c\7\0"+
    "\1\u046b\14\0\1\u046d\37\0\1\u046e\36\0\1\u046f\14\0"+
    "\2\u0467\1\0\2\u0467\16\0\1\u0470\7\0\1\u0467\1\0"+
    "\2\u0471\1\0\1\u0471\2\0\1\u0472\13\0\1\u0473\2\0"+
    "\1\u0474\5\0\1\u0471\11\0\1\u0475\45\0\1\u0476\13\0"+
    "\2\u046b\1\0\2\u046b\16\0\1\u0477\7\0\1\u046b\1\0"+
    "\2\u0478\1\0\1\u0478\2\0\1\u0479\13\0\1\u047a\2\0"+
    "\1\u047b\5\0\1\u0478\11\0\1\u047c\54\0\1\u047d\11\0"+
    "\1\u047e\35\0\1\u0472\13\0\1\u0473\12\0\2\u0471\1\0"+
    "\1\u0471\21\0\1\u0474\5\0\1\u0471\27\0\1\u047f\16\0"+
    "\1\u0480\46\0\1\u0481\27\0\1\u0482\26\0\1\u0483\33\0"+
    "\1\u0479\13\0\1\u047a\12\0\2\u0478\1\0\1\u0478\21\0"+
    "\1\u047b\5\0\1\u0478\27\0\1\u0484\16\0\1\u0485\46\0"+
    "\1\u0486\27\0\1\u0487\32\0\1\u0488\42\0\1\u0489\42\0"+
    "\1\u048a\21\0\1\u048b\30\0\1\u048c\50\0\1\u048d\34\0"+
    "\1\u048e\37\0\1\u048f\21\0\1\u0490\30\0\1\u0491\50\0"+
    "\1\u0492\20\0\1\u0493\33\0\1\u0494\41\0\1\u0495\41\0"+
    "\1\u0496\27\0\1\u0497\20\0\2\u0498\1\0\2\u0498\6\0"+
    "\1\u0499\7\0\1\u049a\7\0\1\u0498\1\0\2\u049b\1\0"+
    "\2\u049b\6\0\1\u049c\7\0\1\u049d\7\0\1\u049b\15\0"+
    "\1\u049e\41\0\1\u049f\27\0\1\u04a0\20\0\2\u04a1\1\0"+
    "\2\u04a1\6\0\1\u04a2\7\0\1\u04a3\7\0\1\u04a1\16\0"+
    "\1\u0494\43\0\1\u04a4\26\0\1\u04a5\15\0\25\u04a6\1\0"+
    "\7\u04a6\22\0\1\u04a7\13\0\2\u0498\1\0\2\u0498\6\0"+
    "\1\u0499\7\0\1\u04a8\7\0\1\u0498\3\0\1\u04a9\2\0"+
    "\1\u04a9\3\0\1\u04aa\23\0\2\u04ab\1\0\1\u04ab\2\0"+
    "\1\u04ac\13\0\1\u04ad\2\0\1\u04ae\5\0\1\u04ab\1\0"+
    "\2\u049b\1\0\2\u049b\6\0\1\u049c\7\0\1\u04af\7\0"+
    "\1\u049b\3\0\1\u04b0\2\0\1\u04b0\3\0\1\u04b1\23\0"+
    "\2\u04b2\1\0\1\u04b2\2\0\1\u04b3\13\0\1\u04b4\2\0"+
    "\1\u04b5\5\0\1\u04b2\17\0\1\u04b6\15\0\25\u04b7\1\0"+
    "\7\u04b7\22\0\1\u04b8\13\0\2\u04a1\1\0\2\u04a1\6\0"+
    "\1\u04a2\7\0\1\u04b9\7\0\1\u04a1\3\0\1\u04ba\2\0"+
    "\1\u04ba\3\0\1\u04bb\23\0\2\u04bc\1\0\1\u04bc\2\0"+
    "\1\u04bd\13\0\1\u04be\2\0\1\u04bf\5\0\1\u04bc\24\0"+
    "\1\u04c0\41\0\1\u04c1\3\0\25\u04a6\1\u04c2\7\u04a6\25\0"+
    "\1\u04c3\16\0\1\u04ac\13\0\1\u04ad\12\0\2\u04c4\1\0"+
    "\1\u04c4\1\0\1\u04c5\1\u04c6\1\u04c7\2\0\1\u04c8\10\0"+
    "\1\u04a8\7\0\1\u04c4\6\0\2\u04a9\3\0\1\u04c9\22\0"+
    "\2\u04ab\1\0\1\u04ab\21\0\1\u04ae\5\0\1\u04ab\27\0"+
    "\1\u04ca\16\0\1\u04cb\46\0\1\u04cc\20\0\1\u04b3\13\0"+
    "\1\u04b4\12\0\2\u04cd\1\0\1\u04cd\1\0\1\u04ce\1\u04cf"+
    "\1\u04d0\2\0\1\u04d1\10\0\1\u04af\7\0\1\u04cd\6\0"+
    "\2\u04b0\3\0\1\u04d2\22\0\2\u04b2\1\0\1\u04b2\21\0"+
    "\1\u04b5\5\0\1\u04b2\27\0\1\u04d3\16\0\1\u04d4\46\0"+
    "\1\u04d5\42\0\1\u04d6\3\0\25\u04b7\1\u04d7\7\u04b7\25\0"+
    "\1\u04d8\16\0\1\u04bd\13\0\1\u04be\12\0\2\u04d9\1\0"+
    "\1\u04d9\1\0\1\u04da\1\u04db\1\u04dc\2\0\1\u04dd\10\0"+
    "\1\u04b9\7\0\1\u04d9\6\0\2\u04ba\3\0\1\u04de\22\0"+
    "\2\u04bc\1\0\1\u04bc\21\0\1\u04bf\5\0\1\u04bc\27\0"+
    "\1\u04df\16\0\1\u04e0\46\0\1\u04e1\12\0\2\u04c0\1\0"+
    "\1\u04c0\21\0\1\u04e2\5\0\1\u04c0\14\0\1\u04e3\44\0"+
    "\1\u04e4\11\0\2\u04c4\1\0\1\u04c4\17\0\1\u04a8\7\0"+
    "\1\u04c4\7\0\1\u04c4\30\0\1\u04c4\4\0\3\u04c4\31\0"+
    "\1\u04e5\34\0\1\u04e6\34\0\1\u04e7\55\0\1\u04e8\21\0"+
    "\1\u04e9\30\0\1\u04ea\24\0\2\u04cd\1\0\1\u04cd\17\0"+
    "\1\u04af\7\0\1\u04cd\7\0\1\u04cd\30\0\1\u04cd\4\0"+
    "\3\u04cd\31\0\1\u04eb\34\0\1\u04ec\34\0\1\u04ed\55\0"+
    "\1\u04ee\21\0\1\u04ef\30\0\1\u04f0\37\0\1\u04f1\44\0"+
    "\1\u04f2\11\0\2\u04d9\1\0\1\u04d9\17\0\1\u04b9\7\0"+
    "\1\u04d9\7\0\1\u04d9\30\0\1\u04d9\4\0\3\u04d9\31\0"+
    "\1\u04f3\34\0\1\u04f4\34\0\1\u04f5\55\0\1\u04f6\21\0"+
    "\1\u04f7\30\0\1\u04f8\46\0\1\u04f9\22\0\1\u04fa\32\0"+
    "\1\u0472\26\0\2\u04c4\1\0\1\u04c4\2\0\1\u04fb\14\0"+
    "\1\u04a8\7\0\1\u04c4\6\0\1\u04c4\34\0\1\u04a9\42\0"+
    "\1\u04fc\42\0\1\u04fd\27\0\1\u04fe\20\0\2\u04cd\1\0"+
    "\1\u04cd\2\0\1\u04ff\14\0\1\u04af\7\0\1\u04cd\6\0"+
    "\1\u04cd\34\0\1\u04b0\42\0\1\u0500\42\0\1\u0501\27\0"+
    "\1\u0502\30\0\1\u0503\32\0\1\u0479\26\0\2\u04d9\1\0"+
    "\1\u04d9\2\0\1\u0504\14\0\1\u04b9\7\0\1\u04d9\6\0"+
    "\1\u04d9\34\0\1\u04ba\42\0\1\u0505\42\0\1\u0506\27\0"+
    "\1\u0507\30\0\1\u0508\41\0\1\u0509\21\0\1\u04c4\41\0"+
    "\1\u050a\24\0\25\u050b\1\0\7\u050b\22\0\1\u050c\15\0"+
    "\1\u04cd\41\0\1\u050d\24\0\25\u050e\1\0\7\u050e\22\0"+
    "\1\u050f\30\0\1\u0510\21\0\1\u04d9\41\0\1\u0511\24\0"+
    "\25\u0512\1\0\7\u0512\22\0\1\u0513\27\0\1\u0514\17\0"+
    "\24\u0515\1\0\10\u0515\22\0\1\u0516\12\0\25\u050b\1\u0517"+
    "\7\u050b\25\0\1\u0518\31\0\1\u0519\12\0\25\u050e\1\u051a"+
    "\7\u050e\25\0\1\u051b\7\0\24\u051c\1\0\10\u051c\22\0"+
    "\1\u051d\12\0\25\u0512\1\u051e\7\u0512\25\0\1\u051f\31\0"+
    "\1\u0520\12\0\24\u0515\1\u0521\10\u0515\10\0\1\u0522\50\0"+
    "\1\u0523\20\0\1\u0524\50\0\1\u0525\10\0\24\u051c\1\u0526"+
    "\10\u051c\10\0\1\u0527\50\0\1\u0528\35\0\1\u0529\35\0"+
    "\1\u052a\6\0\24\u052b\1\0\10\u052b\7\0\1\u04ac\25\0"+
    "\24\u052c\1\0\10\u052c\7\0\1\u04b3\53\0\1\u052d\6\0"+
    "\24\u052e\1\0\10\u052e\7\0\1\u04bd\34\0\1\u052f\25\0"+
    "\24\u052b\1\u0530\10\u052b\24\u052c\1\u0531\10\u052c\7\0\1\u0532"+
    "\25\0\24\u052e\1\u0533\10\u052e\27\0\1\u0534\33\0\1\u0535"+
    "\34\0\1\u0536\35\0\1\u0537\33\0\1\u0538\36\0\1\u0539"+
    "\13\0\1\u053a\34\0\1\u053b\55\0\1\u053c\13\0\1\u053d"+
    "\42\0\1\u053e\46\0\1\u053f\34\0\1\u0540\22\0\1\u0541"+
    "\46\0\1\u0542\24\0\1\u0543\45\0\1\u0544\34\0\1\u0545"+
    "\23\0\1\u0546\45\0\1\u0547\35\0\1\u0548\17\0\1\u0549"+
    "\34\0\1\u054a\51\0\1\u054b\17\0\1\u054c\34\0\1\u054d"+
    "\30\0\1\u054e\34\0\1\u047e\40\0\1\u054f\30\0\1\u0550"+
    "\35\0\1\u0551\45\0\1\u0552\23\0\1\u0553\45\0\1\u0554"+
    "\30\0\1\u0555\26\0\1\u0555\42\0\1\u0556\26\0\1\u0556"+
    "\51\0\1\u0557\34\0\1\u0558\33\0\1\u0559\34\0\1\u055a"+
    "\11\0\2\u0559\1\0\1\u0559\21\0\1\u055b\5\0\1\u0559"+
    "\1\0\2\u055a\1\0\1\u055a\21\0\1\u055c\5\0\1\u055a"+
    "\23\0\1\u055d\34\0\1\u055e\22\0\1\u055f\34\0\1\u0560"+
    "\40\0\1\u0561\34\0\1\u0562\41\0\1\u0563\34\0\1\u0564"+
    "\37\0\1\u0565\34\0\1\u0566\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39585];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\2\11\2\1\1\11\1\1\11\0"+
    "\1\1\10\0\1\11\u019a\0\1\1\265\0\1\1\222\0"+
    "\1\1\120\0\1\1\203\0\1\1\62\0\1\1\124\0"+
    "\1\1\2\0\1\1\51\0\2\1\3\0\1\1\21\0"+
    "\1\1\36\0\1\1\24\0\1\1\77\0\1\1\2\0"+
    "\1\1\3\0\1\1\11\0\1\11\55\0\2\1\14\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1382];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RiferimentiAutorita(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 10: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 11: break;
        case 3: 
          { offset++;
			
			if( offset >= riferimento.length() ) {
				
				offset = 0;
				riferimento = "";
				closeRifs();
				
				yypushback(1);
				yybegin(YYINITIAL);
			}
			
			output.append(yytext());
          }
        case 12: break;
        case 4: 
          { 
          }
        case 13: break;
        case 5: 
          { output.append(yytext()); yybegin(AH);
          }
        case 14: break;
        case 6: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 15: break;
        case 7: 
          { offset += yylength();
		saveRif(yytext());
          }
        case 16: break;
        case 8: 
          { openRifs();
						readAttributiAutorita(yytext());
						saveRif(yytext());
						closeRifs();
          }
        case 17: break;
        case 9: 
          { openRifs();
			riferimento = yytext();
			readAttributiAutorita(yytext());
			yypushback(yylength());
			offset = 0;
			yybegin(s50);
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java RiferimentiAutorita [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        RiferimentiAutorita scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new RiferimentiAutorita(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
