/*******************************************************************************
 * Copyright (c) 2016 Institute of Legal Information Theory and Techniques (ITTIG).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL license v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Contributors: 
 *   Institute of Legal Information Theory and Techniques (ITTIG/CNR)
 *******************************************************************************/
/* The following code was generated by JFlex 1.5.1 */

package it.cnr.ittig.linkoln.scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>Tipi.jflex</tt>
 */
public class Tipi {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int AH = 2;
  public static final int LS = 4;
  public static final int LK = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\2\1\44\1\45\1\1\22\0\1\5\6\0\1\0"+
    "\1\42\1\43\2\0\1\0\1\3\1\34\1\31\12\0\2\0\1\26"+
    "\1\0\1\30\2\0\1\11\1\41\1\17\1\35\1\13\1\4\1\14"+
    "\1\4\1\7\1\4\1\33\1\32\1\37\1\16\1\12\1\23\1\4"+
    "\1\24\1\21\1\25\1\22\1\40\1\4\1\27\1\4\1\36\4\0"+
    "\1\3\1\0\1\11\1\41\1\17\1\15\1\13\1\4\1\14\1\4"+
    "\1\7\2\4\1\10\1\37\1\16\1\12\1\23\1\4\1\24\1\21"+
    "\1\25\1\22\1\40\1\4\1\27\1\4\1\36\12\0\1\44\56\0"+
    "\1\0\13\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\5\0\2\0\6\0\2\0\2\0\2\0\4\0\2\0\5\0"+
    "\2\0\65\0\2\6\115\0\1\20\u1e93\0\1\3\1\3\4\0\1\0"+
    "\16\0\1\44\1\44\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\4\1\1\2\2\3\1\1\1\2\1\1\15\0"+
    "\1\1\51\0\1\4\1\5\6\0\2\6\1\0\4\7"+
    "\3\0\1\7\6\0\4\10\4\0\1\10\6\0\4\11"+
    "\2\0\2\11\10\0\4\12\2\0\1\12\1\0\2\13"+
    "\1\0\1\13\5\14\5\0\1\15\4\0\2\6\14\0"+
    "\4\16\3\0\2\16\3\0\2\17\1\0\1\17\6\0"+
    "\4\14\7\0\2\14\3\0\3\20\13\0\5\21\10\0"+
    "\1\21\1\0\1\21\3\0\3\22\2\0\1\22\14\0"+
    "\2\7\4\0\3\23\23\0\5\24\4\0\1\24\1\0"+
    "\2\24\1\0\1\24\7\0\3\10\14\0\3\25\1\11"+
    "\3\0\2\26\4\27\2\0\1\27\1\0\3\30\1\0"+
    "\1\30\3\0\4\31\4\0\2\31\27\0\2\12\1\0"+
    "\1\12\1\0\3\10\12\0\1\6\6\0\1\16\1\0"+
    "\3\16\14\0\3\32\5\0\2\33\1\0\3\33\43\0"+
    "\1\21\1\0\3\21\5\0\3\34\2\0\1\34\14\0"+
    "\3\35\1\0\1\35\3\36\1\0\1\36\10\0\1\16"+
    "\4\0\2\10\11\0\1\33\20\0\1\31\1\0\3\31"+
    "\1\0\2\12\2\0\2\12\6\0\1\21\1\0\3\37"+
    "\1\0\1\37\3\40\1\0\1\40\11\0\3\41\1\0"+
    "\1\41\7\0\1\10\11\0\3\42\5\0\2\14\6\0"+
    "\3\43\1\0\1\43\1\0\4\44\12\0\1\31\2\0"+
    "\2\22\1\0\3\12\6\0\3\45\1\0\1\45\6\0"+
    "\2\46\1\0\1\46\20\0\3\47\1\0\1\47\2\50"+
    "\10\0\2\51\30\0\3\52\2\0\1\52\17\0\4\53"+
    "\11\0\4\33\3\0\5\54\75\0\3\55\1\0\1\55"+
    "\20\0\3\56\1\0\1\56\6\0\1\27\1\0\1\27"+
    "\21\0\3\57\1\0\1\57\2\0\2\60\22\0\3\61"+
    "\1\0\1\61\12\0\2\62\1\0\1\62\35\0\2\63"+
    "\31\0\2\64\3\0\2\65\1\0\2\63\37\0\2\66"+
    "\3\67\1\0\1\67\7\0\2\70\21\0\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[1069];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\230\0\u0130\0\344\0\u0156\0\344\0\u017c\0\u01a2\0\u01c8"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8"+
    "\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428"+
    "\0\u0156\0\u044e\0\u017c\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u0792\0\u07b8\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c"+
    "\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0402\0\344\0\u0980"+
    "\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\344\0\u0a64\0\u0a8a"+
    "\0\344\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u09f2"+
    "\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\344\0\u0c78"+
    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8"+
    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\344\0\u0e8c\0\u0eb2"+
    "\0\u0ed8\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc"+
    "\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\344\0\u10a0\0\u10c6"+
    "\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\344\0\u11aa\0\u11d0"+
    "\0\u11f6\0\344\0\u121c\0\u1242\0\u1268\0\u128e\0\u128e\0\u12b4"+
    "\0\u12da\0\u1300\0\u1326\0\344\0\u134c\0\u1372\0\u1398\0\u13be"+
    "\0\u13e4\0\u140a\0\u0ad6\0\u0afc\0\u1430\0\u1456\0\u147c\0\u14a2"+
    "\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\344\0\u15ac"+
    "\0\u15d2\0\u15f8\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u0c9e"+
    "\0\u0cc4\0\u16dc\0\344\0\u1702\0\u1728\0\u174e\0\u1774\0\u179a"+
    "\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca"+
    "\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae\0\u19d4"+
    "\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\344\0\u1a92\0\u1ab8\0\u0eb2"+
    "\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8"+
    "\0\u1c0e\0\u1c34\0\344\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1ccc"+
    "\0\u1cf2\0\u1d18\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc"+
    "\0\u1e22\0\u1e48\0\u10c6\0\u10ec\0\u1e6e\0\344\0\u1e94\0\u1eba"+
    "\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\u1f78\0\u1f9e\0\u1242\0\u1268"+
    "\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082\0\u20a8\0\u20ce"+
    "\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\344\0\u21b2\0\u21d8"+
    "\0\u21fe\0\u2224\0\u224a\0\u2270\0\u15d2\0\u15f8\0\u2296\0\u16b6"+
    "\0\u22bc\0\u22e2\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6"+
    "\0\u23ec\0\u2412\0\u2438\0\344\0\u245e\0\u2484\0\u24aa\0\u24d0"+
    "\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u258e\0\u25b4\0\u25da"+
    "\0\u2600\0\u2626\0\u264c\0\u2672\0\u2698\0\u187e\0\u18a4\0\u19fa"+
    "\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2\0\u27c8"+
    "\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2\0\u28f8"+
    "\0\344\0\u291e\0\u2944\0\u296a\0\u296a\0\u2990\0\u29b6\0\344"+
    "\0\u29dc\0\344\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u2ac0"+
    "\0\u2ae6\0\344\0\u2b0c\0\u2b32\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4"+
    "\0\u2bca\0\344\0\u2bf0\0\u2c16\0\u2c3c\0\u2c62\0\u2c88\0\u2cae"+
    "\0\u2cd4\0\u2cfa\0\u2d20\0\u1c80\0\u1ca6\0\u1e48\0\u2d46\0\u2d6c"+
    "\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c"+
    "\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u1eba\0\u2fa6"+
    "\0\u2fcc\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6"+
    "\0\u153a\0\u30fc\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0"+
    "\0\u20f4\0\u3206\0\u322c\0\u3252\0\u3278\0\u3278\0\u329e\0\u32c4"+
    "\0\u32ea\0\u3310\0\u3336\0\u335c\0\u3382\0\u33a8\0\u33ce\0\u33f4"+
    "\0\u341a\0\u3440\0\u2484\0\u24aa\0\u3466\0\u348c\0\u34b2\0\u34d8"+
    "\0\u34fe\0\u25da\0\u3524\0\u354a\0\344\0\u3570\0\u3596\0\u35bc"+
    "\0\u35e2\0\u270a\0\u3608\0\u362e\0\344\0\u3654\0\u367a\0\u36a0"+
    "\0\u36c6\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa\0\u37d0"+
    "\0\u2a28\0\u2a4e\0\u37f6\0\u381c\0\u3842\0\u3868\0\u388e\0\u38b4"+
    "\0\u38da\0\u2c16\0\u2c3c\0\u2d20\0\u3900\0\u3926\0\u394c\0\u3972"+
    "\0\u3998\0\u39be\0\u39e4\0\u3a0a\0\u3a30\0\u3a56\0\u3a7c\0\u3aa2"+
    "\0\u3ac8\0\u3aee\0\u3b14\0\u3b3a\0\u3b60\0\u3b86\0\u3bac\0\u3bd2"+
    "\0\u3bf8\0\u3c1e\0\u3c44\0\u3c6a\0\u3c90\0\u3cb6\0\u3cdc\0\344"+
    "\0\u3d02\0\u3d28\0\u3d28\0\u3d4e\0\u3d74\0\u3d9a\0\u303e\0\u3dc0"+
    "\0\u11f6\0\u3de6\0\u3e0c\0\u3e32\0\u3e58\0\u3e7e\0\u3ea4\0\u3eca"+
    "\0\u3ef0\0\344\0\u3f16\0\u3f3c\0\u3f3c\0\u3f62\0\344\0\u3f88"+
    "\0\u3fae\0\u3fae\0\u3fd4\0\u3ffa\0\u4020\0\u4046\0\u406c\0\u4092"+
    "\0\u40b8\0\u40de\0\u4104\0\u412a\0\u4150\0\u4176\0\u419c\0\u41c2"+
    "\0\u41e8\0\u420e\0\u4234\0\u425a\0\u4280\0\u42a6\0\u42cc\0\u42f2"+
    "\0\u4318\0\u433e\0\u4364\0\u438a\0\u43b0\0\u43d6\0\u43fc\0\u4422"+
    "\0\u4448\0\u446e\0\u4494\0\u44ba\0\u44e0\0\u4506\0\u452c\0\u4552"+
    "\0\u4578\0\u459e\0\u45c4\0\u45ea\0\u4610\0\u4636\0\u465c\0\u4682"+
    "\0\u46a8\0\u46ce\0\u46f4\0\u471a\0\u4740\0\u4766\0\u478c\0\u47b2"+
    "\0\u47d8\0\u47fe\0\u4824\0\u484a\0\u4870\0\u4896\0\u48bc\0\u48e2"+
    "\0\344\0\u4908\0\u492e\0\u492e\0\u4954\0\344\0\u497a\0\u49a0"+
    "\0\u49a0\0\u49c6\0\u49ec\0\u4a12\0\u4a38\0\u4a5e\0\u4a84\0\u4aaa"+
    "\0\u4ad0\0\u4af6\0\u4b1c\0\344\0\u4b42\0\u4b68\0\u4b68\0\u4b8e"+
    "\0\u4bb4\0\u4bda\0\u4c00\0\u4c26\0\u4c4c\0\u4c72\0\u4c98\0\u4cbe"+
    "\0\u4ce4\0\u4d0a\0\u4d30\0\u4d56\0\u4d7c\0\u4da2\0\u4dc8\0\u420e"+
    "\0\u4dee\0\344\0\u4e14\0\u4e3a\0\u4e60\0\u4e86\0\u4eac\0\u4ed2"+
    "\0\u4ef8\0\u4f1e\0\u4f44\0\u4f6a\0\u4f90\0\u4fb6\0\u4fdc\0\u5002"+
    "\0\u5028\0\344\0\u504e\0\u5074\0\u5074\0\u509a\0\u50c0\0\344"+
    "\0\u50e6\0\u510c\0\u5132\0\u5158\0\u517e\0\u51a4\0\u51ca\0\u51f0"+
    "\0\u5216\0\u523c\0\u5262\0\u5288\0\u52ae\0\u52d4\0\u52fa\0\u471a"+
    "\0\u5320\0\u4a38\0\u5346\0\u536c\0\u5392\0\u53b8\0\u53de\0\u5404"+
    "\0\u542a\0\u5450\0\u5476\0\u549c\0\344\0\u54c2\0\u54e8\0\u54e8"+
    "\0\u550e\0\u5534\0\u555a\0\u5580\0\u308a\0\u55a6\0\u55cc\0\344"+
    "\0\u55f2\0\u5618\0\u563e\0\u5664\0\u568a\0\u56b0\0\u56d6\0\u56fc"+
    "\0\u5722\0\u5748\0\u576e\0\u5794\0\u57ba\0\u57e0\0\u1690\0\u5806"+
    "\0\u582c\0\u5852\0\u5878\0\344\0\u589e\0\u58c4\0\u58c4\0\u58ea"+
    "\0\344\0\u5910\0\u5936\0\u595c\0\u5982\0\u59a8\0\u59ce\0\u4f44"+
    "\0\u59f4\0\u5a1a\0\344\0\u5a40\0\u5a66\0\u5a8c\0\u2ac0\0\u5ab2"+
    "\0\u5ad8\0\u510c\0\u5132\0\u5afe\0\u5b24\0\u5b4a\0\u5b70\0\u5b96"+
    "\0\u5bbc\0\u5be2\0\u5c08\0\u5c2e\0\u5c54\0\u5392\0\u53b8\0\u5c7a"+
    "\0\u5ca0\0\u5cc6\0\u5cec\0\u5d12\0\344\0\u5d38\0\u5d5e\0\u5d5e"+
    "\0\u5d84\0\u5daa\0\u5dd0\0\u5df6\0\u5e1c\0\u5e42\0\u5e68\0\u5e8e"+
    "\0\u5eb4\0\u5eda\0\u5f00\0\u5f26\0\u5f4c\0\u5f72\0\u5f98\0\u5fbe"+
    "\0\u5fe4\0\344\0\u600a\0\u6030\0\u6056\0\u607c\0\u33f4\0\u33a8"+
    "\0\u60a2\0\u60c8\0\u60ee\0\u6114\0\u613a\0\u6160\0\u6186\0\u61ac"+
    "\0\u61d2\0\u19fa\0\u36ec\0\u36a0\0\u61f8\0\344\0\u621e\0\u6244"+
    "\0\u626a\0\u6290\0\u6290\0\u62b6\0\u62dc\0\u6302\0\u6328\0\u634e"+
    "\0\u6374\0\u639a\0\u63c0\0\u63e6\0\u640c\0\u6432\0\u6458\0\u647e"+
    "\0\u64a4\0\u64ca\0\u64f0\0\u6516\0\u653c\0\u3c1e\0\u3bd2\0\u6562"+
    "\0\u6588\0\u65ae\0\u65d4\0\u65fa\0\u6620\0\u6646\0\u666c\0\u6692"+
    "\0\u66b8\0\u66de\0\u6704\0\u672a\0\u6750\0\u6776\0\u679c\0\u67c2"+
    "\0\u13e4\0\u6030\0\u6056\0\u67e8\0\u680e\0\u6834\0\u685a\0\u6880"+
    "\0\u68a6\0\u61ac\0\u61d2\0\u68cc\0\u6244\0\u626a\0\u68f2\0\u6918"+
    "\0\u693e\0\u6964\0\u698a\0\u69b0\0\u69d6\0\u69fc\0\u6a22\0\344"+
    "\0\u6a48\0\u6a6e\0\u6a6e\0\u6a94\0\u6aba\0\u6ae0\0\u6b06\0\u46a8"+
    "\0\u465c\0\u6b2c\0\u6b52\0\u6b78\0\u1dfc\0\u6b9e\0\u6bc4\0\u5daa"+
    "\0\u6bea\0\u6c10\0\u6c36\0\u6c5c\0\344\0\u6c82\0\u6ca8\0\u6ca8"+
    "\0\u6cce\0\u6cf4\0\u6d1a\0\u6d40\0\u6d66\0\u6d8c\0\u6db2\0\u6dd8"+
    "\0\u6dfe\0\u6e24\0\u6e4a\0\u6e70\0\u6e96\0\u6ebc\0\u6ee2\0\u6f08"+
    "\0\u6f2e\0\u6f54\0\u6f7a\0\u6fa0\0\u6fc6\0\u6fec\0\u7012\0\u7038"+
    "\0\u705e\0\u2b58\0\u7084\0\344\0\u70aa\0\u70d0\0\u70d0\0\u70f6"+
    "\0\u711c\0\u7142\0\344\0\u7168\0\u718e\0\u71b4\0\u47b2\0\u71da"+
    "\0\u7200\0\u7226\0\u4954\0\u724c\0\u7272\0\u7298\0\u72be\0\u72e4"+
    "\0\u730a\0\u7330\0\u7356\0\u737c\0\u73a2\0\u3fd4\0\344\0\u73c8"+
    "\0\u73ee\0\u73ee\0\u7414\0\u743a\0\u7460\0\u7486\0\u74ac\0\u74d2"+
    "\0\u74f8\0\u0f4a\0\u751e\0\u7544\0\u756a\0\344\0\u7590\0\u75b6"+
    "\0\u75dc\0\u7602\0\u7628\0\u764e\0\u7674\0\u769a\0\u76c0\0\u76e6"+
    "\0\u770c\0\u7732\0\u7758\0\u777e\0\u77a4\0\u77ca\0\u77f0\0\u7816"+
    "\0\u783c\0\u7862\0\u7888\0\u78ae\0\u78d4\0\u78fa\0\u7920\0\u7946"+
    "\0\u796c\0\u7992\0\u79b8\0\u79de\0\u7a04\0\u7a2a\0\344\0\u7a50"+
    "\0\u7a76\0\u7a9c\0\u550e\0\u7ac2\0\u7ae8\0\u7b0e\0\u563e\0\u7b34"+
    "\0\u7b5a\0\u7b80\0\u7ba6\0\u7bcc\0\u7bf2\0\u7c18\0\u7c3e\0\u7c64"+
    "\0\u7c8a\0\u7cb0\0\u7cd6\0\u6e24\0\u7cfc\0\u75dc\0\u7d22\0\u7d48"+
    "\0\u2cfa\0\344\0\u7d6e\0\u49c6\0\u7d94\0\u7dba\0\344\0\u7de0"+
    "\0\u4b8e\0\u7ba6\0\u7e06\0\u7e2c\0\u7e52\0\u3f62\0\u7e78\0\u7e9e"+
    "\0\u7ec4\0\u7eea\0\u7f10\0\u7f36\0\u509a\0\u7f5c\0\u6a94\0\u7f82"+
    "\0\u7fa8\0\u7fce\0\u7ff4\0\u174e\0\u801a\0\u58ea\0\u8040\0\u8066"+
    "\0\u808c\0\u80b2\0\u80d8\0\u80fe\0\u8124\0\u814a\0\u8170\0\u8196"+
    "\0\u70f6\0\u81bc\0\344\0\u81e2\0\344\0\u8208\0\u822e\0\u822e"+
    "\0\u8254\0\u827a\0\u82a0\0\u82c6\0\u82ec\0\u6cce\0\u8312\0\u8338"+
    "\0\344\0\u835e\0\u8384\0\u83aa\0\u7414\0\u83d0\0\u83f6\0\u841c"+
    "\0\u8442\0\u8468\0\u848e\0\u84b4\0\u84da\0\u8500\0\u8526\0\u854c"+
    "\0\u8572\0\u8598\0\u8254\0\344\0\u85be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1069];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\5\1\7\2\5\11\7\1\5\5\7"+
    "\1\10\1\7\2\5\2\7\1\5\5\7\2\5\2\11"+
    "\1\7\1\12\1\13\23\7\1\14\15\7\50\15\1\7"+
    "\1\12\1\13\23\7\1\16\15\7\2\15\1\17\1\20"+
    "\2\17\1\0\2\17\1\0\1\21\1\0\1\22\2\0"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\17\1\0\2\17\1\21\1\0\1\17\1\33"+
    "\4\0\5\17\1\20\1\34\1\17\1\0\2\17\1\0"+
    "\1\21\1\0\1\22\2\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\0\1\30\1\31\1\32\1\17\1\0\2\17"+
    "\1\21\1\0\1\17\1\33\4\0\4\17\46\0\1\17"+
    "\1\35\1\36\1\17\1\0\1\36\1\17\1\0\1\21"+
    "\1\37\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\31\1\32\1\17\1\0\2\17\1\40"+
    "\1\0\1\17\1\33\4\0\3\17\1\36\2\0\1\13"+
    "\44\0\2\41\2\0\1\41\23\0\1\42\13\0\1\41"+
    "\1\0\2\43\2\0\1\43\23\0\1\44\13\0\1\43"+
    "\23\0\1\45\24\0\1\17\20\0\1\45\23\0\2\46"+
    "\2\0\1\46\2\0\1\47\2\0\1\50\10\0\1\51"+
    "\5\0\1\47\1\0\1\52\10\0\1\46\1\0\2\53"+
    "\2\0\1\53\15\0\1\54\1\55\7\0\1\53\10\0"+
    "\1\53\1\0\2\56\1\57\1\0\1\56\2\60\1\61"+
    "\2\0\1\62\7\0\1\63\6\0\1\61\1\0\1\56"+
    "\2\0\1\64\5\0\1\56\12\0\1\65\41\0\2\66"+
    "\2\0\1\67\56\0\1\45\1\0\1\70\45\0\1\70"+
    "\44\0\1\71\22\0\2\72\2\0\1\72\2\73\1\0"+
    "\1\74\1\0\1\75\1\0\1\76\16\0\1\72\1\76"+
    "\7\0\1\72\1\0\2\77\2\0\1\77\5\0\1\100"+
    "\6\0\1\101\11\0\1\77\10\0\1\77\1\0\2\56"+
    "\1\57\1\0\1\56\2\60\1\61\2\0\1\62\7\0"+
    "\1\63\6\0\1\61\1\0\1\102\2\0\1\64\5\0"+
    "\1\56\1\17\1\20\2\17\1\0\2\17\1\0\1\21"+
    "\1\0\1\22\2\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\103\1\31\1\32\1\17\1\0\2\17\1\21"+
    "\1\0\1\17\1\33\4\0\4\17\1\0\1\104\1\36"+
    "\2\0\1\104\3\0\1\37\11\0\1\45\6\0\1\105"+
    "\12\0\1\104\1\0\2\104\2\0\1\104\3\0\1\37"+
    "\11\0\1\45\6\0\1\105\12\0\1\104\1\0\2\106"+
    "\2\0\1\106\37\0\1\106\1\0\2\46\2\0\1\46"+
    "\2\0\1\47\2\0\1\50\10\0\1\51\5\0\1\47"+
    "\1\107\1\52\10\0\1\46\11\0\1\110\66\0\1\111"+
    "\37\0\1\112\22\0\2\46\2\0\1\46\2\0\1\47"+
    "\13\0\1\51\5\0\1\47\1\0\1\113\10\0\1\46"+
    "\1\0\2\113\2\0\1\113\16\0\1\51\7\0\1\113"+
    "\10\0\1\113\14\0\1\114\10\0\1\115\20\0\1\116"+
    "\2\117\1\116\1\0\1\117\1\116\11\0\1\116\3\0"+
    "\1\120\1\0\1\116\1\0\2\116\2\0\1\117\5\0"+
    "\3\116\1\117\1\121\1\122\1\123\1\124\1\0\1\123"+
    "\1\121\1\0\1\47\6\0\1\125\1\121\2\0\1\126"+
    "\1\127\1\0\1\121\1\0\2\121\1\47\1\0\1\130"+
    "\5\0\3\121\1\123\1\0\2\53\2\0\1\53\15\0"+
    "\1\54\21\0\1\53\1\0\2\131\2\0\1\131\11\0"+
    "\1\132\14\0\1\131\10\0\1\131\15\0\1\133\17\0"+
    "\1\133\11\0\2\56\1\57\1\0\1\56\2\0\1\61"+
    "\12\0\1\63\6\0\1\61\4\0\1\64\5\0\1\56"+
    "\1\0\2\57\2\0\1\57\2\0\1\134\21\0\1\134"+
    "\4\0\1\135\5\0\1\57\24\0\1\136\21\0\1\137"+
    "\1\140\1\141\1\142\1\0\1\141\1\137\1\0\1\143"+
    "\2\0\1\144\1\145\2\0\1\146\1\137\5\0\1\137"+
    "\1\0\2\137\1\143\1\0\1\147\5\0\3\137\1\141"+
    "\10\0\1\150\6\0\1\151\5\0\1\152\4\0\1\150"+
    "\14\0\2\153\2\0\1\153\11\0\1\154\4\0\1\155"+
    "\7\0\1\153\10\0\1\153\1\156\1\157\1\160\1\156"+
    "\1\0\1\160\1\161\1\162\10\0\1\156\4\0\1\163"+
    "\1\164\1\0\2\156\2\0\1\165\5\0\3\156\1\160"+
    "\25\0\1\166\44\0\1\167\41\0\2\170\35\0\1\171"+
    "\46\0\1\172\34\0\2\72\2\0\1\72\7\0\1\76"+
    "\17\0\1\76\7\0\1\72\20\0\2\173\43\0\1\174"+
    "\42\0\1\175\31\0\1\176\1\177\1\200\1\201\1\0"+
    "\1\200\1\176\1\0\1\202\2\0\1\203\4\0\1\176"+
    "\5\0\1\176\1\0\2\176\1\202\1\0\1\204\5\0"+
    "\3\176\1\200\1\0\2\77\2\0\1\77\14\0\1\101"+
    "\22\0\1\77\20\0\2\205\24\0\1\206\1\207\2\206"+
    "\1\0\2\206\7\0\1\210\1\0\1\206\5\0\1\206"+
    "\1\0\2\206\2\0\1\211\5\0\4\206\1\212\1\213"+
    "\1\214\1\215\1\0\1\214\1\216\1\217\1\220\4\0"+
    "\1\221\2\0\1\212\2\0\1\222\2\0\1\212\1\0"+
    "\2\212\1\220\1\0\1\212\1\221\1\0\1\64\2\0"+
    "\3\212\1\214\24\0\1\223\22\0\2\104\2\0\1\104"+
    "\3\0\1\37\20\0\1\105\12\0\1\104\33\0\1\107"+
    "\42\0\1\224\50\0\1\224\24\0\1\225\34\0\2\113"+
    "\2\0\1\113\16\0\1\51\20\0\1\113\13\0\1\226"+
    "\1\227\56\0\1\230\20\0\1\116\2\117\1\116\1\0"+
    "\1\117\1\116\11\0\1\116\3\0\1\120\1\0\1\116"+
    "\1\0\2\116\2\0\1\231\5\0\3\116\1\117\1\116"+
    "\1\232\2\116\1\0\2\116\11\0\1\116\5\0\1\116"+
    "\1\0\2\116\2\0\1\231\5\0\4\116\1\0\1\233"+
    "\1\123\1\234\1\0\1\233\2\0\1\47\6\0\1\125"+
    "\3\0\1\126\1\127\5\0\1\47\1\0\1\113\10\0"+
    "\1\233\1\0\2\233\1\234\1\0\1\233\2\0\1\47"+
    "\6\0\1\125\3\0\1\126\1\127\5\0\1\47\1\0"+
    "\1\113\10\0\1\233\1\0\2\234\2\0\1\234\11\0"+
    "\1\125\3\0\1\126\1\235\20\0\1\234\12\0\1\236"+
    "\57\0\1\237\21\0\1\116\2\117\1\116\1\0\1\117"+
    "\1\116\4\0\1\240\4\0\1\116\3\0\1\120\1\0"+
    "\1\116\1\0\2\116\2\0\1\117\5\0\3\116\1\117"+
    "\1\0\2\131\2\0\1\131\11\0\1\132\25\0\1\131"+
    "\1\0\2\241\2\0\1\241\26\0\1\241\2\0\1\242"+
    "\5\0\1\241\6\0\2\243\37\0\2\244\2\0\1\244"+
    "\5\0\1\245\1\246\17\0\1\244\10\0\1\244\6\0"+
    "\2\162\36\0\1\247\1\250\1\251\1\252\1\0\1\251"+
    "\1\247\4\0\1\253\3\0\1\254\1\247\1\0\1\255"+
    "\3\0\1\247\1\0\2\247\2\0\1\256\5\0\1\257"+
    "\2\247\1\251\1\0\1\260\1\141\1\261\1\0\1\260"+
    "\2\0\1\143\3\0\1\145\2\0\1\146\12\0\1\143"+
    "\12\0\1\260\1\0\2\260\1\261\1\0\1\260\2\0"+
    "\1\143\3\0\1\145\2\0\1\146\12\0\1\143\12\0"+
    "\1\260\1\0\2\261\2\0\1\261\2\0\1\262\21\0"+
    "\1\262\12\0\1\261\1\263\1\264\2\263\1\0\2\263"+
    "\11\0\1\263\1\0\1\265\3\0\1\263\1\0\2\263"+
    "\2\0\1\266\5\0\4\263\14\0\1\267\32\0\2\270"+
    "\2\0\1\270\12\0\2\271\12\0\1\270\10\0\1\270"+
    "\1\0\2\272\2\0\1\272\15\0\1\273\10\0\1\272"+
    "\10\0\1\272\1\137\1\140\1\141\1\142\1\0\1\141"+
    "\1\137\1\0\1\143\3\0\1\145\2\0\1\146\1\137"+
    "\5\0\1\137\1\0\2\137\1\143\1\0\1\137\5\0"+
    "\3\137\1\141\6\0\2\274\36\0\1\212\1\275\1\276"+
    "\1\277\1\0\1\276\1\300\1\301\1\302\2\0\1\303"+
    "\1\0\1\221\1\0\1\304\1\212\1\0\1\305\1\306"+
    "\1\307\1\0\1\212\1\0\2\212\1\302\1\0\1\310"+
    "\1\221\1\0\1\64\2\0\1\311\2\212\1\276\13\0"+
    "\1\312\33\0\2\153\2\0\1\153\11\0\1\154\4\0"+
    "\1\155\20\0\1\153\1\0\2\313\2\0\1\313\26\0"+
    "\1\313\2\0\1\314\5\0\1\313\1\315\1\316\2\315"+
    "\1\0\2\315\11\0\1\315\5\0\1\315\1\0\2\315"+
    "\2\0\1\317\5\0\4\315\1\0\1\320\1\160\2\0"+
    "\1\320\17\0\1\163\17\0\1\320\1\0\2\320\2\0"+
    "\1\320\17\0\1\163\17\0\1\320\16\0\1\321\42\0"+
    "\1\322\42\0\1\323\21\0\1\323\13\0\1\156\1\157"+
    "\1\160\1\156\1\0\1\160\1\156\11\0\1\156\4\0"+
    "\1\163\1\164\1\0\2\156\2\0\1\156\5\0\3\156"+
    "\1\160\11\0\1\324\1\0\1\324\51\0\1\325\53\0"+
    "\1\326\45\0\1\327\60\0\1\330\17\0\1\331\52\0"+
    "\1\332\26\0\1\333\1\334\1\335\1\336\1\0\1\335"+
    "\1\337\1\340\2\0\1\341\1\342\1\343\2\0\1\344"+
    "\1\333\1\0\1\345\1\346\1\347\1\0\1\333\1\0"+
    "\2\333\2\0\1\350\2\0\1\351\2\0\1\352\2\333"+
    "\1\335\1\0\1\353\1\200\1\354\1\0\1\353\2\0"+
    "\1\202\21\0\1\202\12\0\1\353\1\0\2\353\1\354"+
    "\1\0\1\353\2\0\1\202\21\0\1\202\12\0\1\353"+
    "\1\0\2\354\2\0\1\354\2\0\1\355\21\0\1\355"+
    "\12\0\1\354\1\356\1\357\1\360\1\356\1\0\1\360"+
    "\1\356\4\0\1\361\1\362\3\0\1\356\5\0\1\356"+
    "\1\0\2\356\2\0\1\363\5\0\3\356\1\360\17\0"+
    "\1\364\26\0\1\176\1\177\1\200\1\201\1\0\1\200"+
    "\1\176\1\0\1\202\7\0\1\176\5\0\1\176\1\0"+
    "\2\176\1\202\1\0\1\176\5\0\3\176\1\200\25\0"+
    "\1\365\22\0\1\206\51\0\2\366\36\0\1\206\1\207"+
    "\2\206\1\0\2\206\11\0\1\206\5\0\1\206\1\0"+
    "\2\206\2\0\1\206\5\0\4\206\1\0\1\367\1\214"+
    "\1\370\1\0\1\367\2\217\1\220\4\0\1\221\5\0"+
    "\1\222\6\0\1\220\2\0\1\221\1\0\1\64\5\0"+
    "\1\367\1\0\2\367\1\370\1\0\1\367\2\217\1\220"+
    "\4\0\1\221\5\0\1\222\6\0\1\220\2\0\1\221"+
    "\1\0\1\64\5\0\1\367\1\0\2\370\2\0\1\370"+
    "\2\217\1\371\4\0\1\221\5\0\1\306\6\0\1\371"+
    "\2\0\1\221\1\0\1\64\5\0\1\370\16\0\1\372"+
    "\27\0\1\137\1\140\1\141\1\142\1\0\1\141\1\137"+
    "\1\0\1\143\2\0\1\144\1\145\2\0\1\146\1\137"+
    "\1\0\1\373\3\0\1\137\1\0\2\137\1\143\1\0"+
    "\1\147\5\0\3\137\1\141\6\0\2\374\37\0\2\153"+
    "\2\0\1\153\11\0\1\154\4\0\1\375\7\0\1\153"+
    "\10\0\1\153\12\0\1\376\73\0\1\377\5\0\1\121"+
    "\1\u0100\1\u0101\1\124\1\0\1\u0101\1\121\10\0\1\125"+
    "\1\121\2\0\1\126\1\235\1\0\1\121\1\0\2\121"+
    "\2\0\1\121\5\0\3\121\1\u0101\6\0\2\226\3\0"+
    "\1\226\45\0\1\u0102\32\0\1\116\1\232\2\116\1\0"+
    "\2\116\11\0\1\116\5\0\1\116\1\0\2\116\2\0"+
    "\1\116\5\0\4\116\2\0\1\116\56\0\1\240\52\0"+
    "\2\u0103\36\0\1\u0104\47\0\1\u0105\32\0\2\241\2\0"+
    "\1\241\31\0\1\242\5\0\1\241\1\u0106\1\u0107\2\u0106"+
    "\1\0\2\u0106\11\0\1\u0106\5\0\1\u0106\1\0\2\u0106"+
    "\2\0\1\u0108\5\0\4\u0106\16\0\1\u0109\30\0\2\244"+
    "\2\0\1\244\6\0\1\246\30\0\1\244\14\0\1\u010a"+
    "\32\0\2\u010b\2\0\1\u010b\12\0\2\u010c\12\0\1\u010b"+
    "\10\0\1\u010b\1\0\1\u010d\1\251\1\u010e\1\0\1\u010d"+
    "\5\0\1\u010f\3\0\1\254\2\0\1\255\17\0\1\u0110"+
    "\2\0\1\u010d\1\0\2\u010d\1\u010e\1\0\1\u010d\5\0"+
    "\1\u010f\3\0\1\254\2\0\1\255\17\0\1\u0110\2\0"+
    "\1\u010d\1\0\2\u010e\2\0\1\u010e\5\0\1\u010f\3\0"+
    "\1\254\2\0\1\255\17\0\1\u0110\2\0\1\u010e\22\0"+
    "\1\u0111\2\0\1\u0112\32\0\1\u0113\1\u0114\20\0\1\u0115"+
    "\24\0\1\u0116\20\0\1\u0117\11\0\1\247\1\250\1\251"+
    "\1\252\1\0\1\251\1\247\4\0\1\u010f\3\0\1\254"+
    "\1\247\1\0\1\255\3\0\1\247\1\0\2\247\2\0"+
    "\1\247\5\0\1\257\2\247\1\251\1\0\2\u0110\2\0"+
    "\1\u0110\5\0\1\u0118\3\0\1\u0119\2\0\1\255\17\0"+
    "\1\u011a\2\0\1\u0110\22\0\1\265\25\0\1\263\55\0"+
    "\1\u011b\33\0\1\263\1\264\2\263\1\0\2\263\11\0"+
    "\1\263\5\0\1\263\1\0\2\263\2\0\1\263\5\0"+
    "\4\263\1\u011c\1\u011d\1\u011e\1\u011f\1\0\1\u011e\1\u0120"+
    "\1\u0121\1\u0122\3\0\1\u0123\3\0\1\u011c\2\0\1\u0124"+
    "\2\0\1\u011c\1\0\2\u011c\1\u0122\1\0\1\u0125\3\0"+
    "\1\u0126\1\0\3\u011c\1\u011e\1\0\2\270\2\0\1\270"+
    "\12\0\2\271\23\0\1\270\1\u011c\1\u0127\1\u0128\1\u011f"+
    "\1\0\1\u0128\1\u011c\1\0\1\u0122\6\0\1\u0129\1\u011c"+
    "\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c\1\u0122\1\0"+
    "\1\u012a\3\0\1\u0126\1\0\3\u011c\1\u0128\1\0\2\272"+
    "\2\0\1\272\15\0\1\273\21\0\1\272\1\0\2\u012b"+
    "\2\0\1\u012b\12\0\2\u012c\12\0\1\u012b\10\0\1\u012b"+
    "\41\0\1\u012d\5\0\1\u012e\1\276\1\u012f\1\0\1\u012e"+
    "\2\217\1\302\2\0\1\303\1\0\1\221\1\0\1\304"+
    "\2\0\1\305\1\306\6\0\1\302\2\0\1\221\1\0"+
    "\1\64\2\0\1\u0130\2\0\1\u012e\1\0\2\u012e\1\u012f"+
    "\1\0\1\u012e\2\217\1\302\2\0\1\303\1\0\1\221"+
    "\1\0\1\304\2\0\1\305\1\306\6\0\1\302\2\0"+
    "\1\221\1\0\1\64\2\0\1\u0130\2\0\1\u012e\1\0"+
    "\2\u012f\2\0\1\u012f\2\217\1\371\2\0\1\303\1\0"+
    "\1\221\1\0\1\304\2\0\1\305\1\306\6\0\1\371"+
    "\2\0\1\221\1\0\1\64\2\0\1\u0130\2\0\1\u012f"+
    "\16\0\1\372\1\0\2\u0131\24\0\1\137\1\u0132\1\u0133"+
    "\1\142\1\0\1\u0133\1\137\1\0\1\262\2\0\1\144"+
    "\1\246\3\0\1\137\1\0\1\373\3\0\1\137\1\0"+
    "\2\137\1\262\1\0\1\u0134\5\0\3\137\1\u0133\22\0"+
    "\1\u0135\35\0\1\u0136\1\u0137\20\0\1\u0138\24\0\1\u0139"+
    "\20\0\1\u013a\35\0\1\u013b\34\0\1\u013c\32\0\1\212"+
    "\1\275\1\276\1\277\1\0\1\276\1\216\1\217\1\302"+
    "\2\0\1\303\1\0\1\221\1\0\1\304\1\212\1\0"+
    "\1\305\1\306\2\0\1\212\1\0\2\212\1\302\1\0"+
    "\1\212\1\221\1\0\1\64\2\0\1\311\2\212\1\276"+
    "\1\0\2\u0130\2\0\1\u0130\5\0\1\u013d\3\0\1\u013e"+
    "\2\0\1\305\17\0\1\u013f\2\0\1\u0130\24\0\1\u0140"+
    "\22\0\2\313\2\0\1\313\31\0\1\314\5\0\1\313"+
    "\1\u0141\1\u0142\2\u0141\1\0\2\u0141\11\0\1\u0141\5\0"+
    "\1\u0141\1\0\2\u0141\2\0\1\u0143\5\0\4\u0141\2\0"+
    "\1\315\43\0\1\315\1\316\2\315\1\0\2\315\11\0"+
    "\1\315\5\0\1\315\1\0\2\315\2\0\1\315\5\0"+
    "\4\315\1\156\1\157\1\160\1\156\1\0\1\160\1\u0144"+
    "\1\u0145\10\0\1\156\4\0\1\163\1\164\1\0\2\156"+
    "\2\0\1\165\5\0\3\156\1\160\20\0\2\u0146\37\0"+
    "\1\u0147\32\0\1\u0148\1\u0149\2\u0148\1\0\2\u0148\11\0"+
    "\1\u0148\5\0\1\u0148\1\0\2\u0148\2\0\1\u0148\5\0"+
    "\4\u0148\1\u014a\1\u014b\1\u014c\1\u014d\1\0\1\u014c\1\u014a"+
    "\2\0\1\u014e\1\u014f\5\0\1\u014a\5\0\1\u014a\1\0"+
    "\2\u014a\2\0\1\u0150\2\0\1\u0151\2\0\3\u014a\1\u014c"+
    "\1\u0152\1\u0153\2\u0152\1\0\1\u0152\1\u0154\1\u0155\10\0"+
    "\1\u0152\5\0\1\u0152\1\0\2\u0152\2\0\1\u0156\5\0"+
    "\4\u0152\22\0\1\u0157\63\0\1\u0158\15\0\1\u0159\21\0"+
    "\1\u0159\13\0\1\u015a\1\u015b\1\u015c\1\u015d\1\0\1\u015c"+
    "\1\u015a\3\0\1\u015e\1\u015f\3\0\1\u0160\1\u015a\1\0"+
    "\1\u0161\3\0\1\u015a\1\0\2\u015a\2\0\1\u0162\5\0"+
    "\1\u0163\2\u015a\1\u015c\1\0\1\u0164\1\335\1\u0165\1\0"+
    "\1\u0164\5\0\1\342\1\343\2\0\1\344\2\0\1\345"+
    "\1\346\1\347\12\0\1\351\2\0\1\u0166\2\0\1\u0164"+
    "\1\0\2\u0164\1\u0165\1\0\1\u0164\5\0\1\342\1\343"+
    "\2\0\1\344\2\0\1\345\1\346\1\347\12\0\1\351"+
    "\2\0\1\u0166\2\0\1\u0164\1\0\2\u0165\2\0\1\u0165"+
    "\5\0\1\342\1\343\2\0\1\344\2\0\1\345\1\346"+
    "\1\347\12\0\1\351\2\0\1\u0166\2\0\1\u0165\12\0"+
    "\1\u0167\43\0\1\u0168\21\0\1\u0168\35\0\1\u0169\35\0"+
    "\1\u016a\45\0\1\u016b\1\u016c\20\0\1\u016d\24\0\1\u016e"+
    "\20\0\1\u016f\35\0\1\u0170\34\0\1\u0171\32\0\1\333"+
    "\1\334\1\335\1\336\1\0\1\335\1\333\4\0\1\342"+
    "\1\343\2\0\1\344\1\333\1\0\1\345\1\346\1\347"+
    "\1\0\1\333\1\0\2\333\2\0\1\333\2\0\1\351"+
    "\2\0\1\352\2\333\1\335\6\0\2\u0172\37\0\2\u0166"+
    "\2\0\1\u0166\5\0\1\u0173\3\0\1\u0174\2\0\1\345"+
    "\17\0\1\u0175\2\0\1\u0166\13\0\1\u0176\33\0\1\u0177"+
    "\1\360\2\0\1\u0177\6\0\1\362\30\0\1\u0177\1\0"+
    "\2\u0177\2\0\1\u0177\6\0\1\362\30\0\1\u0177\14\0"+
    "\1\u0178\32\0\2\u0179\2\0\1\u0179\12\0\2\u017a\12\0"+
    "\1\u0179\10\0\1\u0179\1\356\1\357\1\360\1\356\1\0"+
    "\1\360\1\356\5\0\1\362\3\0\1\356\5\0\1\356"+
    "\1\0\2\356\2\0\1\356\5\0\3\356\1\360\1\176"+
    "\1\u017b\1\u017c\1\201\1\0\1\u017c\1\176\1\0\1\355"+
    "\7\0\1\176\3\0\1\u017d\1\0\1\176\1\0\2\176"+
    "\1\355\1\0\1\u017e\5\0\3\176\1\u017c\12\0\1\77"+
    "\52\0\1\u017f\26\0\1\137\1\u0180\1\u0181\1\137\1\0"+
    "\1\u0181\1\137\4\0\1\144\1\246\3\0\1\137\1\0"+
    "\1\373\3\0\1\137\1\0\2\137\2\0\1\u0182\5\0"+
    "\3\137\1\u0181\25\0\1\u0183\32\0\1\u0184\57\0\1\u0185"+
    "\21\0\1\315\1\316\2\315\1\0\2\315\4\0\1\u0186"+
    "\4\0\1\315\5\0\1\315\1\0\2\315\2\0\1\317"+
    "\5\0\4\315\40\0\1\u0187\45\0\1\u0188\6\0\1\u0189"+
    "\1\u0101\1\234\1\0\1\u0189\11\0\1\125\3\0\1\126"+
    "\1\235\20\0\1\u0189\1\0\2\u0189\1\234\1\0\1\u0189"+
    "\11\0\1\125\3\0\1\126\1\235\20\0\1\u0189\24\0"+
    "\1\u018a\46\0\1\u018b\60\0\1\u018c\5\0\1\116\1\232"+
    "\2\116\1\0\1\116\1\u018d\1\u018e\10\0\1\116\5\0"+
    "\1\116\1\0\2\116\2\0\1\231\5\0\4\116\2\0"+
    "\1\u0106\43\0\1\u0106\1\u0107\2\u0106\1\0\2\u0106\11\0"+
    "\1\u0106\5\0\1\u0106\1\0\2\u0106\2\0\1\u0106\5\0"+
    "\4\u0106\11\0\1\u018f\34\0\1\u011c\1\u011d\1\u011e\1\u011f"+
    "\1\0\1\u011e\1\u0120\1\u0121\1\u0122\3\0\1\u0190\3\0"+
    "\1\u011c\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c\1\u0122"+
    "\1\0\1\u0125\3\0\1\u0126\1\0\3\u011c\1\u011e\1\0"+
    "\2\u010b\2\0\1\u010b\12\0\2\u010c\23\0\1\u010b\1\u011c"+
    "\1\u011d\1\u011e\1\u011f\1\0\1\u011e\1\u011c\1\0\1\u0122"+
    "\7\0\1\u011c\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c"+
    "\1\u0122\1\0\1\u0125\3\0\1\u0126\1\0\3\u011c\1\u011e"+
    "\22\0\1\u0111\47\0\1\u0191\46\0\1\u0192\57\0\1\u0193"+
    "\6\0\1\247\2\u0194\1\247\1\0\1\u0194\1\247\4\0"+
    "\1\u0116\3\0\1\u0195\1\247\5\0\1\247\1\0\1\247"+
    "\1\u0196\2\0\1\u0197\5\0\1\247\1\u0194\1\247\1\u0194"+
    "\13\0\1\u0114\32\0\1\247\2\u0194\1\247\1\0\1\u0194"+
    "\1\247\11\0\1\247\5\0\1\247\1\0\1\247\1\u0196"+
    "\2\0\1\u0198\5\0\1\247\1\u0194\1\247\1\u0194\13\0"+
    "\1\u0116\54\0\1\u0199\36\0\1\u0114\20\0\1\u0115\24\0"+
    "\1\u0118\3\0\1\u0119\2\0\1\255\37\0\1\u019a\32\0"+
    "\1\u019b\1\u011e\1\u019c\1\0\1\u019b\2\0\1\u0122\12\0"+
    "\1\u0124\6\0\1\u0122\12\0\1\u019b\1\0\2\u019b\1\u019c"+
    "\1\0\1\u019b\2\0\1\u0122\12\0\1\u0124\6\0\1\u0122"+
    "\12\0\1\u019b\1\0\2\u019c\2\0\1\u019c\2\0\1\u0122"+
    "\12\0\1\u0124\6\0\1\u0122\12\0\1\u019c\20\0\2\u019d"+
    "\46\0\1\u019e\36\0\1\u019f\56\0\1\u01a0\21\0\1\u011c"+
    "\1\u011d\1\u011e\1\u011f\1\0\1\u011e\1\u011c\1\0\1\u0122"+
    "\7\0\1\u011c\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c"+
    "\1\u0122\1\0\1\u011c\3\0\1\u0126\1\0\3\u011c\1\u011e"+
    "\12\0\1\u01a1\34\0\1\u01a2\1\u0128\1\u019c\1\0\1\u01a2"+
    "\2\0\1\u0122\6\0\1\u0129\3\0\1\u0124\6\0\1\u0122"+
    "\12\0\1\u01a2\1\0\2\u01a2\1\u019c\1\0\1\u01a2\2\0"+
    "\1\u0122\6\0\1\u0129\3\0\1\u0124\6\0\1\u0122\12\0"+
    "\1\u01a2\1\0\2\u01a3\2\0\1\u01a3\15\0\1\u01a4\10\0"+
    "\1\u01a3\10\0\1\u01a3\1\u011c\1\u0127\1\u0128\1\u011f\1\0"+
    "\1\u0128\1\u011c\1\0\1\u0122\6\0\1\u0129\1\u011c\2\0"+
    "\1\u0124\2\0\1\u011c\1\0\2\u011c\1\u0122\1\0\1\u011c"+
    "\3\0\1\u0126\1\0\3\u011c\1\u0128\1\0\2\u012b\2\0"+
    "\1\u012b\12\0\2\u012c\23\0\1\u012b\1\u01a5\1\u01a6\2\u01a5"+
    "\1\0\2\u01a5\11\0\1\u01a5\5\0\1\u01a5\1\0\2\u01a5"+
    "\2\0\1\u01a7\5\0\4\u01a5\13\0\1\u01a8\40\0\2\u01a9"+
    "\37\0\1\u01aa\1\u0133\1\261\1\0\1\u01aa\2\0\1\262"+
    "\3\0\1\246\15\0\1\262\12\0\1\u01aa\1\0\2\u01aa"+
    "\1\261\1\0\1\u01aa\2\0\1\262\3\0\1\246\15\0"+
    "\1\262\12\0\1\u01aa\1\137\1\u0132\1\u0133\1\142\1\0"+
    "\1\u0133\1\137\1\0\1\262\3\0\1\246\3\0\1\137"+
    "\5\0\1\137\1\0\2\137\1\262\1\0\1\137\5\0"+
    "\3\137\1\u0133\24\0\1\u01ab\60\0\1\u01ac\6\0\1\u01ad"+
    "\2\u01ae\1\u01ad\1\0\1\u01ae\1\u01ad\4\0\1\u0139\3\0"+
    "\1\u01af\1\u01ad\5\0\1\u01ad\1\0\1\u01ad\1\u01b0\2\0"+
    "\1\u01b1\5\0\1\u01ad\1\u01ae\1\u01ad\1\u01ae\13\0\1\u0137"+
    "\32\0\1\u01ad\2\u01ae\1\u01ad\1\0\1\u01ae\1\u01ad\11\0"+
    "\1\u01ad\5\0\1\u01ad\1\0\1\u01ad\1\u01b0\2\0\1\u01b2"+
    "\5\0\1\u01ad\1\u01ae\1\u01ad\1\u01ae\13\0\1\u0139\45\0"+
    "\1\u0186\57\0\1\u01b3\42\0\1\u01b4\36\0\1\u0137\20\0"+
    "\1\u0138\24\0\1\u013d\3\0\1\u013e\2\0\1\305\62\0"+
    "\1\u01b5\10\0\1\u0141\43\0\1\u0141\1\u0142\2\u0141\1\0"+
    "\2\u0141\11\0\1\u0141\5\0\1\u0141\1\0\2\u0141\2\0"+
    "\1\u0141\5\0\4\u0141\20\0\2\u01b6\36\0\1\u01b7\62\0"+
    "\1\u01b8\20\0\1\u0148\44\0\1\u01b9\1\u014c\1\u01ba\1\0"+
    "\1\u01b9\3\0\1\u014e\25\0\1\u0151\5\0\1\u01b9\1\0"+
    "\2\u01b9\1\u01ba\1\0\1\u01b9\3\0\1\u014e\25\0\1\u0151"+
    "\5\0\1\u01b9\1\0\2\u01ba\2\0\1\u01ba\31\0\1\u0151"+
    "\5\0\1\u01ba\23\0\1\u01bb\32\0\1\u01bc\21\0\1\u01bc"+
    "\13\0\1\u014a\1\u014b\1\u014c\1\u014d\1\0\1\u014c\1\u014a"+
    "\2\0\1\u014e\6\0\1\u014a\5\0\1\u014a\1\0\2\u014a"+
    "\2\0\1\u014a\2\0\1\u0151\2\0\3\u014a\1\u014c\6\0"+
    "\2\u01bd\40\0\1\u0152\70\0\1\u01be\20\0\1\u0152\1\u0153"+
    "\2\u0152\1\0\2\u0152\11\0\1\u0152\5\0\1\u0152\1\0"+
    "\2\u0152\2\0\1\u0152\5\0\4\u0152\25\0\1\u01bf\33\0"+
    "\1\u01c0\54\0\1\u01c1\24\0\1\u01c2\1\u015c\1\u01c3\1\0"+
    "\1\u01c2\5\0\1\u015f\3\0\1\u0160\2\0\1\u0161\17\0"+
    "\1\u01c4\2\0\1\u01c2\1\0\2\u01c2\1\u01c3\1\0\1\u01c2"+
    "\5\0\1\u015f\3\0\1\u0160\2\0\1\u0161\17\0\1\u01c4"+
    "\2\0\1\u01c2\1\0\2\u01c3\2\0\1\u01c3\5\0\1\u015f"+
    "\3\0\1\u0160\2\0\1\u0161\17\0\1\u01c4\2\0\1\u01c3"+
    "\37\0\1\u01c5\30\0\1\u01c6\35\0\1\u01c7\1\u01c8\20\0"+
    "\1\u01c9\24\0\1\u01ca\20\0\1\u01cb\11\0\1\u015a\1\u015b"+
    "\1\u015c\1\u015d\1\0\1\u015c\1\u015a\4\0\1\u015f\3\0"+
    "\1\u0160\1\u015a\1\0\1\u0161\3\0\1\u015a\1\0\2\u015a"+
    "\2\0\1\u015a\5\0\1\u0163\2\u015a\1\u015c\1\0\2\u01c4"+
    "\2\0\1\u01c4\5\0\1\u01cc\3\0\1\u01cd\2\0\1\u0161"+
    "\17\0\1\u01ce\2\0\1\u01c4\1\0\2\u0167\1\u01cf\1\0"+
    "\1\u0167\7\0\1\u01d0\17\0\1\u01d1\7\0\1\u0167\11\0"+
    "\1\u01d2\60\0\1\u01d3\61\0\1\u01d4\44\0\1\u01d5\6\0"+
    "\1\333\2\u01d6\1\333\1\0\1\u01d6\1\333\4\0\1\u016e"+
    "\3\0\1\u01d7\1\333\5\0\1\333\1\0\1\333\1\u01d8"+
    "\2\0\1\u01d9\5\0\1\333\1\u01d6\1\333\1\u01d6\13\0"+
    "\1\u016c\32\0\1\333\2\u01d6\1\333\1\0\1\u01d6\1\333"+
    "\11\0\1\333\5\0\1\333\1\0\1\333\1\u01d8\2\0"+
    "\1\u01da\5\0\1\333\1\u01d6\1\333\1\u01d6\13\0\1\u016e"+
    "\44\0\1\u01db\47\0\1\u01dc\47\0\1\u01dd\51\0\1\u01de"+
    "\36\0\1\u016c\20\0\1\u016d\24\0\1\u0173\3\0\1\u0174"+
    "\2\0\1\345\37\0\1\u01df\31\0\1\u01e0\1\u01e1\2\u01e0"+
    "\1\0\1\u01e0\1\u01e2\1\u01e3\4\0\1\u01e4\3\0\1\u01e0"+
    "\5\0\1\u01e0\1\0\2\u01e0\2\0\1\u01e5\3\0\1\u01e6"+
    "\1\0\4\u01e0\1\0\2\u0179\2\0\1\u0179\12\0\2\u017a"+
    "\23\0\1\u0179\1\u01e0\1\u01e1\2\u01e0\1\0\2\u01e0\11\0"+
    "\1\u01e0\5\0\1\u01e0\1\0\2\u01e0\2\0\1\u01e5\3\0"+
    "\1\u01e6\1\0\4\u01e0\1\0\1\u01e7\1\u017c\1\354\1\0"+
    "\1\u01e7\2\0\1\355\21\0\1\355\12\0\1\u01e7\1\0"+
    "\2\u01e7\1\354\1\0\1\u01e7\2\0\1\355\21\0\1\355"+
    "\12\0\1\u01e7\13\0\1\u01e8\32\0\1\176\1\u017b\1\u017c"+
    "\1\201\1\0\1\u017c\1\176\1\0\1\355\7\0\1\176"+
    "\5\0\1\176\1\0\2\176\1\355\1\0\1\176\5\0"+
    "\3\176\1\u017c\12\0\1\u01e9\34\0\1\244\1\u0181\2\0"+
    "\1\244\6\0\1\246\30\0\1\244\1\137\1\u0180\1\u0181"+
    "\1\137\1\0\1\u0181\1\137\5\0\1\246\3\0\1\137"+
    "\5\0\1\137\1\0\2\137\2\0\1\137\5\0\3\137"+
    "\1\u0181\13\0\1\u01ea\46\0\1\u01eb\37\0\2\u01ec\3\0"+
    "\1\u01ed\52\0\2\u01ee\64\0\1\u01ef\20\0\1\u01f0\43\0"+
    "\1\u01f1\34\0\1\u01f2\1\u01f3\2\u01f2\1\0\1\u01f2\1\u01f4"+
    "\1\u01f5\10\0\1\u01f2\5\0\1\u01f2\1\0\2\u01f2\2\0"+
    "\1\u01f6\5\0\4\u01f2\1\u01f7\1\u01f8\2\u01f7\1\0\1\u01f7"+
    "\1\u01f9\1\u01fa\10\0\1\u01f7\5\0\1\u01f7\1\0\2\u01f7"+
    "\2\0\1\u01fb\5\0\4\u01f7\12\0\1\u01fc\51\0\1\u01fd"+
    "\42\0\1\u01fe\43\0\1\u01ff\1\u0200\41\0\2\u0201\60\0"+
    "\1\u0202\23\0\1\247\2\u0194\1\247\1\0\1\u0194\1\247"+
    "\11\0\1\247\5\0\1\247\1\0\1\247\1\u0196\2\0"+
    "\1\247\5\0\1\247\1\u0196\1\247\1\u0194\11\0\1\u0116"+
    "\22\0\1\u0203\11\0\1\247\1\u0204\2\247\1\0\2\247"+
    "\11\0\1\247\5\0\1\247\1\0\2\247\2\0\1\247"+
    "\5\0\5\247\2\u0194\1\247\1\0\1\u0194\1\247\4\0"+
    "\1\u0116\3\0\1\u0195\1\247\5\0\1\247\1\0\1\247"+
    "\1\u0196\2\0\1\247\5\0\1\247\1\u0194\1\247\1\u0194"+
    "\1\247\2\u0194\1\247\1\0\1\u0194\1\247\11\0\1\247"+
    "\5\0\1\247\1\0\1\247\1\u0196\2\0\1\247\5\0"+
    "\1\247\1\u0194\1\247\1\u0194\24\0\1\u0205\33\0\1\u0206"+
    "\43\0\1\u0207\21\0\1\u0207\25\0\1\u0208\33\0\1\137"+
    "\1\u0209\1\u020a\1\142\1\0\1\u020a\1\137\1\0\1\262"+
    "\7\0\1\137\5\0\1\137\1\0\2\137\1\262\1\0"+
    "\1\137\5\0\3\137\1\u020a\13\0\1\u020b\32\0\1\u011c"+
    "\1\u011d\1\u011e\1\u011f\1\0\1\u011e\1\u011c\1\0\1\u0122"+
    "\7\0\1\u011c\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c"+
    "\1\u0122\1\0\1\u011c\5\0\3\u011c\1\u011e\1\0\2\u01a3"+
    "\2\0\1\u01a3\15\0\1\u01a4\21\0\1\u01a3\1\0\2\u020c"+
    "\2\0\1\u020c\12\0\2\u020d\12\0\1\u020c\10\0\1\u020c"+
    "\2\0\1\u01a5\43\0\1\u01a5\1\u01a6\2\u01a5\1\0\2\u01a5"+
    "\11\0\1\u01a5\5\0\1\u01a5\1\0\2\u01a5\2\0\1\u01a5"+
    "\5\0\4\u01a5\24\0\1\u020e\33\0\1\u020f\44\0\1\u0210"+
    "\1\u0211\55\0\1\u0212\23\0\1\u01ad\2\u01ae\1\u01ad\1\0"+
    "\1\u01ae\1\u01ad\11\0\1\u01ad\5\0\1\u01ad\1\0\1\u01ad"+
    "\1\u01b0\2\0\1\u01ad\5\0\1\u01ad\1\u01b0\1\u01ad\1\u01ae"+
    "\11\0\1\u0139\22\0\1\u0213\11\0\1\u01ad\1\u0214\2\u01ad"+
    "\1\0\2\u01ad\11\0\1\u01ad\5\0\1\u01ad\1\0\2\u01ad"+
    "\2\0\1\u01ad\5\0\5\u01ad\2\u01ae\1\u01ad\1\0\1\u01ae"+
    "\1\u01ad\4\0\1\u0139\3\0\1\u01af\1\u01ad\5\0\1\u01ad"+
    "\1\0\1\u01ad\1\u01b0\2\0\1\u01ad\5\0\1\u01ad\1\u01ae"+
    "\1\u01ad\1\u01ae\1\u01ad\2\u01ae\1\u01ad\1\0\1\u01ae\1\u01ad"+
    "\11\0\1\u01ad\5\0\1\u01ad\1\0\1\u01ad\1\u01b0\2\0"+
    "\1\u01ad\5\0\1\u01ad\1\u01ae\1\u01ad\1\u01ae\6\0\2\u0215"+
    "\2\0\1\u0215\57\0\1\u0216\27\0\2\u0217\63\0\1\u0218"+
    "\44\0\1\u0219\41\0\2\u021a\47\0\1\u021b\33\0\1\u021c"+
    "\52\0\1\u021d\51\0\1\u021e\35\0\1\u021f\50\0\1\u0220"+
    "\17\0\1\u0220\46\0\1\u0221\20\0\1\u0222\60\0\1\u0223"+
    "\60\0\1\u0224\6\0\1\u015a\2\u0225\1\u015a\1\0\1\u0225"+
    "\1\u015a\4\0\1\u01ca\3\0\1\u0226\1\u015a\5\0\1\u015a"+
    "\1\0\1\u015a\1\u0227\2\0\1\u0228\5\0\1\u015a\1\u0225"+
    "\1\u015a\1\u0225\13\0\1\u01c8\32\0\1\u015a\2\u0225\1\u015a"+
    "\1\0\1\u0225\1\u015a\11\0\1\u015a\5\0\1\u015a\1\0"+
    "\1\u015a\1\u0227\2\0\1\u0229\5\0\1\u015a\1\u0225\1\u015a"+
    "\1\u0225\13\0\1\u01ca\54\0\1\u022a\36\0\1\u01c8\20\0"+
    "\1\u01c9\24\0\1\u01cc\3\0\1\u01cd\2\0\1\u0161\24\0"+
    "\2\u01cf\2\0\1\u01cf\7\0\1\u01d0\17\0\1\u01d1\7\0"+
    "\1\u01cf\1\176\1\u022b\1\u022c\1\201\1\0\1\u022c\1\176"+
    "\1\0\1\u022d\2\0\1\u022e\4\0\1\176\5\0\1\176"+
    "\1\0\2\176\1\u022d\1\0\1\u022f\5\0\3\176\1\u022c"+
    "\1\176\1\u022b\1\u022c\1\201\1\0\1\u022c\1\176\1\0"+
    "\1\u022d\2\0\1\u022e\4\0\1\176\5\0\1\176\1\0"+
    "\2\176\1\u022d\1\0\1\u0230\5\0\3\176\1\u022c\37\0"+
    "\1\u0231\17\0\1\u0232\1\u0233\46\0\1\u0234\54\0\1\u0235"+
    "\23\0\1\333\2\u01d6\1\333\1\0\1\u01d6\1\333\11\0"+
    "\1\333\5\0\1\333\1\0\1\333\1\u01d8\2\0\1\333"+
    "\5\0\1\333\1\u01d8\1\333\1\u01d6\11\0\1\u016e\22\0"+
    "\1\u0236\11\0\1\333\1\u0237\2\333\1\0\2\333\11\0"+
    "\1\333\5\0\1\333\1\0\2\333\2\0\1\333\5\0"+
    "\5\333\2\u01d6\1\333\1\0\1\u01d6\1\333\4\0\1\u016e"+
    "\3\0\1\u01d7\1\333\5\0\1\333\1\0\1\333\1\u01d8"+
    "\2\0\1\333\5\0\1\333\1\u01d6\1\333\1\u01d6\1\333"+
    "\2\u01d6\1\333\1\0\1\u01d6\1\333\11\0\1\333\5\0"+
    "\1\333\1\0\1\333\1\u01d8\2\0\1\333\5\0\1\333"+
    "\1\u01d6\1\333\1\u01d6\40\0\1\u0238\5\0\1\u0239\1\u023a"+
    "\2\u0239\1\0\1\u0239\1\u023b\1\u023c\10\0\1\u0239\5\0"+
    "\1\u0239\1\0\2\u0239\2\0\1\u023d\5\0\4\u0239\1\u023e"+
    "\1\u023f\2\u023e\1\0\1\u023e\1\u0240\1\u0241\10\0\1\u023e"+
    "\5\0\1\u023e\1\0\2\u023e\2\0\1\u0242\5\0\4\u023e"+
    "\24\0\1\u0243\35\0\1\u01e4\33\0\1\u01e0\63\0\2\u0244"+
    "\37\0\1\u0245\32\0\1\u01e0\1\u01e1\2\u01e0\1\0\2\u01e0"+
    "\11\0\1\u01e0\5\0\1\u01e0\1\0\2\u01e0\2\0\1\u01e0"+
    "\3\0\1\u01e6\1\0\4\u01e0\12\0\1\u0246\60\0\1\u0247"+
    "\44\0\1\u0248\33\0\1\u0249\47\0\1\u024a\56\0\1\u024b"+
    "\20\0\1\u024c\1\u024d\2\u024c\1\0\1\u024c\1\u024e\1\u024f"+
    "\10\0\1\u024c\5\0\1\u024c\1\0\2\u024c\2\0\1\u0250"+
    "\5\0\4\u024c\13\0\1\u0251\47\0\1\u0252\17\0\1\u0252"+
    "\11\0\2\u01f1\2\0\1\u01f1\11\0\1\u0253\25\0\1\u01f1"+
    "\2\0\1\u01f2\70\0\1\u0254\20\0\1\u01f2\1\u01f3\2\u01f2"+
    "\1\0\2\u01f2\11\0\1\u01f2\5\0\1\u01f2\1\0\2\u01f2"+
    "\2\0\1\u01f2\5\0\4\u01f2\2\0\1\u01f7\61\0\1\u0255"+
    "\27\0\1\u01f7\1\u01f8\2\u01f7\1\0\2\u01f7\11\0\1\u01f7"+
    "\5\0\1\u01f7\1\0\2\u01f7\2\0\1\u01f7\5\0\4\u01f7"+
    "\16\0\1\u0256\65\0\1\u0257\7\0\1\137\1\u0258\2\137"+
    "\1\0\2\137\11\0\1\137\5\0\1\137\1\0\2\137"+
    "\2\0\1\137\5\0\4\137\25\0\1\u0259\43\0\1\u025a"+
    "\62\0\1\u025b\23\0\1\u025c\40\0\1\u0116\36\0\1\247"+
    "\54\0\1\u01ff\61\0\1\u025d\20\0\1\u011c\1\u011d\1\u011e"+
    "\1\u011f\1\0\1\u011e\1\u011c\1\0\1\u0122\1\u025e\6\0"+
    "\1\u011c\2\0\1\u0124\2\0\1\u011c\1\0\2\u011c\1\u0122"+
    "\1\0\1\u0125\3\0\1\u0126\1\0\3\u011c\1\u011e\14\0"+
    "\1\u025f\32\0\1\u0260\1\u020a\1\261\1\0\1\u0260\2\0"+
    "\1\262\21\0\1\262\12\0\1\u0260\1\0\2\u0260\1\261"+
    "\1\0\1\u0260\2\0\1\262\21\0\1\262\12\0\1\u0260"+
    "\20\0\2\u0261\25\0\2\u020c\2\0\1\u020c\12\0\2\u020d"+
    "\23\0\1\u020c\1\u0262\1\u0263\2\u0262\1\0\2\u0262\11\0"+
    "\1\u0262\5\0\1\u0262\1\0\2\u0262\2\0\1\u0264\5\0"+
    "\4\u0262\11\0\1\u0265\52\0\1\u0266\54\0\1\u0267\43\0"+
    "\1\u0268\40\0\1\u0269\40\0\1\u0139\36\0\1\u01ad\43\0"+
    "\1\212\1\u026a\1\u026b\1\215\1\0\1\u026b\1\216\1\217"+
    "\1\371\4\0\1\221\2\0\1\212\2\0\1\306\2\0"+
    "\1\212\1\0\2\212\1\371\1\0\1\212\1\221\1\0"+
    "\1\64\2\0\3\212\1\u026b\11\0\1\u0210\52\0\1\u026c"+
    "\27\0\1\156\1\157\1\160\1\156\1\0\1\160\1\156"+
    "\4\0\1\u026d\4\0\1\156\4\0\1\163\1\164\1\0"+
    "\2\156\2\0\1\165\5\0\3\156\1\160\12\0\1\u026e"+
    "\46\0\1\u026f\42\0\1\u0270\21\0\1\u0270\37\0\1\u0271"+
    "\21\0\1\u0272\1\u0273\2\u0272\1\0\1\u0272\1\u0274\1\u0275"+
    "\10\0\1\u0272\5\0\1\u0272\1\0\2\u0272\2\0\1\u0276"+
    "\5\0\4\u0272\36\0\1\u0277\7\0\1\u0278\1\u0279\1\u027a"+
    "\1\u027b\1\0\1\u027a\1\u0278\10\0\1\u027c\1\u0278\2\0"+
    "\1\u027d\1\u027e\1\0\1\u0278\1\0\2\u0278\2\0\1\u0278"+
    "\5\0\3\u0278\1\u027a\6\0\2\u027f\44\0\2\u0280\54\0"+
    "\1\u0281\40\0\1\u0282\1\u0283\55\0\1\u0284\23\0\1\u015a"+
    "\2\u0225\1\u015a\1\0\1\u0225\1\u015a\11\0\1\u015a\5\0"+
    "\1\u015a\1\0\1\u015a\1\u0227\2\0\1\u015a\5\0\1\u015a"+
    "\1\u0227\1\u015a\1\u0225\11\0\1\u01ca\22\0\1\u0285\11\0"+
    "\1\u015a\1\u0286\2\u015a\1\0\2\u015a\11\0\1\u015a\5\0"+
    "\1\u015a\1\0\2\u015a\2\0\1\u015a\5\0\5\u015a\2\u0225"+
    "\1\u015a\1\0\1\u0225\1\u015a\4\0\1\u01ca\3\0\1\u0226"+
    "\1\u015a\5\0\1\u015a\1\0\1\u015a\1\u0227\2\0\1\u015a"+
    "\5\0\1\u015a\1\u0225\1\u015a\1\u0225\1\u015a\2\u0225\1\u015a"+
    "\1\0\1\u0225\1\u015a\11\0\1\u015a\5\0\1\u015a\1\0"+
    "\1\u015a\1\u0227\2\0\1\u015a\5\0\1\u015a\1\u0225\1\u015a"+
    "\1\u0225\24\0\1\u0287\22\0\1\u0288\1\u022c\1\354\1\0"+
    "\1\u0288\2\0\1\u022d\21\0\1\u022d\12\0\1\u0288\1\0"+
    "\2\u0288\1\354\1\0\1\u0288\2\0\1\u022d\21\0\1\u022d"+
    "\12\0\1\u0288\1\356\1\u0289\2\356\1\0\2\356\4\0"+
    "\1\u0176\4\0\1\356\5\0\1\356\1\0\2\356\2\0"+
    "\1\u028a\5\0\4\356\17\0\1\u028b\26\0\1\176\1\u022b"+
    "\1\u022c\1\201\1\0\1\u022c\1\176\1\0\1\u022d\7\0"+
    "\1\176\5\0\1\176\1\0\2\176\1\u022d\1\0\1\176"+
    "\5\0\3\176\1\u022c\1\176\1\u028c\1\u028d\1\u028e\1\0"+
    "\1\u028d\1\176\1\0\1\u028f\7\0\1\176\5\0\1\176"+
    "\1\0\2\176\1\u028f\1\0\1\176\5\0\3\176\1\u028d"+
    "\13\0\1\u0290\57\0\1\u0291\43\0\1\u0292\46\0\1\u0293"+
    "\37\0\1\u0294\40\0\1\u016e\36\0\1\333\43\0\1\u0295"+
    "\1\u0296\2\u0295\1\0\1\u0295\1\u0297\1\u0298\10\0\1\u0295"+
    "\5\0\1\u0295\1\0\2\u0295\2\0\1\u0299\5\0\4\u0295"+
    "\2\0\1\u0239\55\0\1\u029a\33\0\1\u0239\1\u023a\2\u0239"+
    "\1\0\2\u0239\11\0\1\u0239\5\0\1\u0239\1\0\2\u0239"+
    "\2\0\1\u0239\5\0\4\u0239\2\0\1\u023e\63\0\2\u029b"+
    "\24\0\1\u023e\1\u023f\2\u023e\1\0\2\u023e\11\0\1\u023e"+
    "\5\0\1\u023e\1\0\2\u023e\2\0\1\u023e\5\0\4\u023e"+
    "\11\0\1\u0232\44\0\1\u029c\21\0\1\u029c\13\0\1\356"+
    "\1\u0289\2\356\1\0\2\356\11\0\1\356\5\0\1\356"+
    "\1\0\2\356\2\0\1\356\5\0\4\356\1\u01e0\1\u01e1"+
    "\2\u01e0\1\0\2\u01e0\11\0\1\u01e0\5\0\1\u01e0\1\0"+
    "\2\u01e0\2\0\1\u01e0\5\0\4\u01e0\6\0\2\u029d\2\0"+
    "\1\u029d\72\0\1\u029e\33\0\1\u029f\20\0\1\u02a0\1\u02a1"+
    "\2\u02a0\1\0\2\u02a0\4\0\1\u02a2\4\0\1\u02a0\5\0"+
    "\1\u02a0\1\0\2\u02a0\2\0\1\u02a3\5\0\4\u02a0\25\0"+
    "\1\u02a4\22\0\1\u024c\60\0\1\u02a5\17\0\1\u02a5\10\0"+
    "\1\u024c\1\u024d\2\u024c\1\0\2\u024c\11\0\1\u024c\5\0"+
    "\1\u024c\1\0\2\u024c\2\0\1\u024c\5\0\4\u024c\15\0"+
    "\1\u02a6\17\0\1\u02a6\16\0\2\u02a7\44\0\2\u02a8\60\0"+
    "\1\u02a9\42\0\1\u02aa\37\0\1\u02ab\45\0\1\u02ac\1\0"+
    "\1\u02ac\34\0\1\137\55\0\1\u02ad\46\0\1\u02ae\43\0"+
    "\1\u02af\1\0\1\u02af\40\0\2\u02b0\51\0\1\u02b1\57\0"+
    "\1\u02b2\32\0\1\u02b3\33\0\1\u02b4\1\u02b5\2\u02b4\1\0"+
    "\1\u02b4\1\u02b6\1\u02b7\10\0\1\u02b4\5\0\1\u02b4\1\0"+
    "\2\u02b4\2\0\1\u02b8\5\0\4\u02b4\2\0\1\u0262\43\0"+
    "\1\u0262\1\u0263\2\u0262\1\0\2\u0262\11\0\1\u0262\5\0"+
    "\1\u0262\1\0\2\u0262\2\0\1\u0262\5\0\4\u0262\1\u02b9"+
    "\1\u02ba\2\u02b9\1\0\2\u02b9\11\0\1\u02b9\5\0\1\u02b9"+
    "\1\0\2\u02b9\2\0\1\u02b9\1\0\1\u02bb\3\0\4\u02b9"+
    "\6\0\2\u02bc\3\0\1\u02bc\44\0\1\u02bd\46\0\1\u02be"+
    "\40\0\2\u02bf\37\0\1\u02c0\1\u026b\1\370\1\0\1\u02c0"+
    "\2\217\1\371\4\0\1\221\5\0\1\306\6\0\1\371"+
    "\2\0\1\221\1\0\1\64\5\0\1\u02c0\1\0\2\u02c0"+
    "\1\370\1\0\1\u02c0\2\217\1\371\4\0\1\221\5\0"+
    "\1\306\6\0\1\371\2\0\1\221\1\0\1\64\5\0"+
    "\1\u02c0\11\0\1\u02c1\60\0\1\u02c2\21\0\1\u02c3\1\u02c4"+
    "\2\u02c3\1\0\2\u02c3\11\0\1\u02c3\5\0\1\u02c3\1\0"+
    "\2\u02c3\2\0\1\u02c3\5\0\4\u02c3\23\0\1\u02c5\30\0"+
    "\2\u02c6\44\0\2\u02c7\3\0\1\u02c7\34\0\1\u0272\63\0"+
    "\2\u02c8\24\0\1\u0272\1\u0273\2\u0272\1\0\2\u0272\11\0"+
    "\1\u0272\5\0\1\u0272\1\0\2\u0272\2\0\1\u0272\5\0"+
    "\4\u0272\6\0\2\u02c9\37\0\1\u02ca\1\u027a\1\u02cb\1\0"+
    "\1\u02ca\11\0\1\u027c\3\0\1\u027d\1\u027e\20\0\1\u02ca"+
    "\1\0\2\u02ca\1\u02cb\1\0\1\u02ca\11\0\1\u027c\3\0"+
    "\1\u027d\1\u027e\20\0\1\u02ca\1\0\2\u02cb\2\0\1\u02cb"+
    "\11\0\1\u027c\3\0\1\u027d\1\u027e\20\0\1\u02cb\12\0"+
    "\1\u02cc\57\0\1\u02cd\34\0\1\u02ce\71\0\1\u02cf\20\0"+
    "\1\u02d0\50\0\1\u02d1\17\0\1\u02d1\35\0\1\u02d2\43\0"+
    "\1\u02d3\40\0\1\u02d4\40\0\1\u01ca\36\0\1\u015a\54\0"+
    "\1\u0282\36\0\1\356\43\0\1\176\1\u028c\1\u028d\1\u028e"+
    "\1\0\1\u028d\1\176\1\0\1\u028f\7\0\1\176\3\0"+
    "\1\u02d5\1\0\1\176\1\0\2\176\1\u028f\1\0\1\u0230"+
    "\5\0\3\176\1\u028d\1\0\1\u02d6\1\u028d\1\u02d7\1\0"+
    "\1\u02d6\2\0\1\u028f\21\0\1\u028f\12\0\1\u02d6\1\0"+
    "\2\u02d6\1\u02d7\1\0\1\u02d6\2\0\1\u028f\21\0\1\u028f"+
    "\12\0\1\u02d6\1\0\2\u02d7\2\0\1\u02d7\2\0\1\u028f"+
    "\21\0\1\u028f\12\0\1\u02d7\1\356\1\357\1\360\1\356"+
    "\1\0\1\360\1\356\4\0\1\u02d8\1\362\3\0\1\356"+
    "\5\0\1\356\1\0\2\356\2\0\1\363\5\0\3\356"+
    "\1\360\16\0\1\u02d9\41\0\1\u02da\46\0\1\u02db\50\0"+
    "\1\u02dc\27\0\1\u02dd\1\u02de\2\u02dd\1\0\1\u02dd\1\u02df"+
    "\1\u02e0\1\0\1\u02e1\6\0\1\u02dd\5\0\1\u02dd\1\0"+
    "\2\u02dd\2\0\1\u02e2\5\0\4\u02dd\2\0\1\u0295\61\0"+
    "\1\u02e3\27\0\1\u0295\1\u0296\2\u0295\1\0\2\u0295\11\0"+
    "\1\u0295\5\0\1\u0295\1\0\2\u0295\2\0\1\u0295\5\0"+
    "\4\u0295\16\0\1\u02e4\54\0\1\u02e5\20\0\1\u01e0\1\u01e1"+
    "\2\u01e0\1\0\2\u01e0\2\0\1\u02e6\6\0\1\u01e0\5\0"+
    "\1\u01e0\1\0\2\u01e0\2\0\1\u01e5\3\0\1\u01e6\1\0"+
    "\4\u01e0\6\0\2\u02e7\51\0\1\u02e8\34\0\1\u02a0\61\0"+
    "\1\u02e9\27\0\1\u02a0\1\u02a1\2\u02a0\1\0\2\u02a0\11\0"+
    "\1\u02a0\5\0\1\u02a0\1\0\2\u02a0\2\0\1\u02a0\5\0"+
    "\4\u02a0\12\0\1\u02ea\46\0\1\u02eb\40\0\2\u02ec\75\0"+
    "\1\u02ed\32\0\1\u02ee\57\0\1\u02ef\15\0\2\u02f0\46\0"+
    "\1\u02f1\21\0\1\u02f1\13\0\1\u02f2\1\u02f3\1\u02f4\1\u02f5"+
    "\1\0\1\u02f4\1\u02f2\11\0\1\u02f2\5\0\1\u02f2\1\0"+
    "\2\u02f2\2\0\1\u02f2\2\0\1\u02f6\2\0\3\u02f2\1\u02f4"+
    "\37\0\1\u02f7\17\0\2\u02f8\60\0\1\u02f9\36\0\1\u02fa"+
    "\35\0\2\u02fb\63\0\1\u02fc\22\0\1\u02b4\60\0\1\u02fd"+
    "\17\0\1\u02fd\10\0\1\u02b4\1\u02b5\2\u02b4\1\0\2\u02b4"+
    "\11\0\1\u02b4\5\0\1\u02b4\1\0\2\u02b4\2\0\1\u02b4"+
    "\5\0\4\u02b4\2\0\1\u02b9\51\0\2\u02fe\36\0\1\u01ad"+
    "\1\u02ff\1\u0300\1\u0301\1\0\1\u0300\1\u01ad\4\0\1\303"+
    "\3\0\1\304\1\u01ad\1\0\1\305\3\0\1\u01ad\1\0"+
    "\2\u01ad\2\0\1\u01ad\5\0\1\u0302\2\u01ad\1\u0300\37\0"+
    "\1\u0303\17\0\2\u0304\60\0\1\u0305\20\0\1\u0306\1\u0307"+
    "\1\u0308\1\u0309\1\0\1\u0308\1\u030a\1\u030b\10\0\1\u0306"+
    "\5\0\1\u0306\1\0\2\u0306\2\0\1\u0306\1\0\1\u030c"+
    "\3\0\3\u0306\1\u0308\6\0\2\u030d\40\0\1\u02c3\73\0"+
    "\1\u030e\34\0\1\u030f\53\0\1\u0310\32\0\1\u0311\72\0"+
    "\1\u0312\20\0\1\u0313\47\0\1\u0314\44\0\1\u0315\50\0"+
    "\1\u0316\40\0\1\u0317\46\0\1\u0318\46\0\1\u0319\40\0"+
    "\2\u031a\51\0\1\u031b\46\0\1\u031c\56\0\1\u031d\57\0"+
    "\1\u031e\17\0\2\u031f\44\0\1\u0320\36\0\1\u02dd\70\0"+
    "\1\u0321\30\0\1\u0322\21\0\1\u0322\13\0\1\u02dd\1\u02de"+
    "\2\u02dd\1\0\2\u02dd\11\0\1\u02dd\5\0\1\u02dd\1\0"+
    "\2\u02dd\2\0\1\u02dd\5\0\4\u02dd\17\0\1\u0323\37\0"+
    "\1\u0324\34\0\1\u023e\1\u023f\2\u023e\1\0\2\u023e\4\0"+
    "\1\u0325\4\0\1\u023e\5\0\1\u023e\1\0\2\u023e\2\0"+
    "\1\u0242\5\0\4\u023e\25\0\1\u0326\36\0\1\u0327\45\0"+
    "\1\u0328\65\0\1\u0329\33\0\1\u032a\37\0\1\u032b\66\0"+
    "\1\u032c\21\0\1\u032d\51\0\1\u032e\34\0\2\u032f\47\0"+
    "\1\u0330\47\0\1\u0331\33\0\1\u0332\1\u02f4\1\u0333\1\0"+
    "\1\u0332\31\0\1\u02f6\5\0\1\u0332\1\0\2\u0332\1\u0333"+
    "\1\0\1\u0332\31\0\1\u02f6\5\0\1\u0332\1\0\2\u0333"+
    "\2\0\1\u0333\31\0\1\u02f6\5\0\1\u0333\6\0\2\u0334"+
    "\47\0\1\u0335\47\0\1\u0336\72\0\1\u0126\20\0\1\u0337"+
    "\45\0\1\u0338\44\0\1\u0339\34\0\1\u033a\1\u0300\1\u033b"+
    "\1\0\1\u033a\5\0\1\303\3\0\1\304\2\0\1\305"+
    "\17\0\1\u0130\2\0\1\u033a\1\0\2\u033a\1\u033b\1\0"+
    "\1\u033a\5\0\1\303\3\0\1\304\2\0\1\305\17\0"+
    "\1\u0130\2\0\1\u033a\1\0\2\u033b\2\0\1\u033b\5\0"+
    "\1\303\3\0\1\304\2\0\1\305\17\0\1\u0130\2\0"+
    "\1\u033b\11\0\1\u033c\35\0\1\u033d\1\u0308\1\u033e\1\0"+
    "\1\u033d\2\u030b\35\0\1\u033d\1\0\2\u033d\1\u033e\1\0"+
    "\1\u033d\2\u030b\35\0\1\u033d\1\0\2\u033e\2\0\1\u033e"+
    "\2\u030b\35\0\1\u033e\16\0\1\u033f\35\0\2\u0340\47\0"+
    "\1\u0341\34\0\26\u0342\1\0\17\u0342\11\0\1\u0343\34\0"+
    "\1\u0272\1\u0273\2\u0272\1\0\2\u0272\4\0\1\u0344\4\0"+
    "\1\u0272\5\0\1\u0272\1\0\2\u0272\2\0\1\u0276\5\0"+
    "\4\u0272\16\0\1\u0345\51\0\1\u0346\63\0\1\u0347\5\0"+
    "\1\u0348\1\u0349\2\u0348\1\0\1\u0348\1\u034a\1\u034b\10\0"+
    "\1\u0348\5\0\1\u0348\1\0\2\u0348\2\0\1\u034c\5\0"+
    "\4\u0348\16\0\1\u034d\42\0\1\u034e\70\0\1\u034f\46\0"+
    "\1\u0350\17\0\2\u0351\60\0\1\u0352\45\0\1\u0353\20\0"+
    "\1\u01e0\1\u01e1\2\u01e0\1\0\1\u01e0\1\u01e2\1\u01e3\3\0"+
    "\1\u0245\1\u0354\3\0\1\u01e0\5\0\1\u01e0\1\0\2\u01e0"+
    "\2\0\1\u01e5\3\0\1\u01e6\1\0\4\u01e0\6\0\2\u0355"+
    "\2\0\1\u0355\60\0\1\u0356\31\0\1\u0357\42\0\2\u0358"+
    "\3\0\1\u0358\40\0\2\u0359\46\0\1\u035a\21\0\1\u035a"+
    "\37\0\1\u035b\27\0\2\u035c\36\0\1\u035d\1\u035e\2\u035d"+
    "\1\0\1\u035d\1\u035f\1\u0360\10\0\1\u035d\5\0\1\u035d"+
    "\1\0\2\u035d\2\0\1\u0361\5\0\4\u035d\13\0\1\u0362"+
    "\40\0\2\u0363\44\0\2\u0364\74\0\1\u0365\22\0\1\u0366"+
    "\50\0\1\u0367\27\0\1\u014a\1\u0368\2\u014a\1\0\2\u014a"+
    "\3\0\1\u0369\5\0\1\u014a\5\0\1\u014a\1\0\2\u014a"+
    "\2\0\1\u036a\5\0\4\u014a\12\0\1\u036b\43\0\1\u036c"+
    "\21\0\1\u036c\31\0\1\u036d\53\0\1\u036e\37\0\1\u036f"+
    "\45\0\1\u0370\45\0\1\u0371\45\0\1\u0372\53\0\1\u0373"+
    "\46\0\1\u0374\32\0\1\u0375\43\0\1\u0376\21\0\1\u0376"+
    "\13\0\26\u0342\1\u0377\17\u0342\25\0\1\u0378\44\0\1\u0379"+
    "\34\0\1\u037a\50\0\1\u037b\27\0\1\u037c\1\u037d\2\u037c"+
    "\1\0\1\u037c\1\u037e\1\u037f\10\0\1\u037c\5\0\1\u037c"+
    "\1\0\2\u037c\2\0\1\u0380\5\0\4\u037c\2\0\1\u0348"+
    "\55\0\1\u0381\33\0\1\u0348\1\u0349\2\u0348\1\0\2\u0348"+
    "\11\0\1\u0348\5\0\1\u0348\1\0\2\u0348\2\0\1\u0348"+
    "\5\0\4\u0348\25\0\1\u0382\20\0\1\u0383\1\u0384\2\u0383"+
    "\1\0\2\u0383\11\0\1\u0383\5\0\1\u0383\1\0\2\u0383"+
    "\2\0\1\u0383\5\0\4\u0383\6\0\2\u0385\47\0\1\u0386"+
    "\42\0\2\u0387\2\0\1\u0387\41\0\2\u0245\3\0\1\u0245"+
    "\40\0\2\u0388\62\0\1\u0389\32\0\1\u038a\47\0\1\u038b"+
    "\40\0\2\u038c\76\0\1\u01e6\7\0\1\u035d\63\0\2\u038d"+
    "\24\0\1\u035d\1\u035e\2\u035d\1\0\2\u035d\11\0\1\u035d"+
    "\5\0\1\u035d\1\0\2\u035d\2\0\1\u035d\5\0\4\u035d"+
    "\16\0\1\u038e\40\0\1\u038f\45\0\1\u0390\42\0\2\u0391"+
    "\54\0\1\u0392\54\0\1\u0393\22\0\1\u014a\53\0\1\u0394"+
    "\21\0\1\u0394\13\0\1\u014a\1\u0368\2\u014a\1\0\2\u014a"+
    "\11\0\1\u014a\5\0\1\u014a\1\0\2\u014a\2\0\1\u014a"+
    "\5\0\4\u014a\16\0\1\u0395\35\0\2\u0396\3\0\1\u0396"+
    "\32\0\1\u0397\1\u0398\2\u0397\1\0\1\u0397\1\u0399\1\u039a"+
    "\10\0\1\u0397\5\0\1\u0397\1\0\2\u0397\2\0\1\u039b"+
    "\5\0\4\u0397\6\0\2\u02ae\74\0\1\u039c\22\0\1\u039d"+
    "\70\0\1\u039e\22\0\1\u039f\40\0\2\u02be\51\0\1\u03a0"+
    "\50\0\1\u03a1\35\0\2\u03a2\3\0\1\u03a2\63\0\1\u03a3"+
    "\22\0\2\u03a4\44\0\2\u03a5\36\0\1\u03a6\1\u03a7\2\u03a6"+
    "\1\0\2\u03a6\2\0\1\u03a8\6\0\1\u03a6\5\0\1\u03a6"+
    "\1\0\2\u03a6\2\0\1\u03a9\5\0\4\u03a6\2\0\1\u037c"+
    "\61\0\1\u03aa\27\0\1\u037c\1\u037d\2\u037c\1\0\2\u037c"+
    "\11\0\1\u037c\5\0\1\u037c\1\0\2\u037c\2\0\1\u037c"+
    "\5\0\4\u037c\16\0\1\u03ab\41\0\1\u03ac\35\0\1\u0383"+
    "\55\0\1\u03ad\57\0\1\u03ae\61\0\1\u03af\13\0\2\u02db"+
    "\46\0\1\u03b0\21\0\1\u03b0\24\0\1\u03b1\61\0\1\u03b2"+
    "\56\0\1\u03b3\17\0\1\u03b4\21\0\1\u03b4\23\0\1\u03b5"+
    "\21\0\1\u03b5\24\0\1\u03b6\61\0\1\u03b7\32\0\1\u03b8"+
    "\44\0\1\u03b9\45\0\1\u03ba\36\0\1\u0397\63\0\2\u03bb"+
    "\24\0\1\u0397\1\u0398\2\u0397\1\0\2\u0397\11\0\1\u0397"+
    "\5\0\1\u0397\1\0\2\u0397\2\0\1\u0397\5\0\4\u0397"+
    "\6\0\2\u03bc\54\0\1\u03bd\35\0\2\u03be\36\0\1\u02b9"+
    "\1\u02ba\2\u02b9\1\0\2\u02b9\11\0\1\u02b9\5\0\1\u02b9"+
    "\1\0\2\u02b9\2\0\1\u02b9\5\0\4\u02b9\24\0\1\u03bf"+
    "\34\0\1\u03c0\42\0\1\u03c1\21\0\1\u03c1\53\0\1\u03c2"+
    "\16\0\1\u03c3\36\0\1\u03a6\53\0\1\u03c4\21\0\1\u03c4"+
    "\13\0\1\u03a6\1\u03a7\2\u03a6\1\0\2\u03a6\11\0\1\u03a6"+
    "\5\0\1\u03a6\1\0\2\u03a6\2\0\1\u03a6\5\0\4\u03a6"+
    "\17\0\1\u03c5\37\0\1\u03c6\34\0\1\u03c7\1\u03c8\2\u03c7"+
    "\1\0\2\u03c7\11\0\1\u03c7\5\0\1\u03c7\1\0\2\u03c7"+
    "\2\0\1\u03c7\5\0\4\u03c7\16\0\1\u03c9\35\0\2\u0319"+
    "\50\0\1\u03ca\41\0\2\u03cb\3\0\1\u03cb\42\0\1\u03cc"+
    "\21\0\1\u03cc\26\0\1\u03cd\40\0\2\u03ce\51\0\1\u03cf"+
    "\45\0\1\u03d0\42\0\1\u03d1\21\0\1\u03d1\25\0\1\u03d2"+
    "\33\0\4\u03d3\1\0\2\u03d3\11\0\1\u03d3\5\0\1\u03d3"+
    "\1\0\2\u03d3\2\0\1\u03d3\5\0\4\u03d3\24\0\1\u03d4"+
    "\31\0\1\u03d5\21\0\1\u03d5\40\0\1\u03d6\31\0\1\u03d7"+
    "\72\0\1\u03d8\20\0\1\u03d9\53\0\1\u03da\26\0\1\u0306"+
    "\1\u0307\1\u0308\1\u0309\1\0\1\u0308\1\u030a\1\u030b\10\0"+
    "\1\u0306\5\0\1\u0306\1\0\2\u0306\2\0\1\u0306\5\0"+
    "\3\u0306\1\u0308\13\0\1\u03db\43\0\1\u03dc\44\0\1\u03dd"+
    "\21\0\1\u03dd\21\0\2\u03de\3\0\1\u03de\40\0\2\u03df"+
    "\46\0\1\u03e0\21\0\1\u03e0\15\0\1\u03c7\51\0\2\u03e1"+
    "\3\0\1\u03e1\32\0\1\u03e2\1\u03e3\2\u03e2\1\0\2\u03e2"+
    "\11\0\1\u03e2\5\0\1\u03e2\1\0\2\u03e2\2\0\1\u03e2"+
    "\5\0\4\u03e2\6\0\2\u03e4\3\0\1\u03e4\56\0\1\u03e5"+
    "\32\0\1\u03e6\34\0\1\u03e7\1\u03e8\2\u03e7\1\0\2\u03e7"+
    "\11\0\1\u03e7\5\0\1\u03e7\1\0\2\u03e7\2\0\1\u03e7"+
    "\5\0\4\u03e7\13\0\1\u03e9\32\0\1\u03ea\1\u03eb\2\u03ea"+
    "\1\0\2\u03ea\11\0\1\u03ea\5\0\1\u03ea\1\0\2\u03ea"+
    "\2\0\1\u03ea\5\0\4\u03ea\1\0\2\u03d3\1\u03ec\1\0"+
    "\1\u03d3\4\0\1\u03ed\32\0\1\u03d3\6\0\2\u03dc\3\0"+
    "\1\u03dc\45\0\1\u03ee\32\0\1\u0397\1\u0398\2\u0397\1\0"+
    "\2\u0397\4\0\1\u03ef\4\0\1\u0397\5\0\1\u0397\1\0"+
    "\2\u0397\2\0\1\u039b\5\0\4\u0397\10\0\1\u03f0\21\0"+
    "\1\u03f0\21\0\2\u03f1\46\0\1\u03f2\21\0\1\u03f2\25\0"+
    "\1\u03f3\62\0\1\u03f4\24\0\2\u03f5\3\0\1\u03f5\43\0"+
    "\1\u03f6\47\0\1\u03f7\34\0\1\u03e2\51\0\2\u03f8\46\0"+
    "\1\u03f9\21\0\1\u03f9\15\0\1\u03e7\44\0\1\u03d3\1\u03ea"+
    "\1\u03ec\1\0\1\u03d3\4\0\1\u03ed\32\0\1\u03d3\1\0"+
    "\2\u03ec\2\0\1\u03ec\4\0\1\u03ed\32\0\1\u03ec\24\0"+
    "\1\u03fa\45\0\1\u03fb\34\0\1\u03fc\43\0\1\u03fd\47\0"+
    "\1\u03fe\71\0\1\u03ff\26\0\2\u0400\34\0\1\u0401\21\0"+
    "\1\u0401\24\0\1\u0402\47\0\1\u0403\47\0\1\u0404\17\0"+
    "\1\u0404\16\0\2\u0405\46\0\1\u0406\21\0\1\u0406\52\0"+
    "\1\u0407\21\0\1\u0408\40\0\2\u0409\3\0\1\u0409\42\0"+
    "\1\u040a\21\0\1\u040a\13\0\1\u040b\1\u040c\2\u040b\1\0"+
    "\2\u040b\11\0\1\u040b\5\0\1\u040b\1\0\2\u040b\2\0"+
    "\1\u040b\5\0\4\u040b\1\u040d\1\u040e\2\u040d\1\0\1\u040d"+
    "\1\u040f\1\u0410\10\0\1\u040d\5\0\1\u040d\1\0\2\u040d"+
    "\2\0\1\u0411\5\0\4\u040d\11\0\1\u0412\47\0\1\u0413"+
    "\40\0\2\u0414\61\0\1\u0415\35\0\1\u0416\34\0\1\u040b"+
    "\45\0\1\u040d\61\0\1\u0417\27\0\1\u040d\1\u040e\2\u040d"+
    "\1\0\2\u040d\11\0\1\u040d\5\0\1\u040d\1\0\2\u040d"+
    "\2\0\1\u040d\5\0\4\u040d\10\0\1\u0418\21\0\1\u0418"+
    "\13\0\1\u0419\1\u041a\2\u0419\1\0\2\u0419\11\0\1\u0419"+
    "\5\0\1\u0419\1\0\2\u0419\2\0\1\u0419\5\0\4\u0419"+
    "\20\0\2\u041b\54\0\1\320\26\0\1\u041c\42\0\2\u041d"+
    "\3\0\1\u041d\34\0\1\u0419\63\0\2\u041e\63\0\1\u041f"+
    "\17\0\1\u0420\47\0\1\u0421\56\0\1\u0422\37\0\1\u0423"+
    "\35\0\2\u0424\63\0\1\u0425\31\0\1\u0426\45\0\1\u0427"+
    "\44\0\1\u0428\21\0\1\u0428\23\0\1\u0429\21\0\1\u0429"+
    "\26\0\1\u042a\45\0\1\u042b\32\0\1\u042c\1\u042d\2\u042c"+
    "\1\0\2\u042c\11\0\1\u042c\5\0\1\u042c\1\0\2\u042c"+
    "\2\0\1\u042c\5\0\4\u042c\2\0\1\u042c\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34276];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\3\1\1\11\1\1\1\11\1\1"+
    "\15\0\1\1\51\0\1\1\1\11\6\0\1\11\1\1"+
    "\1\0\1\11\3\1\3\0\1\1\6\0\1\11\3\1"+
    "\4\0\1\1\6\0\1\11\3\1\2\0\2\1\10\0"+
    "\1\11\3\1\2\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\11\4\1\5\0\1\11\4\0\2\1\14\0"+
    "\1\11\3\1\3\0\2\1\3\0\1\11\1\1\1\0"+
    "\1\1\6\0\4\1\7\0\2\1\3\0\1\11\2\1"+
    "\13\0\1\11\4\1\10\0\1\1\1\0\1\1\3\0"+
    "\1\11\2\1\2\0\1\1\14\0\2\1\4\0\1\11"+
    "\2\1\23\0\1\11\4\1\4\0\1\1\1\0\2\1"+
    "\1\0\1\1\7\0\3\1\14\0\1\11\3\1\3\0"+
    "\1\11\1\1\1\11\3\1\2\0\1\1\1\0\1\11"+
    "\2\1\1\0\1\1\3\0\1\11\3\1\4\0\2\1"+
    "\27\0\2\1\1\0\1\1\1\0\3\1\12\0\1\1"+
    "\6\0\1\1\1\0\3\1\14\0\1\11\2\1\5\0"+
    "\1\11\1\1\1\0\3\1\43\0\1\1\1\0\3\1"+
    "\5\0\1\11\2\1\2\0\1\1\14\0\1\11\2\1"+
    "\1\0\1\1\1\11\2\1\1\0\1\1\10\0\1\1"+
    "\4\0\2\1\11\0\1\1\20\0\1\1\1\0\3\1"+
    "\1\0\2\1\2\0\2\1\6\0\1\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\1\1\11\0"+
    "\1\11\2\1\1\0\1\1\7\0\1\1\11\0\1\11"+
    "\2\1\5\0\2\1\6\0\1\11\2\1\1\0\1\1"+
    "\1\0\1\11\3\1\12\0\1\1\2\0\2\1\1\0"+
    "\3\1\6\0\1\11\2\1\1\0\1\1\6\0\1\11"+
    "\1\1\1\0\1\1\20\0\1\11\2\1\1\0\1\1"+
    "\1\11\1\1\10\0\1\11\1\1\30\0\1\11\2\1"+
    "\2\0\1\1\17\0\1\11\3\1\11\0\4\1\3\0"+
    "\1\11\4\1\75\0\1\11\2\1\1\0\1\1\20\0"+
    "\1\11\2\1\1\0\1\1\6\0\1\1\1\0\1\1"+
    "\21\0\1\11\2\1\1\0\1\1\2\0\1\11\1\1"+
    "\22\0\1\11\2\1\1\0\1\1\12\0\1\11\1\1"+
    "\1\0\1\1\35\0\1\11\1\1\31\0\1\11\1\1"+
    "\3\0\1\11\1\1\1\0\2\1\37\0\1\11\1\1"+
    "\1\11\2\1\1\0\1\1\7\0\1\11\1\1\21\0"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1069];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	
	private String openTag = "<font color=\"orange\"><LK:TIPO"; //Aggiungere il corretto " value="tipoprovvedimento">" 
	private String closeTag = "</LK:TIPO></font>"; 
	
	private StringBuilder output = new StringBuilder();

	public String getOutput() {
		return output.toString();
	}
	



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Tipi(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { output.append(yytext());
          }
        case 58: break;
        case 2: 
          { System.out.print(yytext());
          }
        case 59: break;
        case 3: 
          { 
          }
        case 60: break;
        case 4: 
          { output.append(yytext()); yybegin(AH);
          }
        case 61: break;
        case 5: 
          { output.append(yytext()); yybegin(LK);
          }
        case 62: break;
        case 6: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"legge\" emanante=\"regione.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 63: break;
        case 7: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"legge\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 64: break;
        case 8: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legge\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 65: break;
        case 9: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"ministero.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 66: break;
        case 10: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regio.decreto\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 67: break;
        case 11: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"testo.unico\" emanante=\"stato\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 68: break;
        case 12: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 69: break;
        case 13: 
          { output.append(yytext()); yybegin(YYINITIAL);
          }
        case 70: break;
        case 14: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"direttiva\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 71: break;
        case 15: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legge.luogotenenziale\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 72: break;
        case 16: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\"  emanante=\"presidente.repubblica\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 73: break;
        case 17: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamentoeu\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 74: break;
        case 18: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regio.decreto.legge\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 75: break;
        case 19: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"ordinanza\"  emanante=\"presidente.consiglio.ministri\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 76: break;
        case 20: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legislativo\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 77: break;
        case 21: 
          { output.append(yytext().substring(0,1) +	openTag + " value=\"decreto\" emanante=\"presidente.consiglio.ministri\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 78: break;
        case 22: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"nota\" >" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 79: break;
        case 23: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"circolare\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 80: break;
        case 24: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"costituzione\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 81: break;
        case 25: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"raccomandazione\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 82: break;
        case 26: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legge\" emanante=\"capo.provvisorio.stato\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 83: break;
        case 27: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decisione\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 84: break;
        case 28: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regio.decreto.legislativo\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 85: break;
        case 29: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"legge.costituzionale\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 86: break;
        case 30: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"legge\" emanante=\"provincia.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 87: break;
        case 31: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamento\" emanante=\"regione.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 88: break;
        case 32: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamento\" emanante=\"ministero.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 89: break;
        case 33: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"presidente.repubblica\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 90: break;
        case 34: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legislativo\" emanante=\"capo.provvisorio.stato\" abbr=\"true\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 91: break;
        case 35: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"circolare\" emanante=\"ministero.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 92: break;
        case 36: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"statuto\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 93: break;
        case 37: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamento\" emanante=\"provinciale.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 94: break;
        case 38: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"direzione.\" >" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 95: break;
        case 39: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legislativo\" emanante=\"presidente.repubblica\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 96: break;
        case 40: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"deliberazione\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 97: break;
        case 41: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"ministero.tesoro\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 98: break;
        case 42: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamento\" emanante=\"comunale.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 99: break;
        case 43: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"ordinanza\" >" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 100: break;
        case 44: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"determinazione\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 101: break;
        case 45: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"statuto\" emanante=\"regione.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 102: break;
        case 46: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"ministero.+ministero.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 103: break;
        case 47: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"statuto\" emanante=\"provincia.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 104: break;
        case 48: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"risoluzione\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 105: break;
        case 49: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"ordinanza\" emanante=\"ministero.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 106: break;
        case 50: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"statuto\" emanante=\"comune.\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 107: break;
        case 51: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"provvedimento\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 108: break;
        case 52: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"regolamento\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 109: break;
        case 53: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto\" emanante=\"direttore.\" >" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 110: break;
        case 54: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.luogotenenziale\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 111: break;
        case 55: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"provvedimento.ordinamentale\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 112: break;
        case 56: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"decreto.legislativo.luogotenenziale\" emanante=\"stato\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 113: break;
        case 57: 
          { output.append(yytext().substring(0,1) + openTag + " value=\"determinazione.intercommissariale\">" + yytext().substring(1, yytext().length()-1) + closeTag + yytext().substring(yytext().length()-1));
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Tipi [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Tipi scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Tipi(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
